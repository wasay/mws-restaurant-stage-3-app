{"version":3,"names":[],"mappings":"","sources":["dbhelper.min.js"],"sourcesContent":["// js/dbhelper.js\n\nlet debug = true;\nif (debug) console.log('start /lib/dbhelper.js');\n\nconst appPrefix = 'mws-restaurant-stage-3';\nconst staticCacheName = appPrefix + '-v2';\nconst contentImgsCache = appPrefix + '-content-imgs';\nconst allCaches = [staticCacheName, contentImgsCache];\nconst dbName = 'topRestaurants3';\nconst dbVersion = 5;\n\nif (debug) console.log('dbhelper-dbName=' + dbName);\nif (debug) console.log('dbhelper-dbVersion=' + dbVersion);\n\n// https://github.com/jakearchibald/idb\n// https://developers.google.com/web/ilt/pwa/lab-indexeddb\n// https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore\n\nlet addV1Data = false;\nconst dbPromise = idb.open(dbName, dbVersion, function (upgradeDb) {\n    if (debug) console.log('dbhelper-upgradeDb.oldVersion=' + upgradeDb.oldVersion);\n\n    switch (upgradeDb.oldVersion) {\n        case 0:\n            let restaurantsObjectStore = upgradeDb.createObjectStore('restaurants', {\n                keyPath: 'restaurant_id',\n                autoIncrement: true\n            });\n            restaurantsObjectStore.createIndex('restaurant_id', 'restaurant_id', { unique: true });\n            restaurantsObjectStore.createIndex('name', 'name', { unique: false });\n            restaurantsObjectStore.createIndex('neighborhood', 'neighborhood', { unique: false });\n            restaurantsObjectStore.createIndex('photograph', 'photograph', { unique: false });\n            restaurantsObjectStore.createIndex('address', 'address', { unique: false });\n            restaurantsObjectStore.createIndex('lat', 'lat', { unique: false });\n            restaurantsObjectStore.createIndex('lng', 'lng', { unique: false });\n            restaurantsObjectStore.createIndex('cuisine_type', 'cuisine_type', { unique: false });\n            restaurantsObjectStore.createIndex('is_favorite', 'is_favorite', { unique: false });\n            restaurantsObjectStore.createIndex('createdAt', 'createdAt', { unique: false });\n            restaurantsObjectStore.createIndex('updatedAt', 'updatedAt', { unique: false });\n            if (debug) console.log('dbhelper-restaurantsObjectStore-done');\n        case 1:\n\n            // autoIncrement example - https://developers.google.com/web/ilt/pwa/working-with-indexeddb\n            const operatingHoursObjectStore = upgradeDb.createObjectStore('operating_hours', {\n                keyPath: 'operating_hour_id',\n                autoIncrement: true\n            });\n            operatingHoursObjectStore.createIndex('operating_hour_id', 'operating_hour_id', { unique: true });\n            operatingHoursObjectStore.createIndex('restaurant_id', 'restaurant_id', { unique: false });\n            operatingHoursObjectStore.createIndex('day', 'day', { unique: false });\n            operatingHoursObjectStore.createIndex('hours', 'hours', { unique: false });\n            operatingHoursObjectStore.createIndex('createdAt', 'createdAt', { unique: false });\n            operatingHoursObjectStore.createIndex('updatedAt', 'updatedAt', { unique: false });\n            if (debug) console.log('dbhelper-operatingHoursObjectStore-done');\n        case 2:\n\n            const reviewsObjectStore = upgradeDb.createObjectStore('reviews', {\n                keyPath: 'review_id',\n                autoIncrement: true\n            });\n            reviewsObjectStore.createIndex('review_id', 'review_id', { unique: true });\n            reviewsObjectStore.createIndex('restaurant_id', 'restaurant_id', { unique: false });\n            reviewsObjectStore.createIndex('name', 'name', { unique: false });\n            reviewsObjectStore.createIndex('rating', 'rating', { unique: false });\n            reviewsObjectStore.createIndex('comments', 'comments', { unique: false });\n            reviewsObjectStore.createIndex('createdAt', 'createdAt', { unique: false });\n            reviewsObjectStore.createIndex('updatedAt', 'updatedAt', { unique: false });\n            if (debug) console.log('dbhelper-reviewsObjectStore-done');\n        case 3:\n\n            let pendingObjectStore = upgradeDb.createObjectStore('pending', {\n                keyPath: 'id',\n                autoIncrement: true\n            });\n            pendingObjectStore.createIndex('id', 'id', { unique: true });\n            pendingObjectStore.createIndex('url', 'url', { unique: false });\n            pendingObjectStore.createIndex('method', 'method', { unique: false });\n            pendingObjectStore.createIndex('headers', 'headers', { unique: false });\n            pendingObjectStore.createIndex('body', 'body', { unique: false });\n            if (debug) console.log('dbhelper-pendingObjectStore-done');\n\n            addV1Data = true;\n            if (debug) console.log('dbhelper-version-3-addV1Data=' + addV1Data);\n        case 4:\n            if (debug) console.log('dbhelper-version-4-addV1Data=' + addV1Data);\n    }\n}).catch(error => {\n    // Oops!. Got an error from server.\n    error.message = `Request failed createDB. Returned status of ${error.message}`;\n    throw error;\n});\n\ndbPromise.then(db => {\n    if (debug) console.log('dbhelper-dbPromise-then');\n    const dbVersion = db.version;\n    if (debug) console.log('dbhelper-dbVersion=' + dbVersion);\n    return db;\n}).then(db => {\n    if (debug) console.log('dbhelper-addV1Data=' + addV1Data);\n    if (!addV1Data) {\n        if (!DBHelper.isIndexDbPopulated()) {\n            addV1Data = true;\n        }\n    }\n    return db;\n}).then(db => {\n\n    if (debug) console.log('dbhelper-addV1Data=' + addV1Data);\n    if (addV1Data) {\n        if (debug) console.log('dbhelper--calling-DBHelper.v1AddRestaurantsData()');\n        return DBHelper.v1AddRestaurantsData(db);\n    }\n    return db;\n}).then(db => {\n    if (debug) console.log('dbhelper-addV1Data=' + addV1Data);\n    if (addV1Data) {\n        if (debug) console.log('dbhelper--calling-DBHelper.v1AddReviewsData()');\n        return DBHelper.v1AddReviewsData(db);\n    }\n    return db;\n}).catch(error => {\n    if (debug) console.log('dbhelper-some-error');\n    // Oops!. Got an error from server.\n    error.message = `Request failed load data. Returned status of ${error.message}`;\n    throw error;\n});\n\n/**\n * Common database helper functions.\n */\nclass DBHelper {\n\n    constructor() {\n        this.restaurants = null;\n        this.reviews = null;\n        this.operating_hours = null;\n    }\n\n    static get staticCacheName() {\n        return staticCacheName;\n    }\n\n    static get contentImgsCache() {\n        return contentImgsCache;\n    }\n\n    static get allCaches() {\n        return allCaches;\n    }\n\n    static get dbPromise() {\n        return dbPromise;\n    }\n\n    static get dbName() {\n        return dbName;\n    }\n\n    static get dbVersion() {\n        return dbVersion;\n    }\n\n    /**\n     * Database URL.\n     * Change this to restaurants.json file location on your server.\n     */\n    static get DATABASE_URL() {\n        //console.log('dbhelper-DATABASE_URL()');\n        const port = 1337; // Change this to your server port\n        // michael.phan.gen suggestion:\n        // https://discussions.udacity.com/t/restaurant-reviews-app-stage-1/675923/8\n        //return `https://raw.githubusercontent.com/udacity/mws-restaurant-stage-1/master/data/restaurants.json`;\n\n        // return `http://localhost:${port}/data/restaurants.json`;\n        return `http://localhost:${port}`;\n    }\n\n    /**\n     * Database URL.\n     * Change this to restaurants.json file location on your server.\n     */\n    static get DATABASE_URL_RESTAURANTS() {\n        return DBHelper.DATABASE_URL + '/restaurants';\n    }\n\n    /**\n     * Database URL.\n     * Change this to restaurants.json file location on your server.\n     */\n    static get DATABASE_URL_REVIEWS() {\n        return DBHelper.DATABASE_URL + '/reviews';\n    }\n\n    /**\n     * Fetch all restaurants.\n     */\n    static fetchRestaurants(callback) {\n        //console.log('dbhelper-fetchRestaurants()');\n\n        return fetch(DBHelper.DATABASE_URL_RESTAURANTS, {\n            headers: { 'Content-Type': 'application/json' }\n        }).then(networkResponse => callback(null, networkResponse.json())).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-fetchRestaurants()`;\n            return callback(error.message, null);\n        });\n    }\n\n    /**\n     * Fetch a restaurant by its ID.\n     */\n    static fetchRestaurantById(id, callback) {\n        //debug = true;\n        if (debug) console.log('dbhelper-fetchRestaurantById()');\n        // fetch all restaurants with proper error handling.\n        let requestURL = DBHelper.DATABASE_URL_RESTAURANTS + '/' + id;\n        if (debug) console.log('dbhelper-fetchRestaurantById()-requestURL=' + requestURL);\n\n        return fetch(requestURL, {\n            headers: { 'Content-Type': 'application/json' }\n        }).then(networkResponse => networkResponse.json()).then(restaurant => {\n            if (restaurant) {\n                // add properties\n                restaurant.restaurant_id = restaurant.id ? restaurant.id : '';\n                restaurant.lat = restaurant.latlng.lat ? restaurant.latlng.lat : '';\n                restaurant.lng = restaurant.latlng.lng ? restaurant.latlng.lng : '';\n                restaurant.operating_hours = {};\n                restaurant.reviews = {};\n            }\n\n            return callback(null, restaurant);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-fetchRestaurantById()`;\n            return callback(error.message, null);\n        });\n    }\n\n    /**\n     * Fetch restaurants by a cuisine type with proper error handling.\n     */\n    static fetchRestaurantByCuisine(cuisine, callback) {\n        //console.log('dbhelper-fetchRestaurantByCuisine()');\n        // Fetch all restaurants  with proper error handling\n        return new Promise((resolve, reject) => {\n            DBHelper.getAllRestaurants((error, result) => {\n                if (error) reject(false);\n                resolve(result); // resolve to restaurant object with valid restaurant.id value\n            });\n        }).then(restaurants => {\n            // Filter restaurants to have only given cuisine type\n            const results = restaurants.filter(r => r.cuisine_type == cuisine);\n            callback(null, results);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-fetchRestaurantByCuisine()`;\n            console.log(error.message);\n            callback(error, null);\n        });\n    }\n\n    /**\n     * Fetch restaurants by a neighborhood with proper error handling.\n     */\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\n        //console.log('dbhelper-fetchRestaurantByNeighborhood()');\n\n        // Fetch all restaurants  with proper error handling\n        return new Promise((resolve, reject) => {\n            DBHelper.getAllRestaurants((error, result) => {\n                if (error) reject(false);\n                resolve(result); // resolve to restaurant object with valid restaurant.id value\n            });\n        }).then(restaurants => {\n            // Filter restaurants to have only given neighborhood type\n            const results = restaurants.filter(r => r.neighborhood == neighborhood);\n            callback(null, results);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-fetchRestaurantByNeighborhood()`;\n            console.log(error.message);\n            callback(error, null);\n        });\n    }\n\n    /**\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\n     */\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n        //console.log('dbhelper-fetchRestaurantByCuisineAndNeighborhood()');\n\n        // Fetch all restaurants  with proper error handling\n        return new Promise((resolve, reject) => {\n            DBHelper.getAllRestaurants((error, result) => {\n                if (error) reject(false);\n                resolve(result); // resolve to restaurant object with valid restaurant.id value\n            });\n        }).then(restaurants => {\n            // Filter restaurants to have only given cuisine type or neighborhood type\n            let results = restaurants;\n\n            if (cuisine != 'all') {\n                // filter by cuisine\n                results = results.filter(r => r.cuisine_type == cuisine);\n            }\n            if (neighborhood != 'all') {\n                // filter by neighborhood\n                results = results.filter(r => r.neighborhood == neighborhood);\n            }\n            callback(null, results);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-fetchRestaurantByCuisineAndNeighborhood()`;\n            console.log(error.message);\n            callback(error, null);\n        });\n    }\n\n    /**\n     * Fetch all neighborhoods with proper error handling.\n     */\n    static fetchNeighborhoods(callback) {\n        //console.log('dbhelper-fetchNeighborhoods()');\n\n        // Fetch all restaurants  with proper error handling\n        return new Promise((resolve, reject) => {\n            DBHelper.getAllRestaurants((error, result) => {\n                if (error) reject(false);\n                resolve(result); // resolve to restaurant object with valid restaurant.id value\n            });\n        }).then(restaurants => {\n            // Get all neighborhoods from all restaurants\n            const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\n            // Remove duplicates from neighborhoods\n            const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\n            callback(null, uniqueNeighborhoods);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-fetchNeighborhoods()`;\n            console.log(error.message);\n            callback(error, null);\n        });\n    }\n\n    /**\n     * Fetch all cuisines with proper error handling.\n     */\n    static fetchCuisines(callback) {\n        //console.log('dbhelper-fetchCuisines()');\n\n        // Fetch all restaurants  with proper error handling\n        return new Promise((resolve, reject) => {\n            DBHelper.getAllRestaurants((error, result) => {\n                if (error) reject(false);\n                resolve(result); // resolve to restaurant object with valid restaurant.id value\n            });\n        }).then(restaurants => {\n            // Get all cuisines from all restaurants\n            const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\n            // Remove duplicates from cuisines\n            const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\n            callback(null, uniqueCuisines);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-fetchCuisines()`;\n            console.log(error.message);\n            callback(error, null);\n        });\n    }\n\n    /**\n     * Restaurant page URL.\n     */\n    static urlForRestaurant(restaurant) {\n        //console.log('dbhelper-urlForRestaurant()-restaurant.id=' + (restaurant.id));\n        return `./restaurant.html?id=${restaurant.id}`;\n    }\n\n    /**\n     * Restaurant image URL.\n     */\n    static imageUrlForRestaurant(restaurant) {\n        //console.log('dbhelper-imageUrlForRestaurant()');\n        if (restaurant.photograph) {\n            return `img/${restaurant.photograph}.jpg`;\n        }\n    }\n\n    /**\n     * Map marker for a restaurant.\n     */\n    static mapMarkerForRestaurant(restaurant, map) {\n        //console.log('dbhelper-mapMarkerForRestaurant()');\n        const marker = new google.maps.Marker({\n            position: restaurant.latlng,\n            title: restaurant.name,\n            url: DBHelper.urlForRestaurant(restaurant),\n            map: map,\n            animation: google.maps.Animation.DROP\n        });\n        return marker;\n    }\n\n    /**\n     * get all Db .\n     */\n    static isIndexDbPopulated() {\n        if (debug) console.log('dbhelper-isIndexDbPopulated()');\n\n        return dbPromise.then(db => {\n            const txRestaurants = db.transaction('restaurants', 'readonly');\n            const restaurantsStore = txRestaurants.objectStore('restaurants');\n            return restaurantsStore.getKey(1);\n        }).then(restaurants => {\n            return typeof restaurants !== 'undefined' && restaurants;\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-isIndexDbPopulated()`;\n            console.log(error.message);\n            return false;\n        });\n    }\n\n    /**\n     * get all Db .\n     */\n    static getAllIndexDbRestaurants(callback) {\n        //debug = true;\n        if (debug) console.log('dbhelper-getAllIndexDbRestaurants()');\n\n        dbPromise.then(db => {\n            const txRestaurants = db.transaction('restaurants', 'readonly');\n            const restaurantsStore = txRestaurants.objectStore('restaurants');\n            const restaurants = restaurantsStore.getAllKeys();\n            if (restaurants) {\n                return new Promise((resolve, reject) => {\n                    return restaurants.map(restaurant => {\n                        DBHelper.getIndexDbRestaurantById(restaurant.restaurant_id, (error, result) => {\n                            if (error) resolve(false);\n                            resolve(result);\n                        });\n                    });\n                }).then(restaurants => {\n                    if (!restaurants.id) restaurants.id = restaurants.restaurant_id;\n                    return callback(null, restaurants);\n                });\n            } else return callback('No results', null);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-getAllIndexDbRestaurants()`;\n            console.log(error.message);\n            callback(error, null);\n        });\n    }\n\n    /**\n     * Fetch review by ID.\n     */\n    static getIndexDbRestaurantById(restaurant_id, callback) {\n        // debug = true;\n        if (debug) console.log('dbhelper-getIndexDbRestaurantById()-input-restaurant_id=' + restaurant_id);\n\n        let error = {};\n        if (!restaurant_id) {\n            error.message = `Missing restaurant id - dbhelper-getIndexDbRestaurantById()`;\n            return callback(error, null);\n        }\n\n        let restaurant = {};\n\n        return dbPromise.then(db => {\n            const txRestaurants = db.transaction('restaurants', 'readonly');\n\n            let restaurantsStore = txRestaurants.objectStore('restaurants');\n\n            const restaurantRow = restaurantsStore.get(restaurant_id);\n\n            if (!restaurant) return false;\n\n            return restaurantRow;\n        }).then((db, restaurantRow, restaurant) => {\n\n            if (debug) console.log('dbhelper-getIndexDbRestaurantById()- typeof restaurantRow=' + typeof restaurantRow);\n            if (debug) console.log('dbhelper-getIndexDbRestaurantById()- restaurantRow=' + restaurantRow);\n            if (!restaurantRow) {\n                error.message = `No restaurant id match in idb`;\n                return callback(error, null);\n            }\n\n            if (debug) console.log('dbhelper-getIndexDbRestaurantById()-restaurantRow=' + restaurantRow);\n            if (debug) console.log('dbhelper-getIndexDbRestaurantById()-restaurantRow.restaurant_id=' + restaurantRow.restaurant_id);\n\n            // set default properites\n            restaurant.restaurant_id = restaurantRow.restaurant_id;\n            restaurant.name = restaurantRow.name;\n            restaurant.address = restaurantRow.address;\n            restaurant.photograph = restaurantRow.photograph;\n            restaurant.neighborhood = restaurantRow.neighborhood;\n            restaurant.cuisine_type = restaurantRow.cuisine_type;\n            restaurant.is_favorite = restaurantRow.is_favorite;\n            restaurant.lat = restaurantRow.lat;\n            restaurant.lng = restaurantRow.lng;\n            restaurant.createdAt = restaurantRow.createdAt;\n            restaurant.updatedAt = restaurantRow.updatedAt;\n            // add properties\n            restaurant.id = restaurantRow.restaurant_id;\n            restaurant.latlng = {};\n            restaurant.latlng.lat = restaurantRow.lat;\n            restaurant.latlng.lng = restaurantRow.lng;\n            restaurant.operating_hours = {};\n            restaurant.reviews = {};\n\n            return restaurant;\n        }).then(restaurant => {\n            return callback(null, restaurant);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-getIndexDbRestaurantById()`;\n            console.log(error.message);\n            callback(error, null);\n        });\n    }\n\n    static v1AddRestaurantsData(db) {\n        if (debug) console.log('v1AddRestaurantsData()');\n\n        return fetch(DBHelper.DATABASE_URL_RESTAURANTS).then(response => response.json()).then(function (neighborhoods) {\n            if (debug) console.log('v1AddRestaurantsData()-neighborhoods=' + neighborhoods);\n\n            neighborhoods.forEach(restaurant => {\n\n                // add to database\n                if (debug) console.log('v1AddRestaurantsData()-neighborhoods-each-restaurant=' + restaurant);\n                const txRestaurants = db.transaction('restaurants', 'readwrite');\n                let restaurantsStore = txRestaurants.objectStore('restaurants');\n\n                restaurantsStore.get(restaurant.id).then(function (item) {\n\n                    if (debug) console.log('v1AddRestaurantsData()-neighborhoods-each-restaurant-get');\n                    if (item) return true;\n\n                    //https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore\n                    const rtNewItem = [{\n                        restaurant_id: restaurant.id,\n                        name: restaurant.name,\n                        neighborhood: restaurant.neighborhood,\n                        photograph: restaurant.photograph,\n                        address: restaurant.address,\n                        lat: restaurant.latlng.lat,\n                        lng: restaurant.latlng.lng,\n                        cuisine_type: restaurant.cuisine_type,\n                        is_favorite: restaurant.is_favorite,\n                        createdAt: restaurant.createdAt,\n                        updatedAt: restaurant.updatedAt\n                    }];\n                    restaurantsStore.add(rtNewItem[0]);\n                    txRestaurants.complete;\n                    if (debug) console.log('v1AddRestaurantsData()-neighborhoods-each-restaurant-tx-complete');\n\n                    if (debug) console.log('v1AddRestaurantsData()-neighborhoods-each-restaurant-operating_hours-start');\n                    let operating_hours = restaurant.operating_hours;\n\n                    const txOperatingHours = db.transaction('operating_hours', 'readwrite');\n                    let operatingHoursStore = txOperatingHours.objectStore('operating_hours');\n                    for (const indx in operating_hours) {\n                        if (debug) console.log('v1AddRestaurantsData()-neighborhoods-each-restaurant-operating_hours-indx=' + indx);\n                        if (debug) console.log('v1AddRestaurantsData()-neighborhoods-each-restaurant-operating_hours-value[indx]=' + operating_hours[indx]);\n                        operatingHoursStore.add({\n                            restaurant_id: restaurant.id,\n                            day: indx,\n                            hours: operating_hours[indx],\n                            createdAt: restaurant.createdAt,\n                            updatedAt: restaurant.updatedAt\n                        });\n                    }\n                    txOperatingHours.complete;\n                    if (debug) console.log('v1AddRestaurantsData()-neighborhoods-each-restaurant-operating_hours-tx-complete');\n                });\n            });\n\n            return db;\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-v1AddRestaurantsData`;\n            console.log(error.message);\n            return db;\n        });\n    }\n\n    static v1AddReviewsData(db) {\n        if (debug) console.log('v1AddReviewsData()');\n\n        const requestUrl = DBHelper.DATABASE_URL_REVIEWS;\n        if (debug) console.log('v1AddReviewsData()-requestUrl=' + requestUrl);\n\n        return fetch(requestUrl).then(response => response.json()).then(function (reviews) {\n\n            if (debug) console.log('v1AddReviewsData()-reviews=' + reviews);\n\n            if (debug) console.log('v1AddReviewsData()-reviews-start');\n            const txReviews = db.transaction('reviews', 'readwrite');\n            let reviewsStore = txReviews.objectStore('reviews');\n\n            for (const rkey in reviews) {\n                if (debug) console.log('rkey=' + rkey);\n                if (debug) console.log('review[rkey]=' + reviews[rkey]);\n                if (debug) console.log('reviews[rkey].id=' + reviews[rkey].id);\n                if (debug) console.log('reviews[rkey].restaurant_id=' + reviews[rkey].restaurant_id);\n                if (debug) console.log('reviews[rkey].name=' + reviews[rkey].name);\n                if (debug) console.log('reviews[rkey].createdAt=' + reviews[rkey].createdAt);\n                if (debug) console.log('reviews[rkey].rating=' + reviews[rkey].rating);\n                if (debug) console.log('reviews[rkey].comments=' + reviews[rkey].comments);\n                reviewsStore.add({\n                    review_id: reviews[rkey].id,\n                    restaurant_id: reviews[rkey].restaurant_id,\n                    name: reviews[rkey].name,\n                    rating: reviews[rkey].rating,\n                    comments: reviews[rkey].comments,\n                    createdAt: reviews[rkey].createdAt,\n                    updatedAt: reviews[rkey].updatedAt\n                });\n            }\n            txReviews.complete;\n            if (debug) console.log('v1AddReviewsData()-reviews-complete');\n\n            return true;\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed v1AddReviewsData. Returned status of ${error.message}`;\n            console.log(error.message);\n            return false;\n        });\n    }\n\n    /**\n     * update a restaurant by its ID.\n     */\n    static addUpdateRestaurantById(restaurant, callback) {\n        if (debug) console.log('-----------------------------------');\n        if (debug) console.log('dbhelper-addUpdateRestaurantById()');\n\n        if (debug && restaurant) {\n            for (const indx in restaurant) {\n                if (debug) console.log('restaurant[' + indx + ']=' + restaurant[indx]);\n            }\n        }\n\n        let local_error = null;\n        let cache_error = null;\n        let remote_error = null;\n\n        dbPromise.then(() => {\n            DBHelper.addUpdateLocalRestaurantById(restaurant, (error, result) => {\n                local_error = error;\n            });\n        }).then(() => {\n            DBHelper.addUpdateCacheRestaurantById(restaurant, (error, result) => {\n                cache_error = error;\n            });\n        }).then(() => {\n            DBHelper.addUpdateRemoteRestaurantById(restaurant, (error, result) => {\n                remote_error = error;\n            });\n        }).then(() => {\n            if (debug) console.log('local_error=' + local_error);\n            if (debug) console.log('cache_error=' + cache_error);\n            if (debug) console.log('remote_error=' + remote_error);\n\n            if (local_error || cache_error || remote_error) {\n\n                if (debug) console.log('error');\n                return callback(local_error || cache_error || remote_error, null);\n            }\n            return callback(null, restaurant);\n        });\n    }\n\n    /**\n     * update a restaurant by its ID.\n     */\n    static addUpdateLocalRestaurantById(restaurant, callback) {\n        if (debug) console.log('-----------------------------------');\n        if (debug) console.log('dbhelper-addUpdateLocalRestaurantById()');\n\n        return dbPromise.then(db => {\n            if (debug) console.log('restaurant-restaurant-start');\n            const txRestaurants = db.transaction('restaurants', 'readwrite');\n            let restaurantsStore = txRestaurants.objectStore('restaurants');\n\n            return restaurantsStore.get(restaurant.restaurant_id).then(item => {\n                let restaurantObj = {\n                    restaurant_id: restaurant.restaurant_id,\n                    name: restaurant.name,\n                    neighborhood: restaurant.neighborhood,\n                    photograph: restaurant.photograph,\n                    address: restaurant.address,\n                    lat: restaurant.latlng.lat,\n                    lng: restaurant.latlng.lng,\n                    cuisine_type: restaurant.cuisine_type,\n                    is_favorite: restaurant.is_favorite,\n                    createdAt: restaurant.createdAt,\n                    updatedAt: restaurant.updatedAt\n                };\n                if (!item) {\n                    restaurantsStore.add(restaurantObj);\n                } else {\n                    restaurantsStore.put(restaurantObj);\n                }\n                txRestaurants.complete;\n            }).then(() => {\n                return callback(null, true);\n            });\n        }).catch(error => {\n            return callback('Error', null);\n        });\n    }\n\n    /**\n     * update a restaurant by its ID.\n     */\n    static addUpdateCacheRestaurantById(restaurant_id, callback) {\n        if (debug) console.log('dbhelper-addUpdateCacheRestaurantById()');\n        if (debug) console.log('dbhelper-addUpdateCacheRestaurantById()-restaurant_id=' + restaurant_id);\n\n        if (debug) console.log('Update cache by deleting and then adding cache');\n        return caches.open(staticCacheName).then(function (cache) {\n            if (debug) console.log('Deleting index file cache');\n            return cache.delete(new Request('/')).delete(new Request('/restaurant.html?id=' + restaurant_id));\n        }).then(function () {\n            if (debug) console.log('Adding index file cache');\n            return fetch(new Request('/')).then(function () {\n                return fetch(new Request('/restaurant.html?id=' + restaurant_id));\n            });\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message}`;\n            callback(error, null);\n        });\n    }\n\n    /**\n     * update a restaurant by its ID.\n     */\n    static addUpdateRemoteRestaurantById(restaurant, callback) {\n\n        if (debug) console.log('-----------------------------------');\n        if (debug) console.log('dbhelper-addUpdateRemoteRestaurantById()');\n\n        let requestURL = DBHelper.DATABASE_URL_RESTAURANTS + '/' + restaurant.restaurant_id;\n        if (debug) console.log('requestURL=' + requestURL);\n\n        const requestMethod = 'PUT';\n        const requestBody = JSON.stringify(restaurant);\n        const requestHeaders = {\n            'Content-Type': 'application/json'\n        };\n\n        return fetch(requestURL, {\n            method: requestMethod, body: requestBody, headers: requestHeaders\n        }).catch(error => {\n\n            if (!navigator.onLine) {\n\n                return dbPromise.then(function (db) {\n\n                    if (debug) console.log('restaurant-pending-start');\n                    const txPending = db.transaction('pending', 'readwrite');\n                    let pendingStore = txPending.objectStore('pending');\n\n                    const pending = {\n                        id: Date.now(),\n                        url: requestURL,\n                        method: requestMethod,\n                        body: requestBody,\n                        headers: requestHeaders\n                    };\n                    pendingStore.put(pending);\n                    txPending.complete;\n                    return true;\n                }).then(result => {\n                    callback(null, result);\n                });\n            } else {\n\n                // Oops!. Got an error from server.\n                error.message = `Request failed. Returned status of ${error.message}`;\n                callback(error, null);\n            }\n        });\n    }\n\n    /**\n     * Fetch all reviews.\n     */\n    static fetchReviewsByRestaurantId(restaurant_id, callback) {\n        //debug = true;\n        if (debug) console.log('dbhelper-fetchReviewsByRestaurantId()');\n        if (debug) console.log('dbhelper-fetchReviewsByRestaurantId()-restaurant_id=' + restaurant_id);\n\n        if (debug) console.log('call-fetch');\n\n        const review_url = DBHelper.DATABASE_URL_REVIEWS + '?restaurant_id=' + restaurant_id;\n        if (debug) console.log('dbhelper-fetchReviewsByRestaurantId()-review_url=' + review_url);\n\n        return fetch(review_url).then(response => response.json()).then(reviews => {\n            if (debug) console.log('dbhelper-fetchReviewsByRestaurantId()-reviews=' + reviews);\n            return reviews.map(review => {\n                // add or update review in cache\n                if (debug) console.log('calling-DBHelper.addUpdateLocalReviewById()');\n                DBHelper.addUpdateLocalReviewById(review, (error, result) => {\n                    if (debug) console.log('error=' + error);\n                    if (debug) console.log('result=' + result);\n                });\n\n                if (debug) console.log('calling-DBHelper.addUpdateCacheReviewById()');\n                DBHelper.addUpdateCacheReviewById(review, (error, result) => {\n                    if (debug) console.log('error=' + error);\n                    if (debug) console.log('result=' + result);\n                });\n\n                return review;\n            });\n        }).then(reviews => {\n            if (debug) console.log('dbhelper-fetchReviewsByRestaurantId()-reviews=' + reviews);\n            callback(null, reviews);\n            return;\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-fetchReviewsByRestaurantId()`;\n            console.log(error.message);\n            callback(error, null);\n        });\n    }\n\n    /**\n     * get all restaurants.\n     */\n    static getAllRestaurants(callback) {\n        //debug = true;\n        if (debug) console.log('dbhelper-getAllRestaurants()');\n\n        //return dbPromise\n        //.then(() => {\n        if (debug) console.log('dbhelper-getAllRestaurants() - 1 - this.restaurants =' + this.restaurants);\n        return new Promise((resolve, reject) => {\n            if (!this.restaurants) {\n                DBHelper.getAllIndexDbRestaurants((error, result) => {\n                    if (error) resolve(false);\n                    resolve(result);\n                });\n            } else resolve(this.restaurants);\n        }).then(restaurants => {\n            if (debug) console.log('dbhelper-getAllRestaurants() - 1 - getAllIndexDbRestaurants()-restaurants =' + restaurants);\n            if (restaurants.length > 0) this.restaurants = restaurants;\n            return restaurants;\n        }) //;\n        //})\n        .then(() => {\n            if (debug) console.log('dbhelper-getAllRestaurants() - 2 - this.restaurants =' + this.restaurants);\n            if (!this.restaurants) {\n                return new Promise((resolve, reject) => {\n                    DBHelper.fetchRestaurants((error, result) => {\n                        if (error) reject(false);\n                        if (debug) console.log('dbhelper-getAllRestaurants() - 2 - fetchRestaurants()-result =' + result);\n                        resolve(result);\n                    });\n                }).then(restaurants => {\n                    if (debug) console.log('dbhelper-getAllRestaurants() - 2 - restaurants =' + restaurants);\n                    if (restaurants.length > 0) this.restaurants = restaurants;\n                    return true;\n                });\n            } else this.restaurants;\n        }).then(() => {\n            if (debug) console.log('dbhelper-getAllRestaurants() - 3-1 - this.restaurants =' + this.restaurants);\n            return new Promise((resolve, reject) => {\n                if (this.restaurants) {\n                    let restaurants = this.restaurants;\n                    restaurants.map(restaurant => {\n                        restaurant.restaurant_id = restaurant.restaurant_id ? restaurant.restaurant_id : restaurant.id;\n                        if (debug) console.log('dbhelper-getAllRestaurants() - 3-2 - restaurant.restaurant_id =' + restaurant.restaurant_id);\n                        return new Promise((resolve, reject) => {\n                            DBHelper.getRestaurantReviewsOperatingHours(restaurant, (error, result) => {\n                                if (debug) console.log('dbhelper-getAllRestaurants() - 3-2 - getRestaurantReviewsOperatingHours()-error =' + error);\n                                if (error) resolve(restaurant);\n                                if (debug) console.log('dbhelper-getAllRestaurants() - 3-2 - getRestaurantReviewsOperatingHours()-result =' + result);\n                                resolve(result);\n                            });\n                        }).then(result => {\n                            if (result) {\n                                restaurant.reviews = result.reviews;\n                                restaurant.operating_hours = result.operating_hours;\n                            }\n                            if (debug) console.log('dbhelper-getAllRestaurants() - 3-3 - restaurant =' + restaurant);\n                            return restaurant;\n                        });\n                    });\n                    if (debug) console.log('dbhelper-getAllRestaurants() - 3-4 - restaurants =' + restaurants);\n                    resolve(restaurants);\n                } else resolve(this.restaurants);\n            }).catch(error => {\n                // Oops!. Got an error from server.\n                const error_message = `Request failed. Returned status of ${error.message} - dbhelper-getAllRestaurants`;\n                if (debug) console.log(error_message);\n                return restaurant;\n            });\n        }).then(() => {\n            if (debug) console.log('dbhelper-getAllRestaurants() - 4 - this.restaurants =' + this.restaurants);\n            if (this.restaurants) return callback(null, this.restaurants);\n            if (!this.restaurants) return callback('No data', null);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-getAllRestaurants`;\n            return callback(error.message, null);\n        });\n    }\n\n    /**\n     * get restaurant by ID.\n     */\n    static getRestaurantById(restaurant_id, callback) {\n        //debug = true;\n        if (debug) console.log('dbhelper-getRestaurantById()');\n        if (debug) console.log('dbhelper-getRestaurantById()-restaurant_id=' + restaurant_id);\n\n        return new Promise((resolve, reject) => {\n            if (debug) console.log('dbhelper-getRestaurantById() - 1 - this.restaurants=' + this.restaurants);\n            if (this.restaurants) {\n                restaurant = this.restaurants.filter(r => r.id == restaurant_id);\n                if (debug) console.log('dbhelper-getRestaurantById() - 1 - restaurant=' + restaurant);\n            }\n            if (!restaurant) {\n                if (debug) console.log('dbhelper-getRestaurantById() - 1 - getIndexDbRestaurantById() call');\n                DBHelper.getIndexDbRestaurantById(restaurant_id, (error, result) => {\n                    if (debug) console.log('dbhelper-getRestaurantById() - 1 - getIndexDbRestaurantById()-error=' + error);\n                    if (error) resolve(false);\n                    if (debug) console.log('dbhelper-getRestaurantById() - 1 - getIndexDbRestaurantById()-result=' + result);\n                    resolve(result);\n                });\n            } else resolve(restaurant);\n        }).then(restaurant => {\n            if (debug) console.log('dbhelper-getRestaurantById() - 2 - restaurant =' + typeof restaurant);\n            if (debug) console.log('dbhelper-getRestaurantById() - 2 - restaurant =' + restaurant);\n            if (!restaurant) {\n                if (debug) console.log('dbhelper-getRestaurantById() - 2 - new Promise()');\n                return new Promise((resolve, reject) => {\n                    DBHelper.fetchRestaurantById(restaurant_id, (error, result) => {\n                        if (error) reject(error);\n                        resolve(result);\n                    });\n                }).then(restaurant => {\n                    if (debug) console.log('dbhelper-getRestaurantById() - 2.then() - restaurant.restaurant_id=' + restaurant.restaurant_id);\n\n                    // DBHelper.addUpdateLocalRestaurantById(restaurant, (error, result) => {\n                    //     // both return restaurant\n                    //     // (error) reject(restaurant);\n                    //     //resolve(restaurant);\n                    // });\n\n                    DBHelper.addUpdateCacheRestaurantById(restaurant, (error, result) => {\n                        // both return restaurant\n                        //if (error) reject(restaurant);\n                        //resolve(restaurant);\n                    });\n\n                    return restaurant;\n                }).catch(error => {\n                    // Oops!. Got an error from server.\n                    error.message = `Request failed. Returned status of ${error.message} - dbhelper-getRestaurantById()-fetchRestaurantById()`;\n                    callback(error.message, null);\n                    return;\n                });\n            } else return restaurant;\n        }).then(restaurant => {\n            if (debug) console.log('dbhelper-getRestaurantById() - 3 - restaurant =' + typeof restaurant);\n            if (debug) console.log('dbhelper-getRestaurantById() - 3 - restaurant =' + restaurant);\n            if (debug) console.log('dbhelper-getRestaurantById() - 3 - restaurant.id=' + restaurant.restaurant_id);\n\n            return new Promise((resolve, reject) => {\n                DBHelper.getRestaurantReviewsOperatingHours(restaurant, (error, result) => {\n                    if (error) resolve(restaurant);\n                    if (debug) console.log('dbhelper-getRestaurantById() - 3 - getRestaurantReviewsOperatingHours()-result =' + result);\n                    resolve(result);\n                });\n            });\n        }).then((restaurant, result) => {\n            if (debug) console.log('dbhelper-getRestaurantById() - 3 - .then()-result =' + result);\n            if (result) {\n                if (debug) console.log('dbhelper-getRestaurantById() - 3 - .then()-result.id =' + result.id);\n                if (debug) console.log('dbhelper-getRestaurantById() - 3 - .then()-result.reviews =' + result.reviews);\n                result.reviews.map(review => {\n                    if (debug) console.log('dbhelper-getRestaurantById() - 3 - .then()-result.review_id=' + review.review_id);\n                });\n                restaurant.reviews = result.reviews;\n                restaurant.operating_hours = result.operating_hours;\n            }\n            if (debug) console.log('dbhelper-getRestaurantById() - 3 - .then()-restaurant =' + restaurant);\n            if (debug) console.log('dbhelper-getRestaurantById() - 3 - .then()-restaurant.id=' + restaurant.id);\n            if (debug) console.log('dbhelper-getRestaurantById() - 3 - .then()-restaurant.reviews=' + restaurant.reviews);\n            restaurant.reviews.map(review => {\n                if (debug) console.log('dbhelper-getRestaurantById() - 3 - .then()-restaurant.review_id=' + review.review_id);\n            });\n            return restaurant;\n        }).then(restaurant => {\n            if (debug) console.log('dbhelper-getRestaurantById() - 4 - .then()-restaurant =' + restaurant);\n            if (debug) console.log('dbhelper-getRestaurantById() - 4 - .then()-restaurant.id=' + restaurant.id);\n            if (debug) console.log('dbhelper-getRestaurantById() - 4 - .then()-restaurant.reviews=' + restaurant.reviews);\n            return callback(null, restaurant);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-getRestaurantById()`;\n            callback(error.message, null);\n            return;\n        });\n    }\n\n    static getRestaurantReviewsOperatingHours(restaurant, callback) {\n        //debug = true;\n        if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()');\n        if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-input-restaurant=' + restaurant);\n\n        const restaurant_id = restaurant.id ? restaurant.id : restaurant.restaurant_id ? restaurant.restaurant_id : '';\n        if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-restaurant_id=' + restaurant_id);\n\n        if (!restaurant_id) callback('Missing restaurant id', null);\n\n        return new Promise((resolve, reject) => {\n            if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-.then(first)-getIndexDbOperatingHoursByRestaurantId()-call');\n            DBHelper.getIndexDbOperatingHoursByRestaurantId(restaurant_id, (error, result) => {\n                if (error) resolve(restaurant);\n                resolve(result);\n            });\n        }).then((restaurant, operating_hours) => {\n            if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-.then(second)-restaurant=' + restaurant);\n            if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-.then(second)-operating_hours=' + operating_hours);\n\n            if (!restaurant) return callback('no restaurant data', null);\n\n            return new Promise((resolve, reject) => {\n                // add missing properties\n                if (!restaurant.id) restaurant.id = restaurant.restaurant_id;\n                if (!restaurant.restaurant_id) restaurant.restaurant_id = restaurant.id;\n                if (!restaurant.latlng) restaurant.latlng = {};\n                if (!restaurant.latlng.lat) restaurant.latlng.lat = restaurant.lat ? restaurant.lat : '';\n                if (!restaurant.latlng.lng) restaurant.latlng.lng = restaurant.lng ? restaurant.lng : '';\n                if (!restaurant.operating_hours) restaurant.operating_hours = {};\n                if (!restaurant.reviews) restaurant.reviews = {};\n\n                if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-.then(second)-restaurant.operating_hours=' + restaurant.operating_hours);\n\n                if (restaurant.operating_hours) {\n                    if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-.then(second)-restaurant.operating_hours.hasOwnProperty(day)=' + restaurant.operating_hours.hasOwnProperty('day'));\n                    if (restaurant.operating_hours.hasOwnProperty('day')) {\n                        restaurant.operating_hours.map(operating_hour => {\n                            if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-.then(second)-operating_hour=' + operating_hour.day);\n                        });\n                    }\n                }\n\n                if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-.then(second)-operating_hours=' + operating_hours);\n                if (operating_hours) {\n                    if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-.then(second)-operating_hours.operating_hours.hasOwnProperty(day)=' + operating_hours.hasOwnProperty('day'));\n                    if (operating_hours.hasOwnProperty('day')) {\n                        operating_hours.map(operating_hour => {\n                            if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-.then(second)-operating_hour=' + operating_hour.day);\n                        });\n                        restaurant.operating_hours = operating_hours;\n                    }\n                }\n\n                // confirm property\n                if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-.then(second)-restaurant.operating_hours=' + restaurant.operating_hours);\n\n                resolve(restaurant);\n            }).then(restaurant => {\n                return new Promise((resolve, reject) => {\n                    if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-.then(third)-getReviewsByRestaurantId()-call');\n                    DBHelper.getReviewsByRestaurantId(restaurant_id, (error, result) => {\n                        if (error) resolve({});\n                        resolve(result);\n                    });\n                }).then(reviews => {\n                    reviews.map(review => {\n                        if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-.then(fourth)-getReviewsByRestaurantId()-review.review_id=' + review.review_id);\n                    });\n                    restaurant.reviews = reviews;\n                    return restaurant;\n                });\n            }).then(restaurant => {\n                if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-.then(fifth)-restaurant.id=' + restaurant.id);\n                if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-.then(fifth)-restaurant.restaurant_id=' + restaurant.restaurant_id);\n                if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-.then(fifth)-restaurant.reviews=' + restaurant.reviews);\n                restaurant.reviews.map(review => {\n                    if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-.then(fifth)-review.review_id=' + review.review_id);\n                });\n                if (debug) console.log('dbhelper-getRestaurantReviewsOperatingHours()-.then(fifth)-restaurant.operating_hours=' + restaurant.operating_hours);\n                callback(null, restaurant);\n                return;\n            });\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            const error_message = `Request failed. Returned status of ${error.message} - dbhelper-getRestaurantReviewsOperatingHours()`;\n            callback(error_message, null);\n            return;\n        });\n    }\n\n    /**\n     * get all reviews.\n     */\n    static getAllReviews(callback) {\n        if (debug) console.log('dbhelper-getAllReviews()');\n\n        let reviews = this.reviews;\n\n        return dbPromise.then(() => {\n            reviews = this.reviews;\n            if (debug) console.log('dbhelper-getAllReviews()- is reviews array empty - second - results =' + reviews);\n            if (!reviews) {\n                return DBHelper.getAllIndexDbReviews((error, results) => {\n                    if (error) callback(error.message, null);\n                    if (debug) console.log('dbhelper-getAllReviews()- is reviews array empty - second-sub1 - results =' + results);\n                    if (results) this.reviews = results;\n                    return true;\n                });\n            } else return true;\n        }).then(() => {\n            reviews = this.reviews;\n            if (!reviews) {\n                return DBHelper.fetchAllReviews((error, results) => {\n                    if (error) return callback(error.message, null);\n                    if (debug) console.log('dbhelper-getAllReviews()- is reviews array empty - third-sub1 - results =' + results);\n                    if (results) this.reviews = results;\n                    return true;\n                });\n            } else return true;\n        }).then(() => {\n            reviews = this.reviews;\n            if (debug) console.log('dbhelper-getAllReviews()- is reviews array empty - fourth - results =' + reviews);\n\n            callback(null, this.reviews);\n            return;\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message}`;\n            callback(error.message, null);\n            return;\n        });\n    }\n\n    /**\n     * Fetch review by ID.\n     */\n    static getReviewsByRestaurantId(restaurant_id, callback) {\n        //debug = true;\n        if (debug) console.log('dbhelper-getReviewsByRestaurantId()');\n        if (debug) console.log('restaurant_id=' + restaurant_id);\n\n        return new Promise((resolve, reject) => {\n            if (!this.reviews) {\n                DBHelper.getAllReviews((error, result) => {\n                    if (error) resolve({});\n                    resolve(result);\n                });\n            } else resolve(this.reviews);\n        }).then(reviews => {\n            if (!reviews) callback('No reviews for this restaurant', null);\n\n            this.reviews = reviews;\n            return reviews;\n        }).then(reviews => {\n            const restaurant_reviews = reviews.filter(r => r.restaurant_id == restaurant_id);\n            restaurant_reviews.map(review => {\n                if (debug) console.log('dbhelper-getReviewsByRestaurantId()-review.review_id=' + review.review_id);\n            });\n            return callback(null, restaurant_reviews);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-getReviewsByRestaurantId()`;\n            return callback(error.message, null);\n        });\n    }\n\n    /**\n     * get review by ID.\n     */\n    static getReviewById(restaurant_id, review_id, callback) {\n\n        if (debug) console.log('-----------------------------------');\n        if (debug) console.log('dbhelper-getReviewById()');\n        if (debug) console.log('restaurant_id=' + restaurant_id);\n        if (debug) console.log('review_id=' + review_id);\n\n        if (!this.reviews) {\n            return DBHelper.getAllReviews((error, restaurant_reviews) => {\n                this.reviews = restaurant_reviews;\n                return true;\n            });\n        }\n\n        // if reviews array exists then use that to filter out restaurant specific reviews\n        if (debug) console.log('this.reviews=' + this.reviews);\n\n        return this.reviews.then(reviews => {\n            const review = reviews.filter(r => r.id == review_id);\n            return callback(null, review);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed-2. Returned status of ${error.message}`;\n            return callback(error.message, null);\n        });\n    }\n\n    static getAllIndexDbOperatingHours(callback) {\n        if (debug) console.log('dbhelper-getAllIndexDbOperatingHours()');\n        dbPromise.then(db => {\n            const txOperatingHours = db.transaction('operating_hours', 'readonly');\n            const operatingHoursStore = txOperatingHours.objectStore('operating_hours');\n            const allOperatingHours = operatingHoursStore.getAll();\n            return callback(null, allOperatingHours);\n        });\n    }\n\n    static getIndexDbOperatingHoursByRestaurantId(restaurant_id, callback) {\n        if (debug) console.log('dbhelper-getIndexDbOperatingHoursByRestaurantId()');\n        dbPromise.then(db => {\n            const txOperatingHours = db.transaction('operating_hours', 'readonly');\n            const operatingHoursStore = txOperatingHours.objectStore('operating_hours');\n            const allOperatingHours = operatingHoursStore.get(restaurant_id);\n            return callback(null, allOperatingHours);\n        });\n    }\n\n    /**\n     * get db all reviews.\n     */\n    static getAllIndexDbReviews(callback) {\n\n        if (debug) console.log('dbhelper-getAllIndexDbReviews()');\n\n        dbPromise.then(function (db) {\n            const txReviews = db.transaction('reviews', 'readonly');\n            let reviewsStore = txReviews.objectStore('reviews');\n            const reviews = reviewsStore.getAll();\n            callback(null, reviews);\n        });\n    }\n\n    /**\n     * Fetch all reviews\n     */\n    static fetchAllReviews(callback) {\n        if (debug) console.log('-----------------------------------');\n        if (debug) console.log('dbhelper-fetchAllReviews()');\n        // fetch all review with proper error handling.\n\n        let requestURL = DBHelper.DATABASE_URL_REVIEWS;\n        if (debug) console.log('requestURL=' + requestURL);\n\n        return fetch(requestURL).then(response => {\n            const reviews = response.json();\n\n            if (reviews) {\n                reviews.map(review => {\n                    // add or update review in cache\n                    if (debug) console.log('calling-DBHelper.addUpdateLocalReviewById()');\n                    DBHelper.addUpdateLocalReviewById(review, (error, result) => {\n                        if (debug) console.log('error=' + error);\n                        if (debug) console.log('result=' + result);\n                    });\n\n                    if (debug) console.log('calling-DBHelper.addUpdateCacheReviewById()');\n                    DBHelper.addUpdateCacheReviewById(review, (error, result) => {\n                        if (debug) console.log('error=' + error);\n                        if (debug) console.log('result=' + result);\n                    });\n                });\n            }\n            callback(null, reviews);\n            return;\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed-1. Returned status of ${error.message}`;\n            callback(error.message, null);\n            return;\n        });\n    }\n\n    /**\n     * Fetch a reviews by its restaurant ID.\n     */\n    static fetchReviewById(review_id, callback) {\n        if (debug) console.log('-----------------------------------');\n        if (debug) console.log('dbhelper-fetchReviewById()');\n        if (debug) console.log('review_id=' + review_id);\n        // fetch all review with proper error handling.\n\n        if (debug) console.log('call-fetch');\n\n        let requestURL = DBHelper.DATABASE_URL_REVIEWS + '/' + review_id;\n        if (debug) console.log('requestURL=' + requestURL);\n\n        return fetch(requestURL).then(response => {\n            const review = response.json();\n\n            if (review) {\n                // add or update review in cache\n                if (debug) console.log('calling-DBHelper.addUpdateLocalReviewById()');\n                DBHelper.addUpdateLocalReviewById(review, (error, result) => {\n                    if (debug) console.log('error=' + error);\n                    if (debug) console.log('result=' + result);\n                });\n\n                if (debug) console.log('calling-DBHelper.addUpdateCacheReviewById()');\n                DBHelper.addUpdateCacheReviewById(review, (error, result) => {\n                    if (debug) console.log('error=' + error);\n                    if (debug) console.log('result=' + result);\n                });\n            }\n            callback(null, review);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed-1. Returned status of ${error.message}`;\n            return callback(error.message, null);\n        });\n    }\n\n    /**\n     * update a review by its ID.\n     */\n    static addUpdateReviewById(review, callback) {\n        if (debug) console.log('-----------------------------------');\n        if (debug) console.log('dbhelper-addUpdateReviewById()');\n\n        // if (debug && review) {\n        //     for (const indx in review) {\n        //         if (debug) console.log('review[' + indx + ']=' + (review[indx]));\n        //     }\n        // }\n\n        let local_error = null;\n        let cache_error = null;\n        let remote_error = null;\n\n        let idMax = review.review_id;\n        if (debug) console.log('calling-DBHelper.addUpdateLocalReviewById()');\n        DBHelper.addUpdateLocalReviewById(review, (error, result) => {\n            if (debug) console.log('error=' + error);\n            if (debug) console.log('result=' + result);\n            local_error = error;\n        });\n\n        if (debug) console.log('calling-DBHelper.addUpdateCacheReviewById()');\n        DBHelper.addUpdateCacheReviewById(review, (error, result) => {\n            if (debug) console.log('error=' + error);\n            if (debug) console.log('result=' + result);\n            cache_error = error;\n        });\n\n        if (debug) console.log('calling-DBHelper.addUpdateRemoteReviewById()');\n        DBHelper.addUpdateRemoteReviewById(review, (error, result) => {\n            if (debug) console.log('error=' + error);\n            if (debug) console.log('result=' + result);\n            remote_error = error;\n        });\n\n        const myPromise = new Promise((resolve, reject) => {\n            if (debug) console.log('local_error=' + local_error);\n            if (debug) console.log('cache_error=' + cache_error);\n            if (debug) console.log('remote_error=' + remote_error);\n\n            if (local_error || cache_error || remote_error) {\n\n                if (debug) console.log('error');\n                return callback(local_error || cache_error || remote_error, null);\n            }\n            return callback(null, true);\n        });\n    }\n\n    /**\n     * update a review by its ID.\n     */\n    static addUpdateLocalReviewById(review, callback) {\n        if (debug) console.log('-----------------------------------');\n        if (debug) console.log('dbhelper-addUpdateLocalReviewById()');\n\n        return dbPromise.then(function (db) {\n            if (debug) console.log('review-start');\n            const txReview = db.transaction('reviews', 'readwrite');\n            if (debug) console.log('txReview=' + txReview);\n            let reviewStore = txReview.objectStore('reviews');\n\n            const idIndex = reviewStore.index('review_id');\n            if (debug) console.log('idIndex=' + idIndex);\n\n            return idIndex.getAllKeys().then(keys => {\n                let idMax = 0;\n                keys.forEach(key => {\n                    if (debug) console.log('key=' + key);\n                    idMax = key;\n                });\n\n                // increment last key value by 1\n                idMax++;\n                if (debug) console.log('idMax++=' + idMax);\n\n                return idMax;\n            }).then(idMax => {\n                if (debug) {\n                    if (debug) console.log('idMax.then()=' + idMax);\n                    for (const key in review) {\n                        if (debug) console.log(key + '=' + review[key]);\n                    }\n                }\n                review.review_id = idMax;\n                if (debug) {\n                    if (debug) console.log('updated review.review_id' + idMax);\n                    for (const key in review) {\n                        if (debug) console.log(key + '=' + review[key]);\n                    }\n                }\n\n                return reviewStore.get(review.review_id).then((review, item) => {\n                    const rtNewItem = {\n                        review_id: parseInt(item ? item.review_id : idMax),\n                        restaurant_id: parseInt(review.restaurant_id),\n                        name: review.name,\n                        rating: parseInt(review.rating),\n                        comments: review.comments,\n                        updatedAt: review.updatedAt,\n                        createdAt: review.createdAt\n                    };\n                    if (!item) {\n                        if (debug) console.log('add review item');\n                        reviewStore.add(rtNewItem);\n                    } else {\n                        if (debug) console.log('update review item');\n                        reviewStore.put(rtNewItem);\n                    }\n                    txReview.complete;\n                    if (debug) console.log('review item added/updated');\n\n                    if (debug) console.log('tx complete - callback');\n                    return callback(null, true);\n                }).catch(error => {\n                    // Oops!. Got an error from server.\n                    error.message = `Request failed. Returned status of ${error.message}`;\n                    callback(error, null);\n                });\n            });\n        });\n    }\n\n    /**\n     * update a review by its ID.\n     */\n    static addUpdateCacheReviewById(review, callback) {\n\n        if (debug) console.log('-----------------------------------');\n        if (debug) console.log('dbhelper-addUpdateCacheReviewById()');\n\n        if (debug) console.log('Update cache by deleting and then adding cache');\n        return caches.open(staticCacheName).then(function (cache) {\n            if (debug) console.log('Deleting index file cache');\n            return cache.delete(new Request('/restaurant.html?id=' + review.restaurant_id));\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message}`;\n            callback(error, null);\n        });\n    }\n\n    /**\n     * update a review by its ID.\n     */\n    static addUpdateRemoteReviewById(review, callback) {\n        if (debug) console.log('-----------------------------------');\n        if (debug) console.log('dbhelper-addUpdateRemoteReviewById()');\n\n        // if (debug && review) {\n        //     for (const indx in review) {\n        //         if (debug) console.log('review[' + indx + ']=' + (review[indx]));\n        //     }\n        // }\n\n        let requestURL = DBHelper.DATABASE_URL_REVIEWS;\n        if (debug) console.log('requestURL=' + requestURL);\n\n        // add remove id name as well\n        const review_id = review.review_id;\n        delete review.review_id;\n        review.id = review_id;\n        if (debug) console.log('review.id.length=' + review.id.length);\n        if (review.id.length > 0) {\n            requestURL += '/' + review.id;\n            if (debug) console.log('requestURL=' + requestURL);\n        }\n\n        const requestMethod = 'POST';\n        const requestBody = JSON.stringify(review);\n        const requestHeaders = {\n            'Content-Type': 'application/json'\n        };\n\n        return fetch(requestURL, {\n            method: requestMethod, body: requestBody, headers: requestHeaders\n        }).then(result => {\n            if (debug) console.log('result=' + result);\n            if (debug) console.log('fetch-navigator.onLine=' + navigator.onLine);\n            if (!navigator.onLine) {\n\n                return dbPromise.then(function (db) {\n\n                    if (debug) console.log('review-pending-start');\n                    const txPending = db.transaction('pending', 'readwrite');\n                    let pendingStore = txPending.objectStore('pending');\n\n                    pendingStore.then(() => {\n                        const pending = {\n                            id: Date.now(),\n                            url: requestURL,\n                            method: requestMethod,\n                            body: requestBody,\n                            headers: requestHeaders\n                        };\n                        pendingStore.put(pending);\n                        txPending.complete;\n                    });\n                });\n            }\n        }).catch(error => {\n            if (debug) console.log('catch-navigator.onLine=' + navigator.onLine);\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message}`;\n            callback(error, null);\n        });\n    }\n\n    // example copied from\n    // https://stackoverflow.com/questions/847185/convert-a-unix-timestamp-to-time-in-javascript\n    static formattedUnixTime(unix_timestamp) {\n        const date_now = new Date();\n        // Create a new JavaScript Date object based on the timestamp\n        // multiplied by 1000 so that the argument is in milliseconds, not seconds.\n        const date = new Date(unix_timestamp * 1000);\n        let year = date.getFullYear();\n        const month = date.getMonth();\n        const day = date.getDate();\n\n        if (year > date_now.getFullYear()) {\n            year = date_now.getFullYear();\n        }\n\n        // Hours part from the timestamp\n        const hours = date.getHours();\n        // Minutes part from the timestamp\n        const minutes = \"0\" + date.getMinutes();\n        // Seconds part from the timestamp\n        const seconds = \"0\" + date.getSeconds();\n\n        const part = date.getDate();\n\n        // Will display time in 10:30:23 format\n        return month + '/' + day + '/' + year + ' ' + (hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2)).toString();\n        //return (hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2));\n    }\n\n}\n\n// module.exports = DBHelper;"],"file":"dbhelper.min.js"}