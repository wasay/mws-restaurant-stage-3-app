{"version":3,"names":[],"mappings":"","sources":["dbhelper.min.js"],"sourcesContent":["// js/dbhelper.js\n\nlet debug = true;\nif (debug) console.log('start /lib/dbhelper.js');\n\nconst appPrefix = 'mws-restaurant-stage-3';\nconst staticCacheName = appPrefix + '-v1';\nconst contentImgsCache = appPrefix + '-content-imgs';\nconst allCaches = [staticCacheName, contentImgsCache];\nconst dbName = 'topRestaurants3';\nconst dbVersion = 5;\n\nif (debug) console.log('dbhelper-dbName=' + dbName);\nif (debug) console.log('dbhelper-dbVersion=' + dbVersion);\n\n// https://github.com/jakearchibald/idb\n// https://developers.google.com/web/ilt/pwa/lab-indexeddb\n// https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore\n\nlet addV1Data = false;\nconst dbPromise = idb.open(dbName, dbVersion, function (upgradeDb) {\n    if (debug) console.log('dbhelper-upgradeDb.oldVersion=' + upgradeDb.oldVersion);\n\n    switch (upgradeDb.oldVersion) {\n        case 0:\n            let restaurantsObjectStore = upgradeDb.createObjectStore('restaurants', {\n                keyPath: 'restaurant_id',\n                autoIncrement: true\n            });\n            restaurantsObjectStore.createIndex('restaurant_id', 'restaurant_id', { unique: true });\n            restaurantsObjectStore.createIndex('name', 'name', { unique: false });\n            restaurantsObjectStore.createIndex('neighborhood', 'neighborhood', { unique: false });\n            restaurantsObjectStore.createIndex('photograph', 'photograph', { unique: false });\n            restaurantsObjectStore.createIndex('address', 'address', { unique: false });\n            restaurantsObjectStore.createIndex('lat', 'lat', { unique: false });\n            restaurantsObjectStore.createIndex('lng', 'lng', { unique: false });\n            restaurantsObjectStore.createIndex('cuisine_type', 'cuisine_type', { unique: false });\n            restaurantsObjectStore.createIndex('is_favorite', 'is_favorite', { unique: false });\n            restaurantsObjectStore.createIndex('createdAt', 'createdAt', { unique: false });\n            restaurantsObjectStore.createIndex('updatedAt', 'updatedAt', { unique: false });\n            if (debug) console.log('dbhelper-restaurantsObjectStore-done');\n        case 1:\n\n            // autoIncrement example - https://developers.google.com/web/ilt/pwa/working-with-indexeddb\n            const operatingHoursObjectStore = upgradeDb.createObjectStore('operating_hours', {\n                keyPath: 'operating_hour_id',\n                autoIncrement: true\n            });\n            operatingHoursObjectStore.createIndex('operating_hour_id', 'operating_hour_id', { unique: true });\n            operatingHoursObjectStore.createIndex('restaurant_id', 'restaurant_id', { unique: false });\n            operatingHoursObjectStore.createIndex('day', 'day', { unique: false });\n            operatingHoursObjectStore.createIndex('hours', 'hours', { unique: false });\n            operatingHoursObjectStore.createIndex('createdAt', 'createdAt', { unique: false });\n            operatingHoursObjectStore.createIndex('updatedAt', 'updatedAt', { unique: false });\n            if (debug) console.log('dbhelper-operatingHoursObjectStore-done');\n        case 2:\n\n            const reviewsObjectStore = upgradeDb.createObjectStore('reviews', {\n                keyPath: 'review_id',\n                autoIncrement: true\n            });\n            reviewsObjectStore.createIndex('review_id', 'review_id', { unique: true });\n            reviewsObjectStore.createIndex('restaurant_id', 'restaurant_id', { unique: false });\n            reviewsObjectStore.createIndex('name', 'name', { unique: false });\n            reviewsObjectStore.createIndex('rating', 'rating', { unique: false });\n            reviewsObjectStore.createIndex('comments', 'comments', { unique: false });\n            reviewsObjectStore.createIndex('createdAt', 'createdAt', { unique: false });\n            reviewsObjectStore.createIndex('updatedAt', 'updatedAt', { unique: false });\n            if (debug) console.log('dbhelper-reviewsObjectStore-done');\n        case 3:\n\n            let pendingObjectStore = upgradeDb.createObjectStore('pending', {\n                keyPath: 'id',\n                autoIncrement: true\n            });\n            pendingObjectStore.createIndex('id', 'id', { unique: true });\n            pendingObjectStore.createIndex('url', 'url', { unique: false });\n            pendingObjectStore.createIndex('method', 'method', { unique: false });\n            pendingObjectStore.createIndex('headers', 'headers', { unique: false });\n            pendingObjectStore.createIndex('body', 'body', { unique: false });\n            if (debug) console.log('dbhelper-pendingObjectStore-done');\n\n            addV1Data = true;\n            if (debug) console.log('dbhelper-version-3-addV1Data=' + addV1Data);\n        case 4:\n            if (debug) console.log('dbhelper-version-4-addV1Data=' + addV1Data);\n    }\n}).catch(error => {\n    // Oops!. Got an error from server.\n    error.message = `Request failed createDB. Returned status of ${error.message}`;\n    throw error;\n});\n\ndbPromise.then(db => {\n    if (debug) console.log('dbhelper-dbPromise-then');\n    const dbVersion = db.version;\n    if (debug) console.log('dbhelper-dbVersion=' + dbVersion);\n    return db;\n}).then(db => {\n    if (debug) console.log('dbhelper-addV1Data=' + addV1Data);\n    if (!addV1Data) {\n        // set addV1Data to true if there are no restaurants in idb\n        // return DBHelper.getAllIndexDbRestaurants()\n        //     .then(response => response)\n        //     .then(restaurants => {\n        //         if (restaurants.length === 0) {\n        //             addV1Data = true;\n        //         }\n        //         return true;\n        //     });\n        return DBHelper.getAllIndexDbRestaurants((error, restaurants) => {\n            if (restaurants.length === 0) {\n                addV1Data = true;\n            }\n            return true;\n        });\n    }\n    return db;\n}).then(db => {\n\n    if (debug) console.log('dbhelper-addV1Data=' + addV1Data);\n    if (addV1Data) {\n        if (debug) console.log('dbhelper--calling-DBHelper.v1AddRestaurantsData()');\n        return DBHelper.v1AddRestaurantsData(db);\n    }\n    return db;\n}).then(db => {\n    if (debug) console.log('dbhelper-addV1Data=' + addV1Data);\n    if (addV1Data) {\n        if (debug) console.log('dbhelper--calling-DBHelper.v1AddReviewsData()');\n        return DBHelper.v1AddReviewsData(db);\n    }\n    return db;\n}).catch(error => {\n    if (debug) console.log('dbhelper-some-error');\n    // Oops!. Got an error from server.\n    error.message = `Request failed load data. Returned status of ${error.message}`;\n    throw error;\n});\n\n/**\r\n * Common database helper functions.\r\n */\nclass DBHelper {\n\n    constructor() {\n        this.restaurants = null;\n    }\n\n    static get staticCacheName() {\n        return staticCacheName;\n    }\n\n    static get contentImgsCache() {\n        return contentImgsCache;\n    }\n\n    static get allCaches() {\n        return allCaches;\n    }\n\n    static get dbPromise() {\n        return dbPromise;\n    }\n\n    static get dbName() {\n        return dbName;\n    }\n\n    static get dbVersion() {\n        return dbVersion;\n    }\n\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\n    static get DATABASE_URL() {\n        //console.log('dbhelper-DATABASE_URL()');\n        const port = 1337; // Change this to your server port\n        // michael.phan.gen suggestion:\n        // https://discussions.udacity.com/t/restaurant-reviews-app-stage-1/675923/8\n        //return `https://raw.githubusercontent.com/udacity/mws-restaurant-stage-1/master/data/restaurants.json`;\n\n        // return `http://localhost:${port}/data/restaurants.json`;\n        return `http://localhost:${port}`;\n    }\n\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\n    static get DATABASE_URL_RESTAURANTS() {\n        return DBHelper.DATABASE_URL + '/restaurants';\n    }\n\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\n    static get DATABASE_URL_REVIEWS() {\n        return DBHelper.DATABASE_URL + '/reviews';\n    }\n\n    /**\r\n     * Fetch all restaurants.\r\n     */\n    static fetchRestaurants(callback) {\n        //console.log('dbhelper-fetchRestaurants()');\n\n        let restaurants = this.restaurants;\n\n        return dbPromise.then(restaurants => {\n            if (debug) console.log('dbhelper-fetchRestaurants()-array check first=' + (!Array.isArray(restaurants) || restaurants.length === 0));\n            if (!Array.isArray(restaurants) || restaurants.length === 0) {\n                return DBHelper.getAllIndexDbRestaurants((error, restaurants) => {\n                    if (debug) console.log('dbhelper-fetchRestaurants()-array check first-return=' + (!Array.isArray(restaurants) || restaurants.length === 0));\n                    if (error) return callback(error.message, null);\n                    return restaurants;\n                });\n            } else return restaurants;\n        }).then(restaurants => {\n            if (debug) console.log('dbhelper-fetchRestaurants()-array check second=' + (!Array.isArray(restaurants) || restaurants.length === 0));\n            if (!Array.isArray(restaurants) || restaurants.length === 0) {\n                return fetch(DBHelper.DATABASE_URL_RESTAURANTS).then(response => response.json()).then(restaurants => {\n                    for (const key in restaurants) {\n                        restaurants[key].restaurant_id = restaurants[key].id;\n                        restaurants[key].reviews = [];\n                    }\n\n                    let key = 0;\n                    restaurants.forEach(restaurant => {\n                        if (restaurant) {\n                            return DBHelper.fetchReviewsByRestaurantId(restaurant.restaurant_id, (error, result) => {\n                                restaurants[key].reviews = result;\n                            });\n                        }\n                        key++;\n                    });\n\n                    return restaurants;\n                });\n            } else return restaurants;\n        }).then(restaurants => {\n            if (debug) console.log('dbhelper-fetchRestaurants()-array check third=' + (!Array.isArray(restaurants) || restaurants.length === 0));\n            this.restaurants = restaurants;\n            if (debug) console.log('dbhelper-getAllRestaurants()-this.restaurants-end=' + this.restaurants);\n            return callback(null, this.restaurants);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message}`;\n            return callback(error.message, null);\n        });\n    }\n\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\n    static fetchRestaurantById(id, callback) {\n        //console.log('dbhelper-fetchRestaurantById()');\n        // fetch all restaurants with proper error handling.\n        DBHelper.fetchRestaurants((error, restaurants) => {\n            if (error) {\n                callback(error, null);\n            } else {\n                const restaurant = restaurants.find(r => r.restaurant_id == id);\n                if (restaurant) {\n                    // Got the restaurant\n                    callback(null, restaurant);\n                } else {\n                    // Restaurant does not exist in the database\n                    callback('Restaurant does not exist', null);\n                }\n            }\n        });\n    }\n\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\n    static fetchRestaurantByCuisine(cuisine, callback) {\n        //console.log('dbhelper-fetchRestaurantByCuisine()');\n        // Fetch all restaurants  with proper error handling\n        DBHelper.fetchRestaurants((error, restaurants) => {\n            if (error) {\n                callback(error, null);\n            } else {\n                // Filter restaurants to have only given cuisine type\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\n                callback(null, results);\n            }\n        });\n    }\n\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\n        //console.log('dbhelper-fetchRestaurantByNeighborhood()');\n        // Fetch all restaurants\n        DBHelper.fetchRestaurants((error, restaurants) => {\n            if (error) {\n                callback(error, null);\n            } else {\n                // Filter restaurants to have only given neighborhood\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\n                callback(null, results);\n            }\n        });\n    }\n\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n        //console.log('dbhelper-fetchRestaurantByCuisineAndNeighborhood()');\n        // Fetch all restaurants\n        DBHelper.fetchRestaurants((error, restaurants) => {\n            if (error) {\n                callback(error, null);\n            } else {\n                let results = restaurants;\n\n                if (cuisine != 'all') {\n                    // filter by cuisine\n                    results = results.filter(r => r.cuisine_type == cuisine);\n                }\n                if (neighborhood != 'all') {\n                    // filter by neighborhood\n                    results = results.filter(r => r.neighborhood == neighborhood);\n                }\n                callback(null, results);\n            }\n        });\n    }\n\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\n    static fetchNeighborhoods(callback) {\n        //console.log('dbhelper-fetchNeighborhoods()');\n        // Fetch all restaurants\n        DBHelper.fetchRestaurants((error, restaurants) => {\n            //console.log('dbhelper-fetchNeighborhoods()-restaurants-callback');\n            if (error) {\n                callback(error, null);\n            } else {\n                // Get all neighborhoods from all restaurants\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\n                // Remove duplicates from neighborhoods\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\n                callback(null, uniqueNeighborhoods);\n            }\n        });\n    }\n\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\n    static fetchCuisines(callback) {\n        //console.log('dbhelper-fetchCuisines()');\n        // Fetch all restaurants\n        DBHelper.fetchRestaurants((error, restaurants) => {\n            if (error) {\n                callback(error, null);\n            } else {\n                // Get all cuisines from all restaurants\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\n                // Remove duplicates from cuisines\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\n                callback(null, uniqueCuisines);\n            }\n        });\n    }\n\n    /**\r\n     * Restaurant page URL.\r\n     */\n    static urlForRestaurant(restaurant) {\n        //console.log('dbhelper-urlForRestaurant()');\n        return `./restaurant.html?id=${restaurant.restaurant_id}`;\n    }\n\n    /**\r\n     * Restaurant image URL.\r\n     */\n    static imageUrlForRestaurant(restaurant) {\n        //console.log('dbhelper-imageUrlForRestaurant()');\n        if (restaurant.photograph) {\n            return `img/${restaurant.photograph}.jpg`;\n        }\n    }\n\n    /**\r\n     * Map marker for a restaurant.\r\n     */\n    static mapMarkerForRestaurant(restaurant, map) {\n        //console.log('dbhelper-mapMarkerForRestaurant()');\n        const marker = new google.maps.Marker({\n            position: restaurant.latlng,\n            title: restaurant.name,\n            url: DBHelper.urlForRestaurant(restaurant),\n            map: map,\n            animation: google.maps.Animation.DROP\n        });\n        return marker;\n    }\n\n    /**\r\n     * get all Db .\r\n     */\n    static getAllIndexDbRestaurants(callback) {\n        if (debug) console.log('dbhelper-getAllIndexDbRestaurants()');\n\n        let restaurants = [];\n\n        return dbPromise.then(db => {\n            const txRestaurants = db.transaction('restaurants', 'readonly');\n            let restaurantsStore = txRestaurants.objectStore('restaurants');\n            return restaurantsStore.getAll();\n        }).then(restaurants_list => {\n            if (debug) console.log('dbhelper-getAllIndexDbRestaurants()-restaurants_list=' + restaurants_list);\n\n            if (!restaurants_list || restaurants_list.length === 0) return restaurants;\n\n            for (const restaurant of restaurants_list) {\n                if (restaurant) {\n                    if (debug) console.log('dbhelper-getAllIndexDbRestaurants()-restaurant.restaurant_id=' + restaurant.restaurant_id);\n                    DBHelper.getIndexDbRestaurantById(restaurant.restaurant_id, (error, result) => {\n                        if (debug) console.log('dbhelper-getAllIndexDbRestaurants()-result=' + result);\n                        if (result) {\n                            restaurants.push(result);\n                        }\n                        return;\n                    });\n                }\n            }\n            callback(null, restaurants);\n        });\n    }\n\n    /**\r\n     * Fetch review by ID.\r\n     */\n    static getIndexDbRestaurantById(restaurant_id, callback) {\n        if (debug) console.log('dbhelper-getIndexDbRestaurantById()-input-restaurant_id=' + restaurant_id);\n\n        if (!restaurant_id || restaurant_id.length === 0) {\n            let error_message = `Request failed. Missing restaurant id`;\n            return callback(error_message, null);\n        }\n\n        let restaurantsArr = [];\n        dbPromise.then(db => {\n\n            const txRestaurants = db.transaction('restaurants', 'readonly');\n            if (debug) console.log('dbhelper-getIndexDbRestaurantById()-txRestaurants=' + txRestaurants);\n\n            let restaurantsStore = txRestaurants.objectStore('restaurants');\n            if (debug) console.log('dbhelper-getIndexDbRestaurantById()-restaurantsStore=' + restaurantsStore);\n\n            const restaurant = restaurantsStore.get(restaurant_id);\n            if (debug) console.log('dbhelper-getIndexDbRestaurantById()-restaurant=' + restaurant);\n\n            if (debug) console.log('dbhelper-getIndexDbRestaurantById()-restaurant.restaurant_id=' + restaurant.restaurant_id);\n\n            if (!restaurant || restaurant.length === 0) {\n                return [];\n            }\n\n            let item = {\n                \"restaurant_id\": restaurant.restaurant_id,\n                \"name\": restaurant.name,\n                \"neighborhood\": restaurant.neighborhood,\n                \"photograph\": restaurant.photograph,\n                \"address\": restaurant.address,\n                \"latlng\": {\n                    \"lat\": restaurant.lat,\n                    \"lng\": restaurant.lat\n                },\n                \"cuisine_type\": restaurant.cuisine_type\n            };\n\n            let operating_hours = [];\n            let reviews = [];\n            if (restaurant.restaurant_id) {\n                const txOperatingHours = db.transaction('operating_hours', 'readonly');\n                let operatingHoursStore = txOperatingHours.objectStore('operating_hours');\n                const operating_hours_list = operatingHoursStore.getAll(['restaurant_id', restaurant.restaurant_id]);\n                for (const indx in operating_hours_list) {\n                    operating_hours[indx] = [operating_hours_list[indx]];\n                }\n\n                const txReviews = db.transaction('reviews', 'readonly');\n                let reviewsStore = txReviews.objectStore('reviews');\n                const review_list = reviewsStore.getAll('restaurant_id', restaurant.restaurant_id);\n                for (const review in review_list) {\n                    const rItem = {\n                        \"review_id\": review.review_id,\n                        \"name\": review.name,\n                        \"createdAt\": review.createdAt,\n                        \"updatedAt\": review.updatedAt,\n                        \"rating\": review.rating,\n                        \"comments\": review.comments\n                    };\n                    reviews.push(rItem);\n                }\n            }\n            item[\"operating_hours\"] = operating_hours;\n            item[\"reviews\"] = reviews;\n\n            restaurantsArr.push(item);\n\n            if (debug) console.log('dbhelper-getIndexDbRestaurantById()-restaurantsArr=' + restaurantsArr);\n\n            callback(null, restaurantsArr);\n        });\n    }\n\n    static v1AddRestaurantsData(db) {\n        if (debug) console.log('v1AddRestaurantsData()');\n\n        return fetch(DBHelper.DATABASE_URL_RESTAURANTS).then(response => response.json()).then(function (neighborhoods) {\n            if (debug) console.log('v1AddRestaurantsData()-neighborhoods=' + neighborhoods);\n\n            neighborhoods.forEach(restaurant => {\n\n                // add to database\n                if (debug) console.log('v1AddRestaurantsData()-neighborhoods-each-restaurant=' + restaurant);\n                const txRestaurants = db.transaction('restaurants', 'readwrite');\n                let restaurantsStore = txRestaurants.objectStore('restaurants');\n\n                restaurantsStore.get(restaurant.id).then(function (item) {\n\n                    if (debug) console.log('v1AddRestaurantsData()-neighborhoods-each-restaurant-get');\n                    if (item) return true;\n\n                    //https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore\n                    const rtNewItem = [{\n                        restaurant_id: restaurant.id,\n                        name: restaurant.name,\n                        neighborhood: restaurant.neighborhood,\n                        photograph: restaurant.photograph,\n                        address: restaurant.address,\n                        lat: restaurant.latlng.lat,\n                        lng: restaurant.latlng.lng,\n                        cuisine_type: restaurant.cuisine_type,\n                        is_favorite: restaurant.is_favorite,\n                        createdAt: restaurant.createdAt,\n                        updatedAt: restaurant.updatedAt\n                    }];\n                    restaurantsStore.add(rtNewItem[0]);\n                    txRestaurants.complete;\n                    if (debug) console.log('v1AddRestaurantsData()-neighborhoods-each-restaurant-tx-complete');\n\n                    if (debug) console.log('v1AddRestaurantsData()-neighborhoods-each-restaurant-operating_hours-start');\n                    let operating_hours = restaurant.operating_hours;\n\n                    const txOperatingHours = db.transaction('operating_hours', 'readwrite');\n                    let operatingHoursStore = txOperatingHours.objectStore('operating_hours');\n                    for (const indx in operating_hours) {\n                        if (debug) console.log('v1AddRestaurantsData()-neighborhoods-each-restaurant-operating_hours-indx=' + indx);\n                        if (debug) console.log('v1AddRestaurantsData()-neighborhoods-each-restaurant-operating_hours-value[indx]=' + operating_hours[indx]);\n                        operatingHoursStore.add({\n                            restaurant_id: restaurant.id,\n                            day: indx,\n                            hours: operating_hours[indx],\n                            createdAt: restaurant.createdAt,\n                            updatedAt: restaurant.updatedAt\n                        });\n                    }\n                    txOperatingHours.complete;\n                    if (debug) console.log('v1AddRestaurantsData()-neighborhoods-each-restaurant-operating_hours-tx-complete');\n                });\n            });\n\n            return db;\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed v1AddRestaurantsData. Returned status of ${error.message}`;\n            console.log(error.message);\n            return db;\n        });\n    }\n\n    static v1AddReviewsData(db) {\n        if (debug) console.log('v1AddReviewsData()');\n\n        const requestUrl = DBHelper.DATABASE_URL_REVIEWS;\n        if (debug) console.log('v1AddReviewsData()-requestUrl=' + requestUrl);\n\n        return fetch(requestUrl).then(response => response.json()).then(function (reviews) {\n\n            if (debug) console.log('v1AddReviewsData()-reviews=' + reviews);\n\n            if (debug) console.log('v1AddReviewsData()-reviews-start');\n            const txReviews = db.transaction('reviews', 'readwrite');\n            let reviewsStore = txReviews.objectStore('reviews');\n\n            for (const rkey in reviews) {\n                if (debug) console.log('rkey=' + rkey);\n                if (debug) console.log('review[rkey]=' + reviews[rkey]);\n                if (debug) console.log('reviews[rkey].id=' + reviews[rkey].id);\n                if (debug) console.log('reviews[rkey].restaurant_id=' + reviews[rkey].restaurant_id);\n                if (debug) console.log('reviews[rkey].name=' + reviews[rkey].name);\n                if (debug) console.log('reviews[rkey].createdAt=' + reviews[rkey].createdAt);\n                if (debug) console.log('reviews[rkey].rating=' + reviews[rkey].rating);\n                if (debug) console.log('reviews[rkey].comments=' + reviews[rkey].comments);\n                reviewsStore.add({\n                    review_id: reviews[rkey].id,\n                    restaurant_id: reviews[rkey].restaurant_id,\n                    name: reviews[rkey].name,\n                    rating: reviews[rkey].rating,\n                    comments: reviews[rkey].comments,\n                    createdAt: reviews[rkey].createdAt,\n                    updatedAt: reviews[rkey].updatedAt\n                });\n            }\n            txReviews.complete;\n            if (debug) console.log('v1AddReviewsData()-reviews-complete');\n\n            return true;\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed v1AddReviewsData. Returned status of ${error.message}`;\n            console.log(error.message);\n            return false;\n        });\n    }\n\n    /**\r\n     * update a restaurant by its ID.\r\n     */\n    static addUpdateRestaurantById(restaurant, callback) {\n        if (debug) console.log('-----------------------------------');\n        if (debug) console.log('dbhelper-addUpdateRestaurantById()');\n\n        if (debug && restaurant) {\n            for (const indx in restaurant) {\n                if (debug) console.log('restaurant[' + indx + ']=' + restaurant[indx]);\n            }\n        }\n\n        let local_error = null;\n        let cache_error = null;\n        let remote_error = null;\n\n        dbPromise.then(() => {\n            DBHelper.addUpdateLocalRestaurantById(restaurant, (error, result) => {\n                local_error = error;\n            });\n        }).then(() => {\n            DBHelper.addUpdateCacheRestaurantById(restaurant, (error, result) => {\n                cache_error = error;\n            });\n        }).then(() => {\n            DBHelper.addUpdateRemoteRestaurantById(restaurant, (error, result) => {\n                remote_error = error;\n            });\n        }).then(() => {\n            if (debug) console.log('local_error=' + local_error);\n            if (debug) console.log('cache_error=' + cache_error);\n            if (debug) console.log('remote_error=' + remote_error);\n\n            if (local_error || cache_error || remote_error) {\n\n                if (debug) console.log('error');\n                return callback(local_error || cache_error || remote_error, null);\n            }\n            return callback(null, restaurant);\n        });\n    }\n\n    /**\r\n     * update a restaurant by its ID.\r\n     */\n    static addUpdateLocalRestaurantById(restaurant, callback) {\n        if (debug) console.log('-----------------------------------');\n        if (debug) console.log('dbhelper-addUpdateLocalRestaurantById()');\n\n        return dbPromise.then(db => {\n            if (debug) console.log('restaurant-restaurant-start');\n            const txRestaurants = db.transaction('restaurants', 'readwrite');\n            let restaurantsStore = txRestaurants.objectStore('restaurants');\n\n            restaurantsStore.get(restaurant.restaurant_id).then(function (item) {\n                if (!item) {\n                    const rtNewItem = [{\n                        restaurant_id: restaurant.restaurant_id,\n                        name: restaurant.name,\n                        neighborhood: restaurant.neighborhood,\n                        photograph: restaurant.photograph,\n                        address: restaurant.address,\n                        lat: restaurant.latlng.lat,\n                        lng: restaurant.latlng.lng,\n                        cuisine_type: restaurant.cuisine_type,\n                        is_favorite: restaurant.is_favorite,\n                        createdAt: restaurant.createdAt,\n                        updatedAt: restaurant.updatedAt\n                    }];\n                    restaurantsStore.add(rtNewItem[0]);\n                } else {\n                    restaurantsStore.put(restaurant);\n                }\n                txRestaurants.complete;\n\n                callback(null, true);\n            }).catch(error => {\n                // Oops!. Got an error from server.\n                error.message = `Request failed. Returned status of ${error.message}`;\n                callback(error, null);\n            });\n        });\n    }\n\n    /**\r\n     * update a restaurant by its ID.\r\n     */\n    static addUpdateCacheRestaurantById(restaurant, callback) {\n\n        if (debug) console.log('-----------------------------------');\n        if (debug) console.log('dbhelper-addUpdateCacheRestaurantById()');\n\n        if (debug) console.log('Update cache by deleting and then adding cache');\n        return caches.open(staticCacheName).then(function (cache) {\n            if (debug) console.log('Deleting index file cache');\n            return cache.delete(new Request('/')).then(function () {\n                return cache.delete(new Request('/restaurant.html?id=' + restaurant.restaurant_id));\n            });\n        }).then(function () {\n            if (debug) console.log('Adding index file cache');\n            return fetch(new Request('/')).then(function () {\n                return fetch(new Request('/restaurant.html?id=' + restaurant.restaurant_id));\n            });\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message}`;\n            callback(error, null);\n        });\n    }\n\n    /**\r\n     * update a restaurant by its ID.\r\n     */\n    static addUpdateRemoteRestaurantById(restaurant, callback) {\n\n        if (debug) console.log('-----------------------------------');\n        if (debug) console.log('dbhelper-addUpdateRemoteRestaurantById()');\n\n        let requestURL = DBHelper.DATABASE_URL_RESTAURANTS + '/' + restaurant.restaurant_id;\n        if (debug) console.log('requestURL=' + requestURL);\n\n        const requestMethod = 'PUT';\n        const requestBody = JSON.stringify(restaurant);\n        const requestHeaders = {\n            'Content-Type': 'application/json'\n        };\n\n        return fetch(requestURL, {\n            method: requestMethod, body: requestBody, headers: requestHeaders\n        }).catch(error => {\n\n            if (!navigator.onLine) {\n\n                return dbPromise.then(function (db) {\n\n                    if (debug) console.log('restaurant-pending-start');\n                    const txPending = db.transaction('pending', 'readwrite');\n                    let pendingStore = txPending.objectStore('pending');\n\n                    const pending = {\n                        id: Date.now(),\n                        url: requestURL,\n                        method: requestMethod,\n                        body: requestBody,\n                        headers: requestHeaders\n                    };\n                    pendingStore.put(pending);\n                    txPending.complete;\n                    return true;\n                }).then(result => {\n                    callback(null, result);\n                });\n            } else {\n\n                // Oops!. Got an error from server.\n                error.message = `Request failed. Returned status of ${error.message}`;\n                callback(error, null);\n            }\n        });\n    }\n\n    /**\r\n     * Fetch all reviews.\r\n     */\n    static fetchReviewsByRestaurantId(restaurant_id, callback) {\n        if (debug) console.log('dbhelper-fetchReviewsByRestaurantId()');\n        if (debug) console.log('dbhelper-fetchReviewsByRestaurantId()-restaurant_id=' + restaurant_id);\n\n        if (debug) console.log('call-fetch');\n\n        const review_url = DBHelper.DATABASE_URL_REVIEWS + '?restaurant_id=' + restaurant_id;\n        if (debug) console.log('dbhelper-fetchReviewsByRestaurantId()-review_url=' + review_url);\n\n        return fetch(review_url).then(response => response.json()).then(reviews => {\n            if (debug) console.log('dbhelper-fetchReviewsByRestaurantId()-reviews=' + reviews);\n            reviews.forEach(review => {\n                console.log('dbhelper-fetchReviewsByRestaurantId()-reviews-review=' + review.id);\n            });\n            callback(null, reviews);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed-1. Returned status of ${error.message}`;\n            console.log(error.message);\n            callback(error, null);\n        });\n    }\n\n    /**\r\n     * get all restaurants.\r\n     */\n    static getAllRestaurants(callback) {\n        if (debug) console.log('-----------------------------------');\n        if (debug) console.log('dbhelper-getAllRestaurants()');\n\n        if (debug) console.log('dbhelper-getAllRestaurants()-this.restaurants=' + this.restaurants);\n\n        let restaurants = this.restaurants;\n        return dbPromise.then(() => {\n            if (debug) console.log('dbhelper-getAllRestaurants()-(!Array.isArray(restaurants) || restaurants.length === 0)=' + (!Array.isArray(restaurants) || restaurants.length === 0));\n            if (!Array.isArray(restaurants) || restaurants.length === 0) {\n                return dbPromise.then(() => {\n                    if (debug) console.log('dbhelper-getAllRestaurants()- calling-DBHelper.getAllIndexDbRestaurants()');\n                    return DBHelper.getAllIndexDbRestaurants((error, restaurants) => {\n                        if (debug) console.log('-----------------------------------');\n                        if (debug) console.log('dbhelper-getAllRestaurants()-getAllIndexDbRestaurants()-error=' + error);\n                        if (debug) console.log('dbhelper-getAllRestaurants()-getAllIndexDbRestaurants()-restaurants=' + restaurants);\n                        if (error) return callback(error.message, null);\n                        return restaurants;\n                    });\n                });\n            }\n        }).then(restaurants => {\n            if (debug) console.log('dbhelper-getAllRestaurants()-then()=' + restaurants);\n            if (debug) console.log('dbhelper-getAllRestaurants()-(!Array.isArray(restaurants) || restaurants.length === 0)=' + (!Array.isArray(restaurants) || restaurants.length === 0));\n            if (!Array.isArray(restaurants) || restaurants.length === 0) {\n                if (debug) console.log('dbhelper-getAllRestaurants()-calling - DBHelper.fetchAllRestaurants()');\n                return DBHelper.fetchAllRestaurants((error, restaurants) => {\n                    if (debug) console.log('-----------------------------------');\n                    if (debug) console.log('dbhelper-getAllRestaurants()-fetchAllRestaurants()-error=' + error);\n                    if (debug) console.log('dbhelper-getAllRestaurants()-fetchAllRestaurants()-result=' + restaurants);\n                    if (error) return callback(error.message, null);\n                    return restaurants;\n                });\n            }\n            if (debug) console.log('dbhelper-getAllRestaurants()-getAllIndexDbRestaurants()-return=' + restaurants);\n            return restaurants;\n        }).then(restaurants => {\n            if (debug) console.log('dbhelper-getAllRestaurants()-restaurants=' + restaurants);\n\n            this.restaurants = restaurants;\n            if (debug) console.log('dbhelper-getAllRestaurants()-this.restaurants-end=' + this.restaurants);\n            return callback(null, this.restaurants);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message}`;\n            return callback(error.message, null);\n        });\n    }\n\n    /**\r\n     * get restaurant by ID.\r\n     */\n    static getRestaurantById(restaurant_id, callback) {\n        if (debug) console.log('-----------------------------------');\n        if (debug) console.log('dbhelper-getRestaurantById()');\n        if (debug) console.log('dbhelper-getRestaurantById()-restaurant_id=' + restaurant_id);\n\n        if (debug) console.log('dbhelper-getRestaurantById()-this.restaurants=' + this.restaurants);\n\n        let error_message = '';\n\n        let restaurants = this.restaurants;\n        return dbPromise.then(restaurants, () => {\n            if (!Array.isArray(restaurants) || restaurants.length === 0) {\n                if (debug) console.log('dbhelper-getRestaurantById()-getAllRestaurants()');\n                return DBHelper.getAllRestaurants((error, restaurants) => {\n                    if (debug) console.log('-----------------------------------');\n                    if (debug) console.log('dbhelper-getRestaurantById()-getAllRestaurants()-restaurants=' + restaurants);\n                    return restaurants;\n                });\n            } else {\n                return restaurants;\n            }\n        }).then(restaurants, () => {\n            // if restaurants array exists then use that\n            if (debug) console.log('dbhelper-getRestaurantById()-restaurants=' + restaurants);\n\n            if (!restaurants) {\n                // Oops!. Got an error from server.\n                const error_message = `Request failed. Restaurants could not be retrived`;\n                return callback(error_message, null);\n            }\n            if (debug) console.log('dbhelper-getRestaurantById()-restaurants[0]=' + restaurants[0]);\n            if (debug) console.log('dbhelper-getRestaurantById()-restaurants.name=' + restaurants.name);\n\n            let restaurant = restaurants.filter(r => r.id == restaurant_id);\n            if (debug) console.log('dbhelper-getRestaurantById()-restaurant.filter()=' + restaurant);\n\n            if (!restaurants) {\n                // Oops!. Got an error from server.\n                error_message = `Request failed. Restaurant by id could not be located`;\n                return callback(error_message, null);\n            }\n\n            restaurant = restaurant[0];\n            if (debug) console.log('dbhelper-getRestaurantById()-restaurant.filter()=' + restaurant);\n            return callback(null, restaurant);\n        });\n    }\n\n}\n\n// module.exports = DBHelper;"],"file":"dbhelper.min.js"}