{"version":3,"names":[],"mappings":"","sources":["dbhelper.min.js"],"sourcesContent":["// js/dbhelper.js\n// import idb from 'idb';\n\n/**\r\n * Common database helper functions.\r\n */\nclass DBHelper {\n\n    constructor() {\n        this.restaurants = null;\n        this.dbName = 'topRestaurants';\n        this.dbVersion = 1;\n    }\n\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\n    static get DATABASE_URL() {\n        //console.log('dbhelper-DATABASE_URL()');\n        const port = 1337; // Change this to your server port\n        // michael.phan.gen suggestion:\n        // https://discussions.udacity.com/t/restaurant-reviews-app-stage-1/675923/8\n        //return `https://raw.githubusercontent.com/udacity/mws-restaurant-stage-1/master/data/restaurants.json`;\n\n        // return `http://localhost:${port}/data/restaurants.json`;\n        return `http://localhost:${port}/restaurants`;\n    }\n\n    /**\r\n     * Fetch all restaurants.\r\n     */\n    static fetchRestaurants(callback) {\n        //console.log('dbhelper-fetchRestaurants()');\n\n        if (!Array.isArray(this.restaurants) || this.restaurants.length === 0) {\n            //console.log('call-fetch');\n\n            this.restaurants = fetch(DBHelper.DATABASE_URL).then(response => response.json()).catch(error => {\n                // Oops!. Got an error from server.\n                error.message = `Request failed-1. Returned status of ${error.message}`;\n                return callback(error.message, null);\n            });\n        }\n        //console.log('this.restaurants' + (this.restaurants));\n\n        return this.restaurants.then(restaurants => {\n            //console.log('restaurants=' + (restaurants));\n            return callback(null, restaurants);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed-2. Returned status of ${error.message}`;\n            return callback(error.message, null);\n        });\n    }\n\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\n    static fetchRestaurantById(id, callback) {\n        //console.log('dbhelper-fetchRestaurantById()');\n        // fetch all restaurants with proper error handling.\n        DBHelper.fetchRestaurants((error, restaurants) => {\n            if (error) {\n                callback(error, null);\n            } else {\n                const restaurant = restaurants.find(r => r.id == id);\n                if (restaurant) {\n                    // Got the restaurant\n                    callback(null, restaurant);\n                } else {\n                    // Restaurant does not exist in the database\n                    callback('Restaurant does not exist', null);\n                }\n            }\n        });\n    }\n\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\n    static fetchRestaurantByCuisine(cuisine, callback) {\n        //console.log('dbhelper-fetchRestaurantByCuisine()');\n        // Fetch all restaurants  with proper error handling\n        DBHelper.fetchRestaurants((error, restaurants) => {\n            if (error) {\n                callback(error, null);\n            } else {\n                // Filter restaurants to have only given cuisine type\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\n                callback(null, results);\n            }\n        });\n    }\n\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\n        //console.log('dbhelper-fetchRestaurantByNeighborhood()');\n        // Fetch all restaurants\n        DBHelper.fetchRestaurants((error, restaurants) => {\n            if (error) {\n                callback(error, null);\n            } else {\n                // Filter restaurants to have only given neighborhood\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\n                callback(null, results);\n            }\n        });\n    }\n\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n        //console.log('dbhelper-fetchRestaurantByCuisineAndNeighborhood()');\n        // Fetch all restaurants\n        DBHelper.fetchRestaurants((error, restaurants) => {\n            if (error) {\n                callback(error, null);\n            } else {\n                let results = restaurants;\n\n                if (cuisine != 'all') {\n                    // filter by cuisine\n                    results = results.filter(r => r.cuisine_type == cuisine);\n                }\n                if (neighborhood != 'all') {\n                    // filter by neighborhood\n                    results = results.filter(r => r.neighborhood == neighborhood);\n                }\n                callback(null, results);\n            }\n        });\n    }\n\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\n    static fetchNeighborhoods(callback) {\n        //console.log('dbhelper-fetchNeighborhoods()');\n        // Fetch all restaurants\n        DBHelper.fetchRestaurants((error, restaurants) => {\n            //console.log('dbhelper-fetchNeighborhoods()-restaurants-callback');\n            if (error) {\n                callback(error, null);\n            } else {\n                // Get all neighborhoods from all restaurants\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\n                // Remove duplicates from neighborhoods\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\n                callback(null, uniqueNeighborhoods);\n            }\n        });\n    }\n\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\n    static fetchCuisines(callback) {\n        //console.log('dbhelper-fetchCuisines()');\n        // Fetch all restaurants\n        DBHelper.fetchRestaurants((error, restaurants) => {\n            if (error) {\n                callback(error, null);\n            } else {\n                // Get all cuisines from all restaurants\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\n                // Remove duplicates from cuisines\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\n                callback(null, uniqueCuisines);\n            }\n        });\n    }\n\n    /**\r\n     * Restaurant page URL.\r\n     */\n    static urlForRestaurant(restaurant) {\n        //console.log('dbhelper-urlForRestaurant()');\n        return `./restaurant.html?id=${restaurant.id}`;\n    }\n\n    /**\r\n     * Restaurant image URL.\r\n     */\n    static imageUrlForRestaurant(restaurant) {\n        //console.log('dbhelper-imageUrlForRestaurant()');\n        if (restaurant.photograph) {\n            return `img/${restaurant.photograph}.jpg`;\n        }\n    }\n\n    /**\r\n     * Map marker for a restaurant.\r\n     */\n    static mapMarkerForRestaurant(restaurant, map) {\n        //console.log('dbhelper-mapMarkerForRestaurant()');\n        const marker = new google.maps.Marker({\n            position: restaurant.latlng,\n            title: restaurant.name,\n            url: DBHelper.urlForRestaurant(restaurant),\n            map: map,\n            animation: google.maps.Animation.DROP\n        });\n        return marker;\n    }\n\n}\n\n// module.exports = DBHelper;"],"file":"dbhelper.min.js"}