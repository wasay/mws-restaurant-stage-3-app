{"version":3,"names":[],"mappings":"","sources":["dbhelper.min.js"],"sourcesContent":["// js/dbhelper.js\n\nlet debug = true;\n\n//DBHelper.debugRestaurantInfo('', 'start /lib/dbhelper.js');\n\nconst appPrefix = 'mws-restaurant-stage-3';\nconst staticCacheName = appPrefix + '-v2';\nconst contentImgsCache = appPrefix + '-content-imgs';\nconst allCaches = [staticCacheName, contentImgsCache];\nconst dbName = 'topRestaurants3';\nconst dbVersion = 5;\n\n//DBHelper.debugRestaurantInfo(dbName, 'dbhelper-dbName');\n//DBHelper.debugRestaurantInfo(dbVersion, 'dbhelper-dbVersion');\n\n// https://github.com/jakearchibald/idb\n// https://developers.google.com/web/ilt/pwa/lab-indexeddb\n// https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore\n\nconst dbPromise = idb.open(dbName, dbVersion, function (upgradeDb) {\n    //DBHelper.debugRestaurantInfo(upgradeDb.oldVersion, 'dbhelper-upgradeDb-upgradeDb.oldVersion');\n\n    switch (upgradeDb.oldVersion) {\n        case 0:\n            let restaurantsObjectStore = upgradeDb.createObjectStore('restaurants', {\n                keyPath: 'restaurant_id',\n                autoIncrement: true\n            });\n            restaurantsObjectStore.createIndex('restaurant_id', 'restaurant_id', { unique: true });\n            restaurantsObjectStore.createIndex('name', 'name', { unique: false });\n            restaurantsObjectStore.createIndex('neighborhood', 'neighborhood', { unique: false });\n            restaurantsObjectStore.createIndex('photograph', 'photograph', { unique: false });\n            restaurantsObjectStore.createIndex('address', 'address', { unique: false });\n            restaurantsObjectStore.createIndex('lat', 'lat', { unique: false });\n            restaurantsObjectStore.createIndex('lng', 'lng', { unique: false });\n            restaurantsObjectStore.createIndex('cuisine_type', 'cuisine_type', { unique: false });\n            restaurantsObjectStore.createIndex('is_favorite', 'is_favorite', { unique: false });\n            restaurantsObjectStore.createIndex('createdAt', 'createdAt', { unique: false });\n            restaurantsObjectStore.createIndex('updatedAt', 'updatedAt', { unique: false });\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-upgradeDb-restaurantsObjectStore-setup');\n        case 1:\n\n            // autoIncrement example - https://developers.google.com/web/ilt/pwa/working-with-indexeddb\n            const operatingHoursObjectStore = upgradeDb.createObjectStore('operating_hours', {\n                keyPath: 'operating_hour_id',\n                autoIncrement: true\n            });\n            operatingHoursObjectStore.createIndex('operating_hour_id', 'operating_hour_id', { unique: true });\n            operatingHoursObjectStore.createIndex('restaurant_id', 'restaurant_id', { unique: false });\n            operatingHoursObjectStore.createIndex('day', 'day', { unique: false });\n            operatingHoursObjectStore.createIndex('hours', 'hours', { unique: false });\n            operatingHoursObjectStore.createIndex('createdAt', 'createdAt', { unique: false });\n            operatingHoursObjectStore.createIndex('updatedAt', 'updatedAt', { unique: false });\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-upgradeDb-operatingHoursObjectStore-setup');\n        case 2:\n\n            const reviewsObjectStore = upgradeDb.createObjectStore('reviews', {\n                keyPath: 'review_id',\n                autoIncrement: true\n            });\n            reviewsObjectStore.createIndex('review_id', 'review_id', { unique: true });\n            reviewsObjectStore.createIndex('restaurant_id', 'restaurant_id', { unique: false });\n            reviewsObjectStore.createIndex('name', 'name', { unique: false });\n            reviewsObjectStore.createIndex('rating', 'rating', { unique: false });\n            reviewsObjectStore.createIndex('comments', 'comments', { unique: false });\n            reviewsObjectStore.createIndex('createdAt', 'createdAt', { unique: false });\n            reviewsObjectStore.createIndex('updatedAt', 'updatedAt', { unique: false });\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-upgradeDb-reviewsObjectStore-setup');\n        case 3:\n\n            let pendingObjectStore = upgradeDb.createObjectStore('pending', {\n                keyPath: 'id',\n                autoIncrement: true\n            });\n            pendingObjectStore.createIndex('id', 'id', { unique: true });\n            pendingObjectStore.createIndex('url', 'url', { unique: false });\n            pendingObjectStore.createIndex('method', 'method', { unique: false });\n            pendingObjectStore.createIndex('headers', 'headers', { unique: false });\n            pendingObjectStore.createIndex('body', 'body', { unique: false });\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-upgradeDb-pendingObjectStore-setup');\n\n        //DBHelper.debugRestaurantInfo(addV1Data, 'dbhelper-upgradeDb-3-addV1Data');\n        case 4:\n        //DBHelper.debugRestaurantInfo(addV1Data, 'dbhelper-upgradeDb-4-addV1Data');\n    }\n}).catch(error => {\n    // Oops!. Got an error from server.\n    error.message = `Request failed createDB. Returned status of ${error.message}`;\n    throw error;\n});\n\n/**\n * Common database helper functions.\n */\nclass DBHelper {\n\n    constructor() {\n        this.restaurants = null;\n        this.restaurant = null;\n        this.reviews = null;\n        this.operating_hours = null;\n    }\n\n    static get staticCacheName() {\n        return staticCacheName;\n    }\n\n    static get contentImgsCache() {\n        return contentImgsCache;\n    }\n\n    static get allCaches() {\n        return allCaches;\n    }\n\n    static get dbPromise() {\n        return dbPromise;\n    }\n\n    static get dbName() {\n        return dbName;\n    }\n\n    static get dbVersion() {\n        return dbVersion;\n    }\n\n    /**\n     * Database URL.\n     * Change this to restaurants.json file location on your server.\n     */\n    static get DATABASE_URL() {\n        //console.log('dbhelper-DATABASE_URL()');\n        const port = 1337; // Change this to your server port\n        // michael.phan.gen suggestion:\n        // https://discussions.udacity.com/t/restaurant-reviews-app-stage-1/675923/8\n        //return `https://raw.githubusercontent.com/udacity/mws-restaurant-stage-1/master/data/restaurants.json`;\n\n        // return `http://localhost:${port}/data/restaurants.json`;\n        return `http://localhost:${port}`;\n    }\n\n    /**\n     * Database URL.\n     * Change this to restaurants.json file location on your server.\n     */\n    static get DATABASE_URL_RESTAURANTS() {\n        return DBHelper.DATABASE_URL + '/restaurants';\n    }\n\n    /**\n     * Database URL.\n     * Change this to restaurants.json file location on your server.\n     */\n    static get DATABASE_URL_REVIEWS() {\n        return DBHelper.DATABASE_URL + '/reviews';\n    }\n\n    /**\n     * Fetch all restaurants.\n     */\n    static fetchRestaurants(callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchRestaurants()');\n\n        return fetch(DBHelper.DATABASE_URL_RESTAURANTS, {\n            headers: { 'Content-Type': 'application/json' }\n        }).then(networkResponse => networkResponse.json()).then(restaurants => {\n            //DBHelper.debugRestaurantInfo(restaurants, 'dbhelper-fetchRestaurants()-3-restaurants');\n            if (restaurants) {\n                callback(null, restaurants);\n            } else callback('No results by fetch', null);\n            return;\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-fetchRestaurants()`;\n            callback(error.message, null);\n            return;\n        });\n    }\n\n    /**\n     * Fetch a restaurant by its ID.\n     */\n    static fetchRestaurantById(id, callback) {\n        DBHelper.debugRestaurantInfo('', 'dbhelper-fetchRestaurantById()');\n        let requestURL = DBHelper.DATABASE_URL_RESTAURANTS + '/' + id;\n        DBHelper.debugRestaurantInfo(requestURL, 'dbhelper-fetchRestaurantById()-requestURL');\n\n        // fetch restaurant with proper error handling.\n        return fetch(requestURL, {\n            headers: { 'Content-Type': 'application/json' }\n        }).then(networkResponse => networkResponse.json()).then(restaurant => {\n            DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-fetchRestaurantById()-restaurant');\n            if (restaurant) {\n                callback(null, restaurant);\n            } else callback('No results by fetch', null);\n            return;\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-fetchRestaurantById()`;\n            callback(error.message, null);\n            return;\n        });\n    }\n\n    /**\n     * Fetch restaurants by a cuisine type with proper error handling.\n     */\n    static fetchRestaurantByCuisine(cuisine, callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchRestaurantByCuisine()');\n        // Fetch all restaurants  with proper error handling\n        return new Promise((resolve, reject) => {\n            //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchRestaurantByCuisine-getAllRestaurants()-call');\n            DBHelper.getAllRestaurants((error, result) => {\n                //DBHelper.debugRestaurantInfo(error, 'dbhelper-fetchRestaurantByCuisine()-2-getAllRestaurants()-error');\n                //DBHelper.debugRestaurantInfo(result, 'dbhelper-fetchRestaurantByCuisine()-2-getAllRestaurants()-result');\n                if (error || !result) reject(false);\n                resolve(result); // resolve to restaurant object with valid restaurant.id value\n            });\n        }).then(restaurants => {\n            if (restaurants) {\n                // Filter restaurants to have only given cuisine type\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\n                callback(null, results);\n            } else callback('No restaurants found', null);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-fetchRestaurantByCuisine()`;\n            console.log(error.message);\n            callback(error, null);\n        });\n    }\n\n    /**\n     * Fetch restaurants by a neighborhood with proper error handling.\n     */\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchRestaurantByNeighborhood()');\n\n        // Fetch all restaurants  with proper error handling\n        return new Promise((resolve, reject) => {\n            //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchRestaurantByNeighborhood-getAllRestaurants()-call');\n            DBHelper.getAllRestaurants((error, result) => {\n                //DBHelper.debugRestaurantInfo(error, 'dbhelper-fetchRestaurantByNeighborhood()-2-getAllRestaurants()-error');\n                //DBHelper.debugRestaurantInfo(result, 'dbhelper-fetchRestaurantByNeighborhood()-2-getAllRestaurants()-result');\n                if (error || !result) reject(false);\n                resolve(result); // resolve to restaurant object with valid restaurant.id value\n            });\n        }).then(restaurants => {\n            // Filter restaurants to have only given neighborhood type\n            const results = restaurants.filter(r => r.neighborhood == neighborhood);\n            callback(null, results);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-fetchRestaurantByNeighborhood()`;\n            console.log(error.message);\n            callback(error, null);\n        });\n    }\n\n    /**\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\n     */\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchRestaurantByCuisineAndNeighborhood()');\n        //DBHelper.debugRestaurantInfo(cuisine, 'dbhelper-fetchRestaurantByCuisineAndNeighborhood()-input-cuisine');\n        //DBHelper.debugRestaurantInfo(neighborhood, 'dbhelper-fetchRestaurantByCuisineAndNeighborhood()-input-neighborhood');\n\n        // Fetch all restaurants  with proper error handling\n        return new Promise((resolve, reject) => {\n            //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchRestaurantByCuisineAndNeighborhood-1-1-getAllRestaurants()-call');\n            DBHelper.getAllRestaurants((error, result) => {\n                //DBHelper.debugRestaurantInfo(error, 'dbhelper-fetchRestaurantByCuisineAndNeighborhood()-1-2-getAllRestaurants()-error');\n                //DBHelper.debugRestaurantInfo(result, 'dbhelper-fetchRestaurantByCuisineAndNeighborhood()-1-2-getAllRestaurants()-result');\n                if (error || !result) reject(false);\n                resolve(result); // resolve to restaurant object with valid restaurant.id value\n            });\n        }).then(results => {\n            //DBHelper.debugRestaurantInfo(cuisine, 'dbhelper-fetchRestaurantByCuisineAndNeighborhood()-2-cuisine');\n            //DBHelper.debugRestaurantInfo(neighborhood, 'dbhelper-fetchRestaurantByCuisineAndNeighborhood()-2-neighborhood');\n            //DBHelper.debugRestaurantInfo(results, 'dbhelper-fetchRestaurantByCuisineAndNeighborhood()-2-results');\n            if (results) {\n                // Filter restaurants to have only given cuisine type or neighborhood type\n\n                if (cuisine != 'all') {\n                    // filter by cuisine\n                    results = results.filter(r => r.cuisine_type == cuisine);\n                }\n                if (neighborhood != 'all') {\n                    // filter by neighborhood\n                    results = results.filter(r => r.neighborhood == neighborhood);\n                }\n                callback(null, results);\n            } else callback('No results', null);\n            return;\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            if (typeof error === 'boolean') {\n                callback('Error', null);\n            } else {\n                error.message = `Request failed. Returned status of ${error.message} - dbhelper-fetchCuisines()`;\n                console.log(error.message);\n                callback(error, null);\n            }\n        });\n    }\n\n    /**\n     * Fetch all neighborhoods with proper error handling.\n     */\n    static fetchNeighborhoods(callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchNeighborhoods()');\n\n        // Fetch all restaurants  with proper error handling\n        return new Promise((resolve, reject) => {\n            //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchNeighborhoods-getAllRestaurants()-call');\n            DBHelper.getAllRestaurants((error, result) => {\n                //DBHelper.debugRestaurantInfo(error, 'dbhelper-fetchNeighborhoods()-2-getAllRestaurants()-error');\n                //DBHelper.debugRestaurantInfo(result, 'dbhelper-fetchNeighborhoods()-2-getAllRestaurants()-result');\n                if (error || !result) reject(false);\n                resolve(result); // resolve to restaurant object with valid restaurant.id value\n            });\n        }).then(restaurants => {\n            //DBHelper.debugRestaurantInfo(restaurants, 'dbhelper-fetchNeighborhoods()-3-restaurants');\n            if (restaurants) {\n                // Get all neighborhoods from all restaurants\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\n                // Remove duplicates from neighborhoods\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\n                callback(null, uniqueNeighborhoods);\n            } else callback('No neighborhoods restaurants', null);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            if (typeof error === 'boolean') {\n                callback('Error', null);\n            } else {\n                error.message = `Request failed. Returned status of ${error.message} - dbhelper-fetchCuisines()`;\n                console.log(error.message);\n                callback(error, null);\n            }\n        });\n    }\n\n    /**\n     * Fetch all cuisines with proper error handling.\n     */\n    static fetchCuisines(callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchCuisines()');\n\n        // Fetch all restaurants  with proper error handling\n        return new Promise((resolve, reject) => {\n            //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchCuisines-getAllRestaurants()-call');\n            DBHelper.getAllRestaurants((error, result) => {\n                //DBHelper.debugRestaurantInfo(error, 'dbhelper-fetchCuisines()-2-getAllRestaurants()-error');\n                //DBHelper.debugRestaurantInfo(result, 'dbhelper-fetchCuisines()-2-getAllRestaurants()-result');\n                if (error || !result) reject(false);\n                resolve(result); // resolve to restaurant object with valid restaurant.id value\n            });\n        }).then(restaurants => {\n            //DBHelper.debugRestaurantInfo(restaurants, 'dbhelper-fetchCuisines()-3-restaurants');\n            if (restaurants && restaurants.length > 0) {\n                // Get all cuisines from all restaurants\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\n                // Remove duplicates from cuisines\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\n                callback(null, uniqueCuisines);\n            } else callback('No restaurants', null);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            if (typeof error === 'boolean') {\n                callback('Error', null);\n            } else {\n                error.message = `Request failed. Returned status of ${error.message} - dbhelper-fetchCuisines()`;\n                console.log(error.message);\n                callback(error, null);\n            }\n        });\n    }\n\n    /**\n     * Restaurant page URL.\n     */\n    static urlForRestaurant(restaurant) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-urlForRestaurant()');\n        //DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-urlForRestaurant()-restaurant');\n        return `./restaurant.html?id=${restaurant.id}`;\n    }\n\n    /**\n     * Restaurant image URL.\n     */\n    static imageUrlForRestaurant(restaurant) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-imageUrlForRestaurant()');\n        //DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-imageUrlForRestaurant()-restaurant');\n        if (restaurant.photograph) {\n            return `img/${restaurant.photograph}.jpg`;\n        }\n    }\n\n    /**\n     * Map marker for a restaurant.\n     */\n    static mapMarkerForRestaurant(restaurant, map) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-mapMarkerForRestaurant()');\n        //DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-mapMarkerForRestaurant()-restaurant');\n\n        let loc = {};\n        if (restaurant.latlng) loc = restaurant.latlng;else if (restaurant.lat) loc = { lat: restaurant.lat, lng: restaurant.lng };\n        if (!loc || typeof loc === 'undefined' || loc.length === 0) {\n            loc = {\n                lat: 40.722216,\n                lng: -73.987501\n            };\n        }\n        //DBHelper.debugRestaurantInfo(loc, 'dbhelper-mapMarkerForRestaurant()-loc');\n\n        const marker = new google.maps.Marker({\n            position: loc,\n            title: restaurant.name,\n            url: DBHelper.urlForRestaurant(restaurant),\n            map: map,\n            animation: google.maps.Animation.DROP\n        });\n        return marker;\n    }\n\n    /**\n     * get all Db .\n     */\n    static isIndexDbPopulated(callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-isIndexDbPopulated()');\n\n        return dbPromise.then(db => {\n            const txRestaurants = db.transaction('restaurants', 'readonly');\n            const restaurantsStore = txRestaurants.objectStore('restaurants');\n            return restaurantsStore.getKey(1);\n        }).then(restaurant => {\n            return typeof restaurant !== 'undefined' && restaurant ? callback(null, true) : callback(null, false);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-isIndexDbPopulated()`;\n            console.log(error.message);\n            callback(false, null);\n        });\n    }\n\n    /**\n     * get all Db .\n     */\n    static getAllIndexDbRestaurants(callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-getAllIndexDbRestaurants()');\n\n        return dbPromise.then(db => {\n            const txRestaurants = db.transaction('restaurants', 'readonly');\n            const restaurantsStore = txRestaurants.objectStore('restaurants');\n            const restaurantsObj = restaurantsStore.getAllKeys();\n            //DBHelper.debugRestaurantInfo(restaurantsObj, 'dbhelper-getAllRestaurants()-1-1-restaurantsObj');\n\n            if (typeof restaurantsObj.map !== 'function') return false;\n\n            let restaurants;\n            restaurants = restaurantsObj.map(restaurant => {\n                //DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-getAllIndexDbRestaurants()-1-2-restaurant');\n                return new Promise((resolve, reject) => {\n                    DBHelper.getIndexDbRestaurantById(restaurant.restaurant_id, (error, result) => {\n                        //DBHelper.debugRestaurantInfo(error, 'dbhelper-getAllIndexDbRestaurants()-1-3-getIndexDbRestaurantById()-error');\n                        //DBHelper.debugRestaurantInfo(result, 'dbhelper-getAllIndexDbRestaurants()-1-3-getIndexDbRestaurantById()-result');\n                        if (error || !result) reject(false);\n                        resolve(result);\n                    });\n                }).then(restaurant, result => {\n                    //DBHelper.debugRestaurantInfo(result, 'dbhelper-getAllIndexDbRestaurants()-1-4-result');\n                    //DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-getAllIndexDbRestaurants()-1-4-restaurant');\n                    if (result) return result;else return restaurant;\n                }).catch(error => {\n                    // Oops!. Got an error from server.\n                    error.message = `Request failed. Returned status of ${error.message} - dbhelper-getAllIndexDbRestaurants()-catch`;\n                    console.log(error.message);\n                    callback(error, null);\n                });\n            });\n            //DBHelper.debugRestaurantInfo(restaurants, 'dbhelper-getAllIndexDbRestaurants()-1-4-restaurants');\n            return restaurants;\n        }).then(restaurants => {\n            if (restaurants) {\n                callback(null, restaurants);\n            } else {\n                callback('No results in idb', null);\n            }\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-getAllIndexDbRestaurants()-catch`;\n            console.log(error.message);\n            callback(error, null);\n        });\n    }\n\n    /**\n     * Fetch review by ID.\n     */\n    static getIndexDbRestaurantById(restaurant_id, callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-getIndexDbRestaurantById()');\n        //DBHelper.debugRestaurantInfo(restaurant_id, 'dbhelper-getIndexDbRestaurantById()-restaurant_id');\n\n        if (!restaurant_id) {\n            const error_message = `Missing restaurant id - dbhelper-getIndexDbRestaurantById()`;\n            callback(error_message, null);\n            return;\n        }\n\n        return dbPromise.then(db => {\n\n            const txRestaurants = db.transaction('restaurants', 'readonly');\n            let restaurantsStore = txRestaurants.objectStore('restaurants');\n\n            return restaurantsStore.get(parseInt(restaurant_id)).then(restaurant => {\n                //DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-getIndexDbRestaurantById()-1-2-restaurantsStore.get()');\n                return restaurant;\n            });\n        }).then(restaurantRow => {\n            if (!restaurantRow) {\n                const error_message = `No restaurant info found in idb - dbhelper-getIndexDbRestaurantById()-second`;\n                callback(error_message, null);\n                return;\n            }\n            //DBHelper.debugRestaurantInfo(restaurantRow, 'dbhelper-getIndexDbRestaurantById()-1-2-restaurantRow');\n\n            // set default properites\n            let restaurant = {};\n            restaurant.restaurant_id = restaurantRow.restaurant_id;\n            restaurant.name = restaurantRow.name;\n            restaurant.address = restaurantRow.address;\n            restaurant.photograph = restaurantRow.photograph;\n            restaurant.neighborhood = restaurantRow.neighborhood;\n            restaurant.cuisine_type = restaurantRow.cuisine_type;\n            restaurant.is_favorite = restaurantRow.is_favorite;\n            restaurant.lat = restaurantRow.lat ? restaurantRow.lat : '';\n            restaurant.lng = restaurantRow.lng ? restaurantRow.lng : '';\n            restaurant.createdAt = restaurantRow.createdAt;\n            restaurant.updatedAt = restaurantRow.updatedAt;\n\n            //DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-getIndexDbRestaurantById()-1-2-restaurant');\n\n            return restaurant;\n        }).then(restaurant => {\n            if (!restaurant) {\n                const error_message = `No restaurant info found in idb - dbhelper-getIndexDbRestaurantById()-fifth`;\n                callback(error_message, null);\n                return;\n            }\n\n            //DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-getIndexDbRestaurantById()-5-restaurant');\n\n            callback(null, restaurant);\n            return;\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-getIndexDbRestaurantById()-catch`;\n            console.log(error.message);\n            callback(error, null);\n            return;\n        });\n    }\n\n    /**\n     * update a restaurant by its ID.\n     */\n    static addUpdateRestaurantById(restaurant, callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-addUpdateRestaurantById()');\n\n        let local_error = null;\n        let cache_error = null;\n        let remote_error = null;\n\n        dbPromise.then(() => {\n            DBHelper.addUpdateLocalRestaurantById(restaurant, (error, result) => {\n                local_error = error;\n            });\n        }).then(() => {\n            DBHelper.addUpdateLocalRestaurantOperationHoursById(restaurant, (error, result) => {\n                cache_error = error;\n            });\n        }).then(() => {\n            DBHelper.addUpdateCacheRestaurantById(restaurant.restaurant_id, (error, result) => {\n                cache_error = error;\n            });\n        }).then(() => {\n            DBHelper.addUpdateRemoteRestaurantById(restaurant, (error, result) => {\n                remote_error = error;\n            });\n        }).then(() => {\n            //DBHelper.debugRestaurantInfo(local_error, 'dbhelper-addUpdateRestaurantById()-local_error');\n            //DBHelper.debugRestaurantInfo(cache_error, 'dbhelper-addUpdateRestaurantById()-cache_error');\n            //DBHelper.debugRestaurantInfo(remote_error, 'dbhelper-addUpdateRestaurantById()-remote_error');\n\n            if (local_error || cache_error || remote_error) {\n                callback(local_error || cache_error || remote_error, null);\n                return;\n            }\n            callback(null, restaurant);\n            return;\n        });\n    }\n\n    /**\n     * update a restaurant by its ID.\n     */\n    static addUpdateLocalRestaurantById(restaurant, callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-addUpdateLocalRestaurantById()');\n        //DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-addUpdateLocalRestaurantById()-restaurant');\n\n        return dbPromise.then(db => {\n            const txRestaurants = db.transaction('restaurants', 'readwrite');\n            let restaurantsStore = txRestaurants.objectStore('restaurants');\n\n            return restaurantsStore.get(restaurant.id).then(item => {\n                let restaurantObj = {\n                    restaurant_id: restaurant.id,\n                    name: restaurant.name,\n                    neighborhood: restaurant.neighborhood,\n                    photograph: restaurant.photograph,\n                    address: restaurant.address,\n                    lat: restaurant.latlng.lat,\n                    lng: restaurant.latlng.lng,\n                    cuisine_type: restaurant.cuisine_type,\n                    is_favorite: restaurant.is_favorite,\n                    createdAt: restaurant.createdAt,\n                    updatedAt: restaurant.updatedAt\n                };\n                if (!item) {\n                    restaurantsStore.add(restaurantObj);\n                } else {\n                    restaurantsStore.put(restaurantObj);\n                }\n                txRestaurants.complete;\n            }).then(() => {\n                callback(null, true);\n                return;\n            });\n        }).catch(error => {\n            callback('Error', null);\n            return;\n        });\n    }\n\n    /**\n     * update a restaurant by its ID.\n     */\n    static addUpdateLocalRestaurantOperationHoursById(restaurant, callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-addUpdateLocalRestaurantOperationHoursById()');\n        //DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-addUpdateLocalRestaurantOperationHoursById()-restaurant');\n\n        return dbPromise.then(db => {\n\n            const txOperatingHours = db.transaction('operating_hours', 'readwrite');\n            let operatingHoursStore = txOperatingHours.objectStore('operating_hours');\n\n            // add delete logic here to improve application\n            // delete all to add all, this will clear any deleted items as well\n\n            return operatingHoursStore.get(1).then(() => {\n                let operating_hours = restaurant.operating_hours;\n                //DBHelper.debugRestaurantInfo(operating_hours, 'dbhelper-addUpdateLocalRestaurantOperationHoursById()-operating_hours');\n\n                for (const indx in operating_hours) {\n                    operatingHoursStore.add({\n                        restaurant_id: restaurant.id,\n                        day: indx,\n                        hours: operating_hours[indx],\n                        createdAt: restaurant.createdAt,\n                        updatedAt: restaurant.updatedAt\n                    });\n                }\n                txOperatingHours.complete;\n                //DBHelper.debugRestaurantInfo('', 'dbhelper-addUpdateLocalRestaurantOperationHoursById()-txOperatingHours.complete');\n            }).then(() => {\n                callback(null, true);\n            });\n        }).catch(error => {\n            callback(error + 'dbhelper-addUpdateLocalRestaurantOperationHoursById()-catch', null);\n        });\n    }\n\n    /**\n     * update a restaurant by its ID.\n     */\n    static addUpdateCacheRestaurantById(restaurant_id, callback) {\n        DBHelper.debugRestaurantInfo('', 'dbhelper-addUpdateCacheRestaurantById()');\n        DBHelper.debugRestaurantInfo(restaurant_id, 'dbhelper-addUpdateCacheRestaurantById()-restaurant_id');\n\n        return caches.open(staticCacheName).then(function (cache) {\n            DBHelper.debugRestaurantInfo('', 'dbhelper-addUpdateCacheRestaurantById()-Deleting index file cache');\n            cache.delete(new Request('/')).catch(error => {\n                return error;\n            });\n            cache.delete(new Request('/restaurant.html?id=' + restaurant_id)).catch(error => {\n                return error;\n            });\n            return cache;\n        }).then(function () {\n            DBHelper.debugRestaurantInfo('', 'dbhelper-addUpdateCacheRestaurantById()-Adding index file cache');\n            return fetch(new Request('/')).then(function () {\n                DBHelper.debugRestaurantInfo('', 'dbhelper-addUpdateCacheRestaurantById()-Adding restaurant file cache');\n                return fetch(new Request('/restaurant.html?id=' + restaurant_id));\n            }).catch(error => {\n                return error;\n            });\n        }).then(function () {\n            callback(null, true);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message}`;\n            callback(error, null);\n        });\n    }\n\n    /**\n     * update a restaurant by its ID.\n     */\n    static addUpdateRemoteRestaurantById(restaurant, callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-addUpdateRemoteRestaurantById()');\n        //DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-addUpdateRemoteRestaurantById()-restaurant');\n\n        let requestURL = DBHelper.DATABASE_URL_RESTAURANTS + '/' + restaurant.restaurant_id;\n        //DBHelper.debugRestaurantInfo(requestURL, 'dbhelper-addUpdateRemoteRestaurantById()-requestURL');\n\n        const requestMethod = 'PUT';\n        const requestBody = JSON.stringify(restaurant);\n        const requestHeaders = {\n            'Content-Type': 'application/json'\n        };\n\n        return fetch(requestURL, {\n            method: requestMethod, body: requestBody, headers: requestHeaders\n        }).catch(error => {\n\n            if (!navigator.onLine) {\n\n                return dbPromise.then(function (db) {\n\n                    const txPending = db.transaction('pending', 'readwrite');\n                    let pendingStore = txPending.objectStore('pending');\n\n                    const pending = {\n                        id: Date.now(),\n                        url: requestURL,\n                        method: requestMethod,\n                        body: requestBody,\n                        headers: requestHeaders\n                    };\n                    //DBHelper.debugRestaurantInfo(pending, 'dbhelper-addUpdateRemoteRestaurantById()-1-pending');\n\n                    pendingStore.put(pending);\n                    txPending.complete;\n                    return true;\n                }).then(result => {\n                    callback(null, result);\n                });\n            } else {\n\n                // Oops!. Got an error from server.\n                error.message = `Request failed. Returned status of ${error.message}`;\n                callback(error, null);\n            }\n        });\n    }\n\n    /**\n     * Fetch all reviews.\n     */\n    static fetchReviewsByRestaurantId(restaurant_id, callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchReviewsByRestaurantId()');\n        //DBHelper.debugRestaurantInfo(restaurant_id, 'dbhelper-fetchReviewsByRestaurantId()-restaurant_id');\n\n        const requestURL = DBHelper.DATABASE_URL_REVIEWS + '?restaurant_id=' + restaurant_id;\n        //DBHelper.debugRestaurantInfo(requestURL, 'dbhelper-fetchReviewsByRestaurantId()-requestURL');\n\n        return fetch(requestURL).then(response => response.json()).then(reviews => {\n            //DBHelper.debugRestaurantInfo(reviews, 'dbhelper-fetchReviewsByRestaurantId()-1-reviews');\n            return reviews.map(review => {\n                return new Promise((resolve, reject) => {\n                    // add or update review in cache\n                    //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchReviewsByRestaurantId()-addUpdateLocalReviewById()-call');\n                    DBHelper.addUpdateLocalReviewById(review, (error, result) => {\n                        //DBHelper.debugRestaurantInfo(error, 'dbhelper-fetchReviewsByRestaurantId()-2-addUpdateLocalReviewById()-error');\n                        //DBHelper.debugRestaurantInfo(result, 'dbhelper-fetchReviewsByRestaurantId()-2-addUpdateLocalReviewById()-result');\n                        resolve(true);\n                    });\n                }).then(() => {\n                    new Promise((resolve, reject) => {\n                        //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchReviewsByRestaurantId()-addUpdateCacheReviewById()-call');\n                        DBHelper.addUpdateCacheReviewById(review, (error, result) => {\n                            //DBHelper.debugRestaurantInfo(error, 'dbhelper-fetchReviewsByRestaurantId()-3-addUpdateCacheReviewById()-error');\n                            //DBHelper.debugRestaurantInfo(result, 'dbhelper-fetchReviewsByRestaurantId()-3-addUpdateCacheReviewById()-result');\n                            resolve(true);\n                        });\n                    });\n                }).then(review, () => {\n                    return review;\n                });\n            });\n        }).then(reviews => {\n            //DBHelper.debugRestaurantInfo(reviews, 'dbhelper-fetchReviewsByRestaurantId()-4-reviews');\n            callback(null, reviews);\n            return;\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-fetchReviewsByRestaurantId()`;\n            console.log(error.message);\n            callback(error, null);\n        });\n    }\n\n    /**\n     * get all restaurants.\n     */\n    static getAllRestaurants(callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-getAllRestaurants()');\n\n        return new Promise((resolve, reject) => {\n            resolve(true);\n        }).then(result => {\n            //DBHelper.debugRestaurantInfo(result, 'dbhelper-getAllRestaurants()-2-1-result');\n            //DBHelper.debugRestaurantInfo(this.restaurants, 'dbhelper-getAllRestaurants()-2-1-this.restaurants');\n\n            return new Promise((resolve2, reject2) => {\n\n                DBHelper.getAllIndexDbRestaurants((error, result) => {\n                    //DBHelper.debugRestaurantInfo(error, 'dbhelper-getAllRestaurants()-2-3-getAllIndexDbRestaurants()-error');\n                    //DBHelper.debugRestaurantInfo(result, 'dbhelper-getAllRestaurants()-2-3-getAllIndexDbRestaurants()-result');\n                    if (error || !result) resolve2(false);\n                    resolve2(result);\n                });\n            }).then(result => {\n                //DBHelper.debugRestaurantInfo(result, 'dbhelper-getAllRestaurants()-2-4-getAllIndexDbRestaurants()-result');\n                return result;\n            }).catch(error => {\n                // Oops!. Got an error from server.\n                // error.message = (`Request failed. Returned status of ${error.message} - dbhelper-getAllIndexDbRestaurants()`);\n                // callback(error.message, null);\n                //DBHelper.debugRestaurantInfo(error, 'dbhelper-getAllRestaurants()-2-getAllIndexDbRestaurants()-catch');\n                return false;\n            });\n        }).then(result => {\n            //DBHelper.debugRestaurantInfo(result, 'dbhelper-getAllRestaurants()-3-1-result');\n            //DBHelper.debugRestaurantInfo(this.restaurants, 'dbhelper-getAllRestaurants()-3-1-this.restaurants');\n\n            if (this.restaurants && this.restaurants.length > 0) return this.restaurants;\n\n            return new Promise((resolve2, reject2) => {\n                DBHelper.fetchRestaurants((error, result) => {\n                    //DBHelper.debugRestaurantInfo(error, 'dbhelper-getAllRestaurants()-3-3-fetchRestaurants()-error');\n                    //DBHelper.debugRestaurantInfo(result, 'dbhelper-getAllRestaurants()-3-3-fetchRestaurants()-result');\n                    if (error || !result) resolve2(false);\n                    resolve2(result);\n                });\n            }).catch(error => {\n                // Oops!. Got an error from server.\n                // error.message = (`Request failed. Returned status of ${error.message} - dbhelper-fetchRestaurants()`);\n                // callback(error.message, null);\n                // return;\n                //DBHelper.debugRestaurantInfo(error, 'dbhelper-getAllRestaurants()-3-fetchRestaurants()-catch');\n                return error;\n            });\n        }).then(restaurants => {\n            //DBHelper.debugRestaurantInfo(restaurants, 'dbhelper-getAllRestaurants()-4-1-restaurants');\n            //DBHelper.debugRestaurantInfo(this.restaurants, 'dbhelper-getAllRestaurants()-4-1-this.restaurants');\n            if (!restaurants || restaurants.length === 0) return this.restaurants;\n\n            return new Promise((resolve2, reject2) => {\n                //DBHelper.debugRestaurantInfo(resolveResult, 'dbhelper-getAllRestaurants()-4-2-resolveResult');\n                //DBHelper.debugRestaurantInfo(restaurants, 'dbhelper-getAllRestaurants()-4-2-restaurants');\n\n                restaurants.map(restaurant => {\n                    //DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-getAllRestaurants()-4-3-restaurant');\n\n                    const restaurant_id = restaurant.id ? restaurant.id : restaurant.restaurant_id ? restaurant.restaurant_id : 0;\n                    //DBHelper.debugRestaurantInfo(restaurant_id, 'dbhelper-getAllRestaurants()-4-3-restaurant_id');\n                    if (!restaurant_id) return restaurant;\n\n                    return new Promise((resolve4, reject4) => {\n                        //DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-getAllRestaurants()-4-4-1-restaurant');\n                        //DBHelper.debugRestaurantInfo('', 'dbhelper-getAllRestaurants()-4-4-appendRestaurantProperties()-call');\n                        DBHelper.appendRestaurantProperties(restaurant, (error, result) => {\n                            //DBHelper.debugRestaurantInfo(error, 'dbhelper-getAllRestaurants()-4-4-2-appendRestaurantProperties()-error');\n                            //DBHelper.debugRestaurantInfo(result, 'dbhelper-getAllRestaurants()-4-4-2-appendRestaurantProperties()-result');\n                            if (error || !result) resolve4(restaurant);\n                            resolve4(result);\n                        });\n                    }).then(restaurant => {\n                        //DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-getAllRestaurants()-4-4-3-restaurant');\n                        return restaurant;\n                    }).catch(error => {\n                        // // Oops!. Got an error from server.\n                        // error.message = (`Request failed. Returned status of ${error.message} - dbhelper-appendRestaurantProperties()`);\n                        // callback(error.message, null);\n                        // return;\n                        //DBHelper.debugRestaurantInfo(error, 'dbhelper-getAllRestaurants()-4-appendRestaurantProperties()-catch');\n                        return error;\n                    });\n                    //DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-getAllRestaurants()-4-5-restaurant');\n                    //return restaurant;\n                });\n                resolve2(restaurants);\n            }).then(restaurants => {\n                //DBHelper.debugRestaurantInfo(restaurants, 'dbhelper-getAllRestaurants()-4-6-restaurants');\n                return restaurants;\n            }).catch(error => {\n                // // Oops!. Got an error from server.\n                // error.message = (`Request failed. Returned status of ${error.message} - dbhelper-appendRestaurantProperties()`);\n                // callback(error.message, null);\n                // return;\n                //DBHelper.debugRestaurantInfo(error, 'dbhelper-getAllRestaurants()-4-new Promise()-catch');\n                return error;\n            });\n        }).then(result => {\n            //DBHelper.debugRestaurantInfo(result, 'dbhelper-getAllRestaurants()-6-1-result');\n\n            if (result && typeof result.then !== 'function' && result.length > 0) {\n                // update data\n                this.restaurants = result;\n                //DBHelper.debugRestaurantInfo(this.restaurants, 'dbhelper-getAllRestaurants()-6-1-this.restaurants');\n                callback(null, this.restaurants);\n            } else callback('No restaurants', null);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-getAllRestaurants - catch`;\n            callback(error.message, null);\n        });\n    }\n\n    /**\n     * get restaurant by ID.\n     */\n    static getRestaurantById(restaurant_id, callback) {\n        DBHelper.debugRestaurantInfo('', 'dbhelper-getRestaurantById()');\n        DBHelper.debugRestaurantInfo(restaurant_id, 'dbhelper-getRestaurantById()-restaurant_id');\n\n        let restaurant;\n        if (this.restaurants) {\n            restaurant = this.restaurants.filter(r => r.id == restaurant_id);\n        }\n        DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-getRestaurantById()-1-this.restaurant.filter');\n\n        return new Promise((resolve, reject) => {\n            resolve(true);\n        }).then(() => {\n            DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-getRestaurantById()-2-1-restaurant');\n            if (restaurant) return restaurant;\n\n            return new Promise((resolve2, reject2) => {\n                DBHelper.debugRestaurantInfo('', 'dbhelper-getRestaurantById()-2-2-getIndexDbRestaurantById()-call');\n                DBHelper.getIndexDbRestaurantById(restaurant_id, (error, result) => {\n                    DBHelper.debugRestaurantInfo(error, 'dbhelper-getRestaurantById()-2-3-getIndexDbRestaurantById()-error');\n                    DBHelper.debugRestaurantInfo(result, 'dbhelper-getRestaurantById()-2-3-getIndexDbRestaurantById()-result');\n                    if (error || !result) resolve2(false);\n\n                    if (result) this.restaurant = result;\n                    resolve2(result);\n                });\n            });\n        }).then(restaurant => {\n            DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-getRestaurantById()-3-1-restaurant');\n            if (restaurant) return restaurant;\n\n            return new Promise((resolve3, reject3) => {\n                DBHelper.debugRestaurantInfo('', 'dbhelper-getRestaurantById()-3-2-fetchRestaurantById()-call');\n                DBHelper.fetchRestaurantById(restaurant_id, (error, result) => {\n                    DBHelper.debugRestaurantInfo(error, 'dbhelper-getRestaurantById()-3-3-fetchRestaurantById()-error');\n                    DBHelper.debugRestaurantInfo(result, 'dbhelper-getRestaurantById()-3-3-fetchRestaurantById()-result');\n                    if (error || !result) reject3(error);\n                    resolve3(result);\n                });\n            }).then(restaurant => {\n                DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-getRestaurantById()-4-1-restaurant');\n                if (restaurant) {\n                    return new Promise((resolve4, reject4) => {\n                        DBHelper.debugRestaurantInfo('', 'dbhelper-getRestaurantById()-4-2-addUpdateCacheRestaurantById()-call');\n\n                        DBHelper.addUpdateCacheRestaurantById(restaurant.restaurant_id, (error, result) => {\n                            DBHelper.debugRestaurantInfo(error, 'dbhelper-getRestaurantById()-4-3-fetchRestaurantById()-error');\n                            DBHelper.debugRestaurantInfo(result, 'dbhelper-getRestaurantById()-4-3-fetchRestaurantById()-result');\n                            if (error || !result) resolve4(restaurant);\n                            resolve4(restaurant);\n                        });\n                    });\n                }\n                return restaurant;\n            }).catch(error => {\n                console.log('Error=' + error.message);\n                return false;\n            });\n        }).then(restaurant => {\n            DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-getRestaurantById()-5-1-restaurants');\n\n            const restaurant_id = restaurant.id ? restaurant.id : restaurant.restaurant_id ? restaurant.restaurant_id : 0;\n            DBHelper.debugRestaurantInfo(restaurant_id, 'dbhelper-getRestaurantById()-5-2-restaurant_id');\n\n            if (!restaurant_id) return restaurant;\n\n            //DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-getRestaurantById()-5-1-restaurant');\n\n            return new Promise((resolve4, reject4) => {\n                DBHelper.debugRestaurantInfo('', 'dbhelper-getRestaurantById()-5-2-appendRestaurantProperties()-call');\n                DBHelper.appendRestaurantProperties(restaurant, (error, result) => {\n                    DBHelper.debugRestaurantInfo(error, 'dbhelper-getRestaurantById()-5-3-appendRestaurantProperties()-error');\n                    DBHelper.debugRestaurantInfo(result, 'dbhelper-getRestaurantById()-5-3-appendRestaurantProperties()-result');\n                    if (error || !result) resolve4(restaurant);\n                    resolve4(result);\n                });\n            }).then(restaurant => {\n                DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-getRestaurantById()-5-4-restaurant');\n                return restaurant;\n            }).catch(error => {\n                // // Oops!. Got an error from server.\n                // error.message = (`Request failed. Returned status of ${error.message} - dbhelper-appendRestaurantProperties()`);\n                // callback(error.message, null);\n                // return;\n                //DBHelper.debugRestaurantInfo(error, 'dbhelper-getRestaurantById()-4-appendRestaurantProperties()-catch');\n                return error;\n            });\n        }).then(restaurant => {\n            DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-getRestaurantById()-6-restaurant');\n            // set/update current restaurant to this.restaurant variable\n            if (restaurant) this.restaurant = restaurant;\n\n            return restaurant;\n        }).then(restaurant => {\n            //DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-getRestaurantById()-7-restaurant');\n            callback(null, restaurant);\n            return;\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-getRestaurantById()`;\n            callback(error.message, null);\n            return;\n        });\n    }\n\n    static appendRestaurantProperties(restaurant, callback) {\n        DBHelper.debugRestaurantInfo('', 'dbhelper-appendRestaurantProperties()');\n        //DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-appendRestaurantProperties()-input-restaurant');\n        DBHelper.debugRestaurantInfo(restaurant.operating_hours, 'dbhelper-appendRestaurantProperties()-input-restaurant.operating_hours');\n        DBHelper.debugRestaurantInfo(restaurant.reviews, 'dbhelper-appendRestaurantProperties()-input-restaurant.reviews');\n\n        if (restaurant && restaurant.operating_hours && restaurant.operating_hours.length && restaurant.operating_hours.length > 0 && restaurant.reviews && restaurant.reviews.length && restaurant.reviews.length > 0) {\n            DBHelper.debugRestaurantInfo('', 'dbhelper-appendRestaurantProperties()-1-1-object already has operating_hours and reviews properties');\n            callback(null, restaurant);\n            return;\n        }\n\n        const restaurant_id = restaurant.id ? restaurant.id : restaurant.restaurant_id ? restaurant.restaurant_id : 0;\n        DBHelper.debugRestaurantInfo(restaurant_id, 'dbhelper-appendRestaurantProperties()-2-1-restaurant_id');\n\n        new Promise((resolve, reject) => {\n            resolve(true);\n        }).then(result => {\n            if (restaurant && restaurant.operating_hours && restaurant.operating_hours.length && restaurant.operating_hours.length > 0) {\n                DBHelper.debugRestaurantInfo('', 'dbhelper-appendRestaurantProperties()-2-1-object already has operating_hours properties');\n                return restaurant;\n            }\n\n            return new Promise((resolve2, reject2) => {\n                DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-appendRestaurantProperties()-2-1-restaurant');\n\n                DBHelper.debugRestaurantInfo('', 'dbhelper-appendRestaurantProperties()-2-2-getRestaurantOperatingHours()-call');\n                DBHelper.getRestaurantOperatingHours(restaurant_id, (error, result) => {\n                    DBHelper.debugRestaurantInfo(error, 'dbhelper-appendRestaurantProperties()-2-3-getRestaurantOperatingHours()-error');\n                    DBHelper.debugRestaurantInfo(result, 'dbhelper-appendRestaurantProperties()-2-3-getRestaurantOperatingHours()-result');\n                    if (error || !result) resolve2(false);\n                    resolve2(result);\n                });\n            }).then(result => {\n                DBHelper.debugRestaurantInfo(result, 'dbhelper-appendRestaurantProperties()-3-1-result');\n                if (result && result.length && result.length > 0) {\n                    restaurant.operating_hours = result;\n                }\n                DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-appendRestaurantProperties()-3-2-restaurant');\n                return restaurant;\n            }).catch(error => {\n                // Oops!. Got an error from server.\n                const error_message = `Request failed. Returned status of ${error.message} - dbhelper-appendRestaurantProperties()-3-catch`;\n                console.log(error_message);\n                return restaurant;\n            });\n        }).then(restaurant => {\n            DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-appendRestaurantProperties()-4-1-restaurant');\n\n            if (restaurant && restaurant.reviews && restaurant.reviews.length && restaurant.reviews.length > 0) {\n                DBHelper.debugRestaurantInfo('', 'dbhelper-appendRestaurantProperties()-4-1-object already has reviews properties');\n                return restaurant;\n            }\n\n            return new Promise((resolve3, reject3) => {\n                DBHelper.debugRestaurantInfo('', 'dbhelper-appendRestaurantProperties()-4-2-getReviewsByRestaurantId()-call');\n                DBHelper.getReviewsByRestaurantId(restaurant_id, (error, result) => {\n                    DBHelper.debugRestaurantInfo(error, 'dbhelper-appendRestaurantProperties()-4-3-getReviewsByRestaurantId()-error');\n                    DBHelper.debugRestaurantInfo(result, 'dbhelper-appendRestaurantProperties()-4-3-getReviewsByRestaurantId()-result');\n                    if (error || !result) reject3(false);\n                    resolve3(result);\n                });\n            }).then(result => {\n                DBHelper.debugRestaurantInfo(result, 'dbhelper-appendRestaurantProperties()-4-3-result');\n                if (result && result.length && result.length > 0) {\n                    restaurant.reviews = result;\n                }\n                DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-appendRestaurantProperties()-4-4-restaurant');\n                return restaurant;\n            }).catch(error => {\n                // Oops!. Got an error from server.\n                const error_message = `Request failed. Returned status of ${error.message} - dbhelper-appendRestaurantProperties()-4-catch`;\n                console.log(error_message);\n                return restaurant;\n            });\n        }).then(restaurant => {\n\n            if (restaurant) {\n                DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-appendRestaurantProperties()-5-1-restaurant');\n\n                // add missing properties in fetch response\n                if (!restaurant.id) restaurant.id = restaurant.restaurant_id;\n                if (!restaurant.restaurant_id) restaurant.restaurant_id = restaurant.id ? restaurant.id : '';\n                if (!restaurant.latlng) restaurant.latlng = {};\n                if (!restaurant.latlng.lat) restaurant.latlng.lat = restaurant.lat ? restaurant.lat : '';\n                if (!restaurant.latlng.lng) restaurant.latlng.lng = restaurant.lng ? restaurant.lng : '';\n                if (!restaurant.lat) restaurant.lat = restaurant.latlng.lat;\n                if (!restaurant.lng) restaurant.lng = restaurant.latlng.lng;\n                if (!restaurant.operating_hours) restaurant.operating_hours = {};\n                if (!restaurant.reviews) restaurant.reviews = {};\n\n                DBHelper.debugRestaurantInfo(restaurant.id, 'dbhelper-appendRestaurantProperties()-5-2-restaurant.id');\n                DBHelper.debugRestaurantInfo(restaurant.restaurant_id, 'dbhelper-appendRestaurantProperties()-5-2-restaurant.restaurant_id');\n                DBHelper.debugRestaurantInfo(restaurant.operating_hours, 'dbhelper-appendRestaurantProperties()-5-2-restaurant.operating_hours');\n                DBHelper.debugRestaurantInfo(restaurant.reviews, 'dbhelper-appendRestaurantProperties()-5-2-restaurant.reviews');\n            }\n            return restaurant;\n        }).then(restaurant => {\n            DBHelper.debugRestaurantInfo(restaurant, 'dbhelper-appendRestaurantProperties()-6');\n            if (restaurant) callback(null, restaurant);else callback('No results in append restaurant properties', null);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            const error_message = `Request failed. Returned status of ${error.message} - dbhelper-appendRestaurantProperties() - catch`;\n            callback(error_message, null);\n        });\n    }\n\n    static getRestaurantOperatingHours(restaurant_id, callback) {\n        DBHelper.debugRestaurantInfo('', 'dbhelper-getRestaurantOperatingHours()');\n        DBHelper.debugRestaurantInfo(restaurant_id, 'dbhelper-getRestaurantOperatingHours()-1-restaurant_id');\n\n        new Promise((resolve, reject) => {\n            DBHelper.debugRestaurantInfo(restaurant_id, 'dbhelper-getRestaurantOperatingHours()-2-1-restaurant_id');\n\n            DBHelper.debugRestaurantInfo('', 'dbhelper-getRestaurantOperatingHours()-2-2-getIndexDbOperatingHoursByRestaurantId()-call');\n            DBHelper.getIndexDbOperatingHoursByRestaurantId(restaurant_id, (error, result) => {\n                DBHelper.debugRestaurantInfo(error, 'dbhelper-getRestaurantOperatingHours()-2-3-getIndexDbOperatingHoursByRestaurantId()-error');\n                DBHelper.debugRestaurantInfo(result, 'dbhelper-getRestaurantOperatingHours()-2-3-getIndexDbOperatingHoursByRestaurantId()-result');\n                if (error || !result) resolve(false);\n                resolve(result);\n            });\n        }).then(result => {\n            DBHelper.debugRestaurantInfo(result, 'dbhelper-getRestaurantOperatingHours()-3-result');\n\n            if (result) callback(null, result);else callback('No Hours for this restaurant', null);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            const error_message = `Request failed. Returned status of ${error.message} - dbhelper-getRestaurantOperatingHours()`;\n            callback(error_message, null);\n        });\n    }\n\n    static getIndexDbOperatingHoursByRestaurantId(restaurant_id, callback) {\n        DBHelper.debugRestaurantInfo('', 'dbhelper-getIndexDbOperatingHoursByRestaurantId()');\n        DBHelper.debugRestaurantInfo(restaurant_id, 'dbhelper-getIndexDbOperatingHoursByRestaurantId()-restaurant_id');\n\n        if (!restaurant_id) callback('Invalid restaurant_id', null);\n\n        dbPromise.then(db => {\n            const txOperatingHours = db.transaction('operating_hours', 'readonly');\n            const operatingHoursStore = txOperatingHours.objectStore('operating_hours');\n\n            return operatingHoursStore.getAll('restaurant_id', restaurant_id).then(operating_hours => {\n                DBHelper.debugRestaurantInfo(operating_hours, 'dbhelper-getIndexDbOperatingHoursByRestaurantId()-1-operating_hours');\n                if (!operating_hours) {\n                    callback('No operating hours', null);\n                    return;\n                }\n                callback(null, operating_hours);\n            }).catch(error => {\n                // Oops!. Got an error from server.\n                error.message = `Request failed. Returned status of ${error.message} - dbhelper-getIndexDbOperatingHoursByRestaurantId()`;\n                callback(error.message, null);\n            });\n        });\n    }\n\n    /**\n     * get all reviews.\n     */\n    static getAllReviews(callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-getAllReviews()');\n\n        new Promise((resolve, reject) => {\n            resolve(true);\n        }).then(() => {\n            //DBHelper.debugRestaurantInfo(this.reviews, 'dbhelper-getAllReviews()-1-this.reviews');\n            if (!this.reviews) {\n                return new Promise((resolve2, reject2) => {\n                    DBHelper.getAllIndexDbReviews((error, result) => {\n                        //DBHelper.debugRestaurantInfo(error, 'dbhelper-getAllReviews()-2-error');\n                        //DBHelper.debugRestaurantInfo(result, 'dbhelper-getAllReviews()-2-result');\n                        if (error || !result) resolve2(false);\n                        resolve2(result);\n                    });\n                });\n            } else return this.reviews;\n        }).then(reviews => {\n            if (!reviews) {\n                return new Promise((resolve3, reject3) => {\n                    DBHelper.fetchAllReviews((error, result) => {\n                        //DBHelper.debugRestaurantInfo(error, 'dbhelper-getAllReviews()-3-error');\n                        //DBHelper.debugRestaurantInfo(result, 'dbhelper-getAllReviews()-3-result');\n                        if (error || !result) reject3(false);\n                        resolve3(result);\n                    });\n                });\n            } else return reviews;\n        }).then(reviews => {\n            //DBHelper.debugRestaurantInfo(reviews, 'dbhelper-getAllReviews()-4-reviews');\n\n            if (reviews) {\n                // updated global object\n                this.reviews = reviews;\n            }\n\n            callback(null, this.reviews);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message}`;\n            callback(error.message, null);\n        });\n    }\n\n    /**\n     * get db all reviews.\n     */\n    static getAllIndexDbReviews(callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-getAllIndexDbReviews()');\n\n        dbPromise.then(function (db) {\n            const txReviews = db.transaction('reviews', 'readonly');\n            let reviewsStore = txReviews.objectStore('reviews');\n            return reviewsStore.getAll().catch(error => {\n                return false;\n            });\n        }).then(reviews => {\n            DBHelper.debugRestaurantInfo(reviews, 'dbhelper-getAllIndexDbReviews()-1-reviews');\n\n            if (reviews) callback(null, reviews);else callback('No reviews for this restaurant', null);\n        });\n    }\n\n    /**\n     * Fetch all reviews\n     */\n    static fetchAllReviews(callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchAllReviews()');\n\n        // fetch all review with proper error handling.\n\n        let requestURL = DBHelper.DATABASE_URL_REVIEWS;\n        //DBHelper.debugRestaurantInfo(requestURL, 'dbhelper-fetchAllReviews()-requestURL');\n\n        return fetch(requestURL).then(response => {\n            const reviews = response.json();\n\n            //DBHelper.debugRestaurantInfo(reviews, 'dbhelper-fetchAllReviews()-1-reviews');\n\n            if (reviews) {\n                return reviews.map(review => {\n                    return new Promise((resolve, reject) => {\n                        // add or update review in cache\n                        //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchAllReviews()-addUpdateLocalReviewById()-call');\n                        DBHelper.addUpdateLocalReviewById(review, (error, result) => {\n                            //DBHelper.debugRestaurantInfo(error, 'dbhelper-fetchAllReviews()-2-addUpdateLocalReviewById()-error');\n                            //DBHelper.debugRestaurantInfo(result, 'dbhelper-fetchAllReviews()-2-addUpdateLocalReviewById()-result');\n                            resolve(true);\n                        });\n                    }).then(() => {\n                        return new Promise((resolve2, reject2) => {\n                            // add or update review in cache\n                            //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchAllReviews()-addUpdateCacheReviewById()-call');\n                            DBHelper.addUpdateCacheReviewById(review, (error, result) => {\n                                //DBHelper.debugRestaurantInfo(error, 'dbhelper-fetchAllReviews()-2-addUpdateLocalReviewById()-error');\n                                //DBHelper.debugRestaurantInfo(result, 'dbhelper-fetchAllReviews()-2-addUpdateLocalReviewById()-result');\n                                resolve2(true);\n                            });\n                        });\n                    }).then(review, () => {\n                        return review;\n                    });\n                });\n            } else return reviews;\n        }).then(reviews => {\n            //DBHelper.debugRestaurantInfo(reviews, 'dbhelper-fetchAllReviews()-3-reviews');\n            callback(null, reviews);\n            return;\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed-1. Returned status of ${error.message}`;\n            callback(error.message, null);\n            return;\n        });\n    }\n\n    /**\n     * get all reviews.\n     */\n    static getReviewsByRestaurantId(restaurant_id, callback) {\n        DBHelper.debugRestaurantInfo('', 'dbhelper-getReviewsByRestaurantId()');\n        DBHelper.debugRestaurantInfo(restaurant_id, 'dbhelper-getReviewsByRestaurantId()-restaurant_id');\n\n        new Promise((resolve, reject) => {\n            resolve(true);\n        }).then(() => {\n            if (this.reviews && this.reviews.length && this.reviews.length > 0) {\n                let reviews = this.reviews.filter(r => r.restaurant_id == restaurant_id);\n                if (reviews && reviews.length && reviews.length > 0) {\n                    DBHelper.debugRestaurantInfo(this.reviews, 'dbhelper-getReviewsByRestaurantId()-1-1-this.reviews');\n                    return reviews;\n                }\n            }\n\n            return new Promise((resolve2, reject2) => {\n                DBHelper.debugRestaurantInfo(restaurant_id, 'dbhelper-getReviewsByRestaurantId()-2-1-restaurant_id');\n\n                DBHelper.debugRestaurantInfo('', 'dbhelper-getReviewsByRestaurantId()-2-2-getIndexDbReviewsByRestaurantId()-call');\n                DBHelper.getIndexDbReviewsByRestaurantId(restaurant_id, (error, result) => {\n                    DBHelper.debugRestaurantInfo(restaurant_id, 'dbhelper-getReviewsByRestaurantId()-2-3-restaurant_id');\n                    DBHelper.debugRestaurantInfo(error, 'dbhelper-getReviewsByRestaurantId()-2-3-getIndexDbReviewsByRestaurantId()-error');\n                    DBHelper.debugRestaurantInfo(result, 'dbhelper-getReviewsByRestaurantId()-2-3-getIndexDbReviewsByRestaurantId()-result');\n                    if (error || !result) resolve2(false);\n                    resolve2(result);\n                });\n            });\n        }).then(reviews => {\n            DBHelper.debugRestaurantInfo(reviews, 'dbhelper-getReviewsByRestaurantId()-3-reviews');\n            if (reviews && reviews.length && reviews.length > 0) return reviews;\n\n            return new Promise((resolve3, reject3) => {\n                DBHelper.debugRestaurantInfo(restaurant_id, 'dbhelper-getReviewsByRestaurantId()-3-1-restaurant_id');\n\n                DBHelper.debugRestaurantInfo('', 'dbhelper-getReviewsByRestaurantId()-3-2-fetchAllReviewsByRestaurantId()-call');\n                DBHelper.fetchAllReviewsByRestaurantId(restaurant_id, (error, result) => {\n                    DBHelper.debugRestaurantInfo(restaurant_id, 'dbhelper-getReviewsByRestaurantId()-3-3-restaurant_id');\n                    DBHelper.debugRestaurantInfo(error, 'dbhelper-getReviewsByRestaurantId()-3-3-fetchAllReviewsByRestaurantId()-error');\n                    DBHelper.debugRestaurantInfo(result, 'dbhelper-getReviewsByRestaurantId()-3-3-fetchAllReviewsByRestaurantId()-result');\n                    if (error || !result) reject3(false);\n                    resolve3(result);\n                });\n            });\n        }).then(reviews => {\n            DBHelper.debugRestaurantInfo(reviews, 'dbhelper-getReviewsByRestaurantId()-4-reviews');\n\n            if (reviews && reviews.length && reviews.length > 0) callback(null, reviews);else callback('No reviews for this restaurant', null);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-getReviewsByRestaurantId()-catch`;\n            callback(error.message, null);\n        });\n    }\n\n    /**\n     * get db all reviews.\n     */\n    static getIndexDbReviewsByRestaurantId(restaurant_id, callback) {\n        DBHelper.debugRestaurantInfo('', 'dbhelper-getIndexDbReviewsByRestaurantId()');\n\n        dbPromise.then(function (db) {\n            const txReviews = db.transaction('reviews', 'readonly');\n            let reviewsStore = txReviews.objectStore('reviews');\n            return reviewsStore.getAll('restaurant_id', restaurant_id).catch(error => {\n                return false;\n            });\n        }).then(reviews => {\n            DBHelper.debugRestaurantInfo(reviews, 'dbhelper-getIndexDbReviewsByRestaurantId()-1-reviews');\n\n            if (reviews) callback(null, reviews);else callback('No reviews for this restaurant', null);\n        });\n    }\n\n    /**\n     * Fetch all reviews\n     */\n    static fetchAllReviewsByRestaurantId(restaurant_id, callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchAllReviewsByRestaurantId()');\n\n        // fetch all review with proper error handling.\n\n        let requestURL = DBHelper.DATABASE_URL_REVIEWS + '?restaurant_id=' + restaurant_id;\n        //DBHelper.debugRestaurantInfo(requestURL, 'dbhelper-fetchAllReviewsByRestaurantId()-requestURL');\n\n        return fetch(requestURL).then(response => {\n            const reviews = response.json();\n\n            //DBHelper.debugRestaurantInfo(reviews, 'dbhelper-fetchAllReviewsByRestaurantId()-1-reviews');\n\n            if (reviews && reviews.length && reviews.length > 0) {\n                return reviews.map(review => {\n                    return new Promise((resolve, reject) => {\n                        // add or update review in cache\n                        //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchAllReviewsByRestaurantId()-addUpdateLocalReviewById()-call');\n                        DBHelper.addUpdateLocalReviewById(review, (error, result) => {\n                            //DBHelper.debugRestaurantInfo(error, 'dbhelper-fetchAllReviewsByRestaurantId()-2-addUpdateLocalReviewById()-error');\n                            //DBHelper.debugRestaurantInfo(result, 'dbhelper-fetchAllReviewsByRestaurantId()-2-addUpdateLocalReviewById()-result');\n                            resolve(true);\n                        });\n                    }).then(() => {\n                        return new Promise((resolve, reject) => {\n                            // add or update review in cache\n                            //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchAllReviewsByRestaurantId()-addUpdateCacheReviewById()-call');\n                            DBHelper.addUpdateCacheReviewById(review, (error, result) => {\n                                //DBHelper.debugRestaurantInfo(error, 'dbhelper-fetchAllReviewsByRestaurantId()-2-addUpdateLocalReviewById()-error');\n                                //DBHelper.debugRestaurantInfo(result, 'dbhelper-fetchAllReviewsByRestaurantId()-2-addUpdateLocalReviewById()-result');\n                                resolve(true);\n                            });\n                        });\n                    }).then(review, () => {\n                        return review;\n                    });\n                });\n            } else return reviews;\n        }).then(reviews => {\n            //DBHelper.debugRestaurantInfo(reviews, 'dbhelper-fetchAllReviews()-3-reviews');\n            callback(null, reviews);\n            return;\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed-1. Returned status of ${error.message}-dbhelper-fetchAllReviewsByRestaurantId()-catch`;\n            callback(error.message, null);\n            return;\n        });\n    }\n\n    /**\n     * update a review by its ID.\n     */\n    static addUpdateReviewById(review, callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-addUpdateReviewById()');\n        //DBHelper.debugRestaurantInfo(review, 'dbhelper-addUpdateReviewById()-review');\n\n        let local_error = null;\n        let cache_error = null;\n        let remote_error = null;\n\n        let idMax = review.review_id;\n\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-addUpdateReviewById()-addUpdateLocalReviewById()-call');\n        DBHelper.addUpdateLocalReviewById(review, (error, result) => {\n            if (debug) console.log('error=' + error);\n            if (debug) console.log('result=' + result);\n            local_error = error;\n        });\n\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-addUpdateReviewById()-addUpdateCacheReviewById()-call');\n        DBHelper.addUpdateCacheReviewById(review, (error, result) => {\n            if (debug) console.log('error=' + error);\n            if (debug) console.log('result=' + result);\n            cache_error = error;\n        });\n\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-addUpdateReviewById()-addUpdateRemoteReviewById()-call');\n        DBHelper.addUpdateRemoteReviewById(review, (error, result) => {\n            if (debug) console.log('error=' + error);\n            if (debug) console.log('result=' + result);\n            remote_error = error;\n        });\n\n        const myPromise = new Promise((resolve, reject) => {\n            if (debug) console.log('local_error=' + local_error);\n            if (debug) console.log('cache_error=' + cache_error);\n            if (debug) console.log('remote_error=' + remote_error);\n\n            if (local_error || cache_error || remote_error) {\n\n                if (debug) console.log('error');\n                callback(local_error || cache_error || remote_error, null);\n                return;\n            }\n            callback(null, true);\n            return;\n        });\n    }\n\n    /**\n     * update a review by its ID.\n     */\n    static addUpdateLocalReviewById(review, callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-addUpdateLocalReviewById()');\n        //DBHelper.debugRestaurantInfo(review, 'dbhelper-addUpdateLocalReviewById()-review');\n\n        return dbPromise.then(function (db) {\n            const txReview = db.transaction('reviews', 'readwrite');\n            let reviewStore = txReview.objectStore('reviews');\n\n            const idIndex = reviewStore.index('review_id');\n\n            return idIndex.getAllKeys().then(keys => {\n                let idMax = 0;\n                keys.forEach(key => {\n                    idMax = key;\n                });\n\n                // increment last key value by 1\n                idMax++;\n\n                return idMax;\n            }).then(idMax => {\n\n                let review_id = idMax;\n                //DBHelper.debugRestaurantInfo(review_id, 'dbhelper-addUpdateLocalReviewById()-1-1-review_id');\n\n                if (review.review_id) review_id = review.review_id;\n                //DBHelper.debugRestaurantInfo(review_id, 'dbhelper-addUpdateLocalReviewById()-1-2-review_id');\n\n                return new Promise((resolve, reject) => {\n\n                    resolve(reviewStore.get(review_id));\n                }).then(result => {\n                    return {\n                        review_id: review_id,\n                        review: review,\n                        item: result\n                    };\n                }).then(result => {\n\n                    let review_id = result.review_id;\n                    let review = result.review;\n                    let item = result.item;\n\n                    //DBHelper.debugRestaurantInfo(review_id, 'dbhelper-addUpdateLocalReviewById()-2-review_id');\n                    //DBHelper.debugRestaurantInfo(review, 'dbhelper-addUpdateLocalReviewById()-2-review');\n                    //DBHelper.debugRestaurantInfo(item, 'dbhelper-addUpdateLocalReviewById()-2-item');\n\n                    const rtNewItem = {\n                        review_id: parseInt(review_id),\n                        restaurant_id: parseInt(review.restaurant_id),\n                        name: review.name,\n                        rating: parseInt(review.rating),\n                        comments: review.comments,\n                        updatedAt: review.updatedAt,\n                        createdAt: review.createdAt\n                    };\n                    if (!item) {\n                        reviewStore.add(rtNewItem);\n                    } else {\n                        reviewStore.put(rtNewItem);\n                    }\n                    txReview.complete;\n\n                    callback(null, true);\n                    return;\n                }).catch(error => {\n                    // Oops!. Got an error from server.\n                    error.message = `Request failed. Returned status of ${error.message} - addUpdateLocalReviewById`;\n                    callback(error, null);\n                });\n            });\n        });\n    }\n\n    /**\n     * update a review by its ID.\n     */\n    static addUpdateCacheReviewById(review, callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-addUpdateCacheReviewById()');\n        //DBHelper.debugRestaurantInfo(review, 'dbhelper-addUpdateCacheReviewById()-review');\n\n        if (debug) console.log('Update cache by deleting and then adding cache');\n        return caches.open(staticCacheName).then(function (cache) {\n            if (debug) console.log('Deleting index file cache');\n            return cache.delete(new Request('/restaurant.html?id=' + review.restaurant_id));\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message}`;\n            callback(error, null);\n        });\n    }\n\n    /**\n     * update a review by its ID.\n     */\n    static addUpdateRemoteReviewById(review, callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-addUpdateRemoteReviewById()');\n        //DBHelper.debugRestaurantInfo(review, 'dbhelper-addUpdateRemoteReviewById()-review');\n\n        let requestURL = DBHelper.DATABASE_URL_REVIEWS;\n        //DBHelper.debugRestaurantInfo(requestURL, 'dbhelper-addUpdateRemoteReviewById()-requestURL');\n\n        // add remove id name as well\n        const review_id = review.review_id;\n        delete review.review_id;\n        review.id = review_id;\n        //DBHelper.debugRestaurantInfo(review.id, 'dbhelper-addUpdateRemoteReviewById()-review.id');\n\n        if (review.id.length > 0) {\n            requestURL += '/' + review.id;\n            //DBHelper.debugRestaurantInfo(requestURL, 'dbhelper-addUpdateRemoteReviewById()-requestURL');\n        }\n\n        const requestMethod = 'POST';\n        const requestBody = JSON.stringify(review);\n        const requestHeaders = {\n            'Content-Type': 'application/json'\n        };\n\n        return fetch(requestURL, {\n            method: requestMethod, body: requestBody, headers: requestHeaders\n        }).then(result => {\n            //DBHelper.debugRestaurantInfo(navigator.onLine, 'dbhelper-addUpdateRemoteReviewById()-navigator.onLine');\n            if (!navigator.onLine) {\n\n                return dbPromise.then(function (db) {\n\n                    if (debug) console.log('review-pending-start');\n                    const txPending = db.transaction('pending', 'readwrite');\n                    let pendingStore = txPending.objectStore('pending');\n\n                    pendingStore.then(() => {\n                        const pending = {\n                            id: Date.now(),\n                            url: requestURL,\n                            method: requestMethod,\n                            body: requestBody,\n                            headers: requestHeaders\n                        };\n                        pendingStore.put(pending);\n                        txPending.complete;\n                    });\n                });\n            }\n        }).catch(error => {\n            if (debug) console.log('catch-navigator.onLine=' + navigator.onLine);\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message}`;\n            callback(error, null);\n        });\n    }\n\n    static v1LoadData(callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-v1LoadData()');\n        let is_db_populated;\n        return new Promise((resolve, reject) => {\n            DBHelper.isIndexDbPopulated((error, result) => {\n                //DBHelper.debugRestaurantInfo(error, 'dbhelper-v1LoadData()-1-isIndexDbPopulated()-error');\n                //DBHelper.debugRestaurantInfo(result, 'dbhelper-v1LoadData()-1-isIndexDbPopulated()-result');\n                if (error) {\n                    reject(false);\n                } else {\n                    resolve(result);\n                }\n            });\n        }).then(is_db_populated => {\n            //DBHelper.debugRestaurantInfo('', 'dbhelper-v1LoadData()-2-1-call');\n            //DBHelper.debugRestaurantInfo(is_db_populated, 'dbhelper-v1LoadData()-2-1-is_db_populated');\n            return new Promise((resolve, reject) => {\n                //DBHelper.debugRestaurantInfo(is_db_populated, 'dbhelper-v1LoadData()-2-2-is_db_populated');\n                resolve(is_db_populated);\n            }).then(is_db_populated => {\n\n                return new Promise((resolve2, reject2) => {\n                    if (!is_db_populated) {\n                        //DBHelper.debugRestaurantInfo('', 'dbhelper-v1LoadData()-2-2-v1AddRestaurantsData()-call');\n\n                        DBHelper.v1AddRestaurantsData((error, result) => {\n                            //DBHelper.debugRestaurantInfo(error, 'dbhelper-v1LoadData()-2-3-v1AddRestaurantsData()-error');\n                            //DBHelper.debugRestaurantInfo(result, 'dbhelper-v1LoadData()-2-3-v1AddRestaurantsData()-result');\n                            if (error || !result) reject2(false);\n                            resolve2(result);\n                        });\n                    } else {\n                        //DBHelper.debugRestaurantInfo(false, 'dbhelper-v1LoadData()-2-4-v1AddRestaurantsData()-else-resolve');\n                        resolve2(false);\n                    }\n                }).then(is_restaurants_added => {\n\n                    //DBHelper.debugRestaurantInfo(is_db_populated, 'dbhelper-v1LoadData()-3-1-is_db_populated');\n                    //DBHelper.debugRestaurantInfo(is_restaurants_added, 'dbhelper-v1LoadData()-3-1-is_restaurants_added');\n\n                    return is_restaurants_added;\n                }).then(is_restaurants_added => {\n\n                    //DBHelper.debugRestaurantInfo(is_db_populated, 'dbhelper-v1LoadData()-4-1-is_db_populated');\n                    //DBHelper.debugRestaurantInfo(is_restaurants_added, 'dbhelper-v1LoadData()-4-1-is_restaurants_added');\n\n                    return new Promise((resolve3, reject3) => {\n                        return new Promise((resolve4, reject4) => {\n                            if (!is_db_populated) {\n                                return new Promise((resolve5, reject5) => {\n                                    //DBHelper.debugRestaurantInfo('', 'dbhelper-v1LoadData()-4-2-v1AddReviewsData()-call');\n\n                                    DBHelper.v1AddReviewsData((error, result) => {\n                                        //DBHelper.debugRestaurantInfo(error, 'dbhelper-v1LoadData()-4-3-v1AddReviewsData()-error');\n                                        //DBHelper.debugRestaurantInfo(result, 'dbhelper-v1LoadData()-4-3-v1AddReviewsData()-result');\n                                        if (error || !result) reject5(false);\n                                        resolve5(result);\n                                    });\n                                }).then(result => {\n                                    //DBHelper.debugRestaurantInfo(result, 'dbhelper-v1LoadData()-4-4-v1AddReviewsData()-if-result');\n                                    resolve4(result);\n                                });\n                            } else {\n                                //DBHelper.debugRestaurantInfo(is_db_populated, 'dbhelper-v1LoadData()-4-5-v1AddReviewsData()-else-is_db_populated');\n                                resolve4(is_db_populated);\n                            }\n                        }).then(result => {\n                            //DBHelper.debugRestaurantInfo(result, 'dbhelper-v1LoadData()-4-6-v1AddReviewsData()-result');\n                            resolve3(result);\n                        });\n                    });\n                }).then(is_reviews_added => {\n\n                    //DBHelper.debugRestaurantInfo(is_db_populated, 'dbhelper-v1LoadData()-5-1-is_db_populated');\n                    //DBHelper.debugRestaurantInfo(is_reviews_added, 'dbhelper-v1LoadData()-5-1-is_reviews_added');\n\n                    return is_reviews_added;\n                });\n            }).then(is_db_populated, is_reviews_added => {\n                //DBHelper.debugRestaurantInfo(is_db_populated, 'dbhelper-v1LoadData()-6-1-is_db_populated');\n                //DBHelper.debugRestaurantInfo(is_reviews_added, 'dbhelper-v1LoadData()-6-1-is_reviews_added');\n\n                return is_db_populated || is_reviews_added;\n            }).then(load_restaurants => {\n                //DBHelper.debugRestaurantInfo(load_restaurants, 'dbhelper-v1LoadData()-7-1-load_restaurants');\n                if (!load_restaurants) {\n                    callback('No data', null);\n                    return;\n                }\n                return new Promise((resolve, reject) => {\n                    //DBHelper.debugRestaurantInfo('', 'dbhelper-v1LoadData()-7-2-getAllRestaurants()-call');\n\n                    DBHelper.getAllRestaurants((error, result) => {\n                        //DBHelper.debugRestaurantInfo(error, 'dbhelper-v1LoadData()-7-3-getAllRestaurants()-error');\n                        //DBHelper.debugRestaurantInfo(result, 'dbhelper-v1LoadData()-7-3-getAllRestaurants()-result');\n                        if (error || !result) reject(false);\n                        resolve(result);\n                    });\n                }).then(restaurants => {\n                    //DBHelper.debugRestaurantInfo(restaurants, 'dbhelper-v1LoadData()-7-4-restaurants');\n                    callback(null, restaurants);\n                    return;\n                }).catch(error => {\n                    console.log('Load data error: ' + error);\n                    callback(error.message, null);\n                    return;\n                });\n            });\n        }).catch(error => {\n            console.log('Load data error: ' + error);\n            callback(error.message, null);\n            return;\n        });\n    }\n\n    static v1AddRestaurantsData(callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-v1AddRestaurantsData()');\n\n        return new Promise((resolve, reject) => {\n\n            const requestUrl = DBHelper.DATABASE_URL_RESTAURANTS;\n            //DBHelper.debugRestaurantInfo(requestUrl, 'dbhelper-v1AddRestaurantsData()-1-requestUrl');\n\n            return fetch(requestUrl).then(response => resolve(response.json()));\n        }).then(restaurants => {\n\n            //DBHelper.debugRestaurantInfo(restaurants, 'dbhelper-v1AddRestaurantsData()-2-restaurants');\n            if (!restaurants || restaurants.length === 0) return false;\n\n            return dbPromise.then(db => {\n                // add to database\n                return restaurants.map(restaurant => {\n                    return new Promise((resolve2, reject2) => {\n                        //DBHelper.debugRestaurantInfo('', 'dbhelper-v1AddRestaurantsData()-2-1-addUpdateLocalRestaurantById()-call');\n                        DBHelper.addUpdateLocalRestaurantById(restaurant, (error, result) => {\n                            //DBHelper.debugRestaurantInfo(error, 'dbhelper-v1AddRestaurantsData()-2-2-addUpdateLocalRestaurantById()-error');\n                            //DBHelper.debugRestaurantInfo(result, 'dbhelper-v1AddRestaurantsData()-2-2-addUpdateLocalRestaurantById()-result');\n                            if (error || !result) reject2(error);\n                            resolve2(result);\n                        }).then(result => {\n                            return new Promise((resolve3, reject3) => {\n                                //DBHelper.debugRestaurantInfo('', 'dbhelper-v1AddRestaurantsData()-2-3-addUpdateLocalRestaurantOperationHoursById()-call');\n                                DBHelper.addUpdateLocalRestaurantOperationHoursById(restaurant, (error, result) => {\n                                    //DBHelper.debugRestaurantInfo(error, 'dbhelper-v1AddRestaurantsData()-2-4-addUpdateLocalRestaurantOperationHoursById()-error');\n                                    //DBHelper.debugRestaurantInfo(result, 'dbhelper-v1AddRestaurantsData()-2-4-addUpdateLocalRestaurantOperationHoursById()-result');\n                                    if (error || !result) reject3(error);\n                                    resolve3(result);\n                                });\n                            });\n                        });\n                    });\n                });\n            });\n        }).then(result => {\n            //DBHelper.debugRestaurantInfo(result, 'dbhelper-v1AddRestaurantsData()-3-result');\n            if (result) {\n                //DBHelper.debugRestaurantInfo('', 'dbhelper-v1AddRestaurantsData()-3-restaurant fetch data added');\n                callback(null, true);\n            } else {\n                callback(false, null);\n            }\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-v1AddRestaurantsData`;\n            console.log(error.message);\n            callback('Unable to load data', null);\n        });\n    }\n\n    static v1AddReviewsData(callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-v1AddReviewsData()');\n\n        return new Promise((resolve, reject) => {\n\n            const requestUrl = DBHelper.DATABASE_URL_REVIEWS;\n            //DBHelper.debugRestaurantInfo(requestUrl, 'dbhelper-v1AddReviewsData()-1-requestUrl');\n\n            return fetch(requestUrl).then(response => resolve(response.json()));\n        }).then(reviews => {\n\n            //DBHelper.debugRestaurantInfo(reviews, 'dbhelper-v1AddReviewsData()-2-reviews');\n            if (!reviews || reviews.length === 0) return false;\n\n            return dbPromise.then(db => {\n                // add to database\n                return reviews.map(review => {\n                    return new Promise((resolve2, reject2) => {\n                        //DBHelper.debugRestaurantInfo('', 'dbhelper-v1AddReviewsData()-2-addUpdateLocalReviewById()-call');\n                        DBHelper.addUpdateLocalReviewById(review, (error, result) => {\n                            //DBHelper.debugRestaurantInfo(error, 'dbhelper-v1AddReviewsData()-2-2-addUpdateLocalReviewById()-error');\n                            //DBHelper.debugRestaurantInfo(result, 'dbhelper-v1AddReviewsData()-2-2-addUpdateLocalReviewById()-result');\n                            if (error || !result) reject2(error);\n                            resolve2(result);\n                        });\n                    });\n                });\n            });\n        }).then(result => {\n            //DBHelper.debugRestaurantInfo(result, 'dbhelper-v1AddReviewsData()-3-result');\n            if (result) {\n                //DBHelper.debugRestaurantInfo('', 'dbhelper-v1AddReviewsData()-3-reviews fetch data added');\n                callback(null, true);\n            } else {\n                callback(false, null);\n            }\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - dbhelper-v1AddReviewsData`;\n            console.log(error.message);\n            callback('Unable to load data', null);\n        });\n    }\n\n    /**\n     * get review by ID.\n     */\n    static getReviewById(review_id, callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-getReviewById()');\n\n        return new Promise((resolve, reject) => {\n            resolve(true);\n        }).then(() => {\n            if (!this.reviews) {\n                return new Promise((resolve, reject) => {\n                    DBHelper.getAllReviews((error, result) => {\n                        //DBHelper.debugRestaurantInfo(error, 'dbhelper-getReviewById()-1-getAllReviews()-error');\n                        //DBHelper.debugRestaurantInfo(result, 'dbhelper-getReviewById()-1-getAllReviews()-result');\n                        if (error || !result) reject(false);\n                        resolve(result);\n                    });\n                });\n            } else return this.reviews;\n        }).then(reviews => {\n            if (reviews) {\n                const review = reviews.filter(r => r.id == review_id);\n                //DBHelper.debugRestaurantInfo(review, 'dbhelper-getReviewById()-4-review');\n\n                callback(null, review);\n            } else callback('No review matched with id', null);\n            return;\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed-2. Returned status of ${error.message}`;\n            callback(error.message, null);\n            return;\n        });\n    }\n\n    static getAllIndexDbOperatingHours(callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-getAllIndexDbOperatingHours()');\n        dbPromise.then(db => {\n            const txOperatingHours = db.transaction('operating_hours', 'readonly');\n            const operatingHoursStore = txOperatingHours.objectStore('operating_hours');\n            const allOperatingHours = operatingHoursStore.getAll();\n\n            //DBHelper.debugRestaurantInfo(allOperatingHours, 'dbhelper-getAllIndexDbOperatingHours()-1-allOperatingHours');\n\n            callback(null, allOperatingHours);\n            return;\n        });\n    }\n\n    /**\n     * Fetch a reviews by its restaurant ID.\n     */\n    static fetchReviewById(review_id, callback) {\n        //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchReviewById()');\n        //DBHelper.debugRestaurantInfo(review_id, 'dbhelper-fetchReviewById()-review_id');\n\n        // fetch all review with proper error handling.\n\n        let requestURL = DBHelper.DATABASE_URL_REVIEWS + '/' + review_id;\n        //DBHelper.debugRestaurantInfo(requestURL, 'dbhelper-fetchReviewById()-requestURL');\n\n        return fetch(requestURL).then(response => {\n            const review = response.json();\n            //DBHelper.debugRestaurantInfo(review, 'dbhelper-fetchReviewById()-1-review');\n\n            if (review) {\n                // add or update review in cache\n                //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchReviewById()-addUpdateLocalReviewById()-call');\n                DBHelper.addUpdateLocalReviewById(review, (error, result) => {\n                    //DBHelper.debugRestaurantInfo(error, 'dbhelper-fetchReviewById()-1-addUpdateLocalReviewById()-error');\n                    //DBHelper.debugRestaurantInfo(result, 'dbhelper-fetchReviewById()-1-addUpdateLocalReviewById()-reviews');\n                });\n\n                //DBHelper.debugRestaurantInfo('', 'dbhelper-fetchReviewById()-addUpdateCacheReviewById()-call');\n                DBHelper.addUpdateCacheReviewById(review, (error, result) => {\n                    //DBHelper.debugRestaurantInfo(error, 'dbhelper-fetchReviewById()-1-addUpdateCacheReviewById()-error');\n                    //DBHelper.debugRestaurantInfo(result, 'dbhelper-fetchReviewById()-1-addUpdateCacheReviewById()-reviews');\n                });\n            }\n            callback(null, review);\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed-1. Returned status of ${error.message}`;\n            callback(error.message, null);\n            return;\n        });\n    }\n\n    // example copied from\n    // https://stackoverflow.com/questions/847185/convert-a-unix-timestamp-to-time-in-javascript\n    static formattedUnixTime(unix_timestamp) {\n        const date_now = new Date();\n        // Create a new JavaScript Date object based on the timestamp\n        // multiplied by 1000 so that the argument is in milliseconds, not seconds.\n        const date = new Date(unix_timestamp * 1000);\n        let year = date.getFullYear();\n        const month = date.getMonth();\n        const day = date.getDate();\n\n        if (year > date_now.getFullYear()) {\n            year = date_now.getFullYear();\n        }\n\n        // Hours part from the timestamp\n        const hours = date.getHours();\n        // Minutes part from the timestamp\n        const minutes = \"0\" + date.getMinutes();\n        // Seconds part from the timestamp\n        const seconds = \"0\" + date.getSeconds();\n\n        const part = date.getDate();\n\n        // Will display time in 10:30:23 format\n        return month + '/' + day + '/' + year + ' ' + (hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2)).toString();\n        //return (hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2));\n    }\n\n    static debugRestaurantInfo(obj, callername, counter = 0, data = []) {\n\n        try {\n\n            if (debug) {\n                const part1 = callername + '=';\n                let part2 = obj;\n                if (!(typeof obj === 'undefined' || obj === 'undefined' || obj === null || typeof obj.toLowerCase === 'function' && obj.toLowerCase().search('error'))) {\n                    //part2 = obj.toString().substring(0, 15);\n                }\n                const part3 = ' typeof=' + typeof obj;\n                const part4 = ' -- is empty=' + (obj === null || typeof obj === 'undefined' || obj.length === 0);\n\n                data.push(part1 + part2 + part3 + part4);\n                if (counter > 5) return data;\n\n                if (typeof obj === 'object' && obj !== null) {\n                    for (const i in obj) {\n                        const subObj = obj[i];\n                        const subObjName = callername + '-' + counter + '-' + i;\n                        data = DBHelper.debugRestaurantInfo(subObj, subObjName, counter + 1, data);\n                    }\n                }\n\n                if (counter === 0) {\n                    // data.forEach((item, index, data) => {\n                    //     console.log(item, index);\n                    // });\n                    for (let i = 0; i < data.length; i++) {\n                        console.log(data[i]);\n                    }\n                } else return data;\n            }\n        } catch (error) {\n            console.log('Error=' + error);\n        }\n    }\n\n}\n\n// module.exports = DBHelper;"],"file":"dbhelper.min.js"}