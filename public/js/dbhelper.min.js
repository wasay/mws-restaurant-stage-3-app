let debug=!1;const appPrefix="mws-restaurant-stage-3",staticCacheName=appPrefix+"-v2",contentImgsCache=appPrefix+"-content-imgs",allCaches=[staticCacheName,contentImgsCache],dbName="topRestaurants3",dbVersion=5,dbPromise=idb.open(dbName,dbVersion,function(e){switch(e.oldVersion){case 0:let t=e.createObjectStore("restaurants",{keyPath:"restaurant_id",autoIncrement:!0});t.createIndex("restaurant_id","restaurant_id",{unique:!0}),t.createIndex("name","name",{unique:!1}),t.createIndex("neighborhood","neighborhood",{unique:!1}),t.createIndex("photograph","photograph",{unique:!1}),t.createIndex("address","address",{unique:!1}),t.createIndex("lat","lat",{unique:!1}),t.createIndex("lng","lng",{unique:!1}),t.createIndex("cuisine_type","cuisine_type",{unique:!1}),t.createIndex("is_favorite","is_favorite",{unique:!1}),t.createIndex("createdAt","createdAt",{unique:!1}),t.createIndex("updatedAt","updatedAt",{unique:!1});case 1:const a=e.createObjectStore("operating_hours",{keyPath:"operating_hour_id",autoIncrement:!0});a.createIndex("operating_hour_id","operating_hour_id",{unique:!0}),a.createIndex("restaurant_id","restaurant_id",{unique:!1}),a.createIndex("day","day",{unique:!1}),a.createIndex("hours","hours",{unique:!1}),a.createIndex("createdAt","createdAt",{unique:!1}),a.createIndex("updatedAt","updatedAt",{unique:!1});case 2:const n=e.createObjectStore("reviews",{keyPath:"review_id",autoIncrement:!0});n.createIndex("review_id","review_id",{unique:!0}),n.createIndex("restaurant_id","restaurant_id",{unique:!1}),n.createIndex("name","name",{unique:!1}),n.createIndex("rating","rating",{unique:!1}),n.createIndex("comments","comments",{unique:!1}),n.createIndex("createdAt","createdAt",{unique:!1}),n.createIndex("updatedAt","updatedAt",{unique:!1});case 3:let r=e.createObjectStore("pending",{keyPath:"id",autoIncrement:!0});r.createIndex("id","id",{unique:!0}),r.createIndex("url","url",{unique:!1}),r.createIndex("method","method",{unique:!1}),r.createIndex("headers","headers",{unique:!1}),r.createIndex("body","body",{unique:!1})}}).catch(e=>{throw e.message=`Request failed createDB. Returned status of ${e.message}`,e});class DBHelper{constructor(){this.restaurants=null,this.restaurant=null,this.reviews=null,this.operating_hours=null}static get staticCacheName(){return staticCacheName}static get contentImgsCache(){return contentImgsCache}static get allCaches(){return allCaches}static get dbPromise(){return dbPromise}static get dbName(){return dbName}static get dbVersion(){return dbVersion}static get DATABASE_URL(){return"http://localhost:1337"}static get DATABASE_URL_RESTAURANTS(){return DBHelper.DATABASE_URL+"/restaurants"}static get DATABASE_URL_REVIEWS(){return DBHelper.DATABASE_URL+"/reviews"}static fetchRestaurants(e){return fetch(DBHelper.DATABASE_URL_RESTAURANTS,{headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(t=>{t?e(null,t):e("No results by fetch",null)}).catch(t=>{t.message=`Request failed. Returned status of ${t.message} - dbhelper-fetchRestaurants()`,e(t.message,null)})}static fetchRestaurantById(e,t){let a=DBHelper.DATABASE_URL_RESTAURANTS+"/"+e;return fetch(a,{headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>{e?t(null,e):t("No results by fetch",null)}).catch(e=>{e.message=`Request failed. Returned status of ${e.message} - dbhelper-fetchRestaurantById()`,t(e.message,null)})}static fetchRestaurantByCuisineAndNeighborhood(e,t,a,n){return new Promise((e,t)=>{DBHelper.getAllRestaurants(a,(a,n)=>{!a&&n||t(!1),e(n)})}).then(a=>{a?("all"!=e&&(a=a.filter(t=>t.cuisine_type==e)),"all"!=t&&(a=a.filter(e=>e.neighborhood==t)),n(null,a)):n("No results",null)}).catch(e=>{"boolean"==typeof e?n("Error",null):(e.message=`Request failed. Returned status of ${e.message} - dbhelper-fetchCuisines()`,console.log(e.message),n(e,null))})}static fetchNeighborhoods(e,t){return new Promise((t,a)=>{DBHelper.getAllRestaurants(e,(e,n)=>{!e&&n||a(!1),t(n)})}).then(e=>{if(e){const a=e.map((t,a)=>e[a].neighborhood),n=a.filter((e,t)=>a.indexOf(e)==t);t(null,n)}else t("No neighborhoods restaurants",null)}).catch(e=>{"boolean"==typeof e?t("Error",null):(e.message=`Request failed. Returned status of ${e.message} - dbhelper-fetchCuisines()`,console.log(e.message),t(e,null))})}static fetchCuisines(e,t){return new Promise((t,a)=>{DBHelper.getAllRestaurants(e,(e,n)=>{!e&&n||a(!1),t(n)})}).then(e=>{if(e&&e.length>0){const a=e.map((t,a)=>e[a].cuisine_type),n=a.filter((e,t)=>a.indexOf(e)==t);t(null,n)}else t("No restaurants",null)}).catch(e=>{"boolean"==typeof e?t("Error",null):(e.message=`Request failed. Returned status of ${e.message} - dbhelper-fetchCuisines()`,console.log(e.message),t(e,null))})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){if(e.photograph)return`img/${e.photograph}.jpg`}static mapMarkerForRestaurant(e,t){let a={};a=e.latlng.lat?{lat:e.latlng.lat,lng:e.latlng.lng}:e.lat?{lat:e.lat,lng:e.lng}:{lat:40.722216,lng:-73.987501};const n=new google.maps.LatLng(a.lat,a.lng);return t.panTo(n),new google.maps.Marker({position:a,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static isIndexDbPopulated(e){return dbPromise.then(e=>{return e.transaction("restaurants","readonly").objectStore("restaurants").getKey(1)}).then(t=>e(null,!(void 0===t||!t))).catch(t=>{t.message=`Request failed. Returned status of ${t.message} - dbhelper-isIndexDbPopulated()`,console.log(t.message),e(!1,null)})}static getAllIndexDbRestaurants(e){return dbPromise.then(t=>{const a=t.transaction("restaurants","readonly").objectStore("restaurants").getAllKeys();if("function"!=typeof a.map)return!1;let n;return n=a.map(t=>new Promise((e,a)=>{DBHelper.getIndexDbRestaurantById(t.restaurant_id,(t,n)=>{!t&&n||a(!1),e(n)})}).then(t,e=>e||t).catch(t=>{t.message=`Request failed. Returned status of ${t.message} - dbhelper-getAllIndexDbRestaurants()-catch`,console.log(t.message),e(t,null)}))}).then(t=>{t?e(null,t):e("No results in idb",null)}).catch(t=>{t.message=`Request failed. Returned status of ${t.message} - dbhelper-getAllIndexDbRestaurants()-catch`,console.log(t.message),e(t,null)})}static getIndexDbRestaurantById(e,t){if(e)return dbPromise.then(t=>{return t.transaction("restaurants","readonly").objectStore("restaurants").get(parseInt(e)).then(e=>e)}).then(e=>{if(!e){return void t("No restaurant info found in idb - dbhelper-getIndexDbRestaurantById()-second",null)}let a={};return a.restaurant_id=e.restaurant_id,a.name=e.name,a.address=e.address,a.photograph=e.photograph,a.neighborhood=e.neighborhood,a.cuisine_type=e.cuisine_type,a.is_favorite=e.is_favorite,a.lat=e.lat?e.lat:"",a.lng=e.lng?e.lng:"",a.createdAt=e.createdAt,a.updatedAt=e.updatedAt,a}).then(e=>{if(e)t(null,e);else{t("No restaurant info found in idb - dbhelper-getIndexDbRestaurantById()-fifth",null)}}).catch(e=>{e.message=`Request failed. Returned status of ${e.message} - dbhelper-getIndexDbRestaurantById()-catch`,console.log(e.message),t(e,null)});t("Missing restaurant id - dbhelper-getIndexDbRestaurantById()",null)}static addUpdateRestaurantById(e,t){let a=null,n=null,r=null;dbPromise.then(()=>{DBHelper.addUpdateLocalRestaurantById(e,(e,t)=>{a=e})}).then(()=>{DBHelper.addUpdateLocalRestaurantOperationHoursById(e,(e,t)=>{n=e})}).then(()=>{DBHelper.addUpdateCacheRestaurantById(e.id,(e,t)=>{n=e})}).then(()=>{DBHelper.addUpdateRemoteRestaurantById(e,(e,t)=>{r=e})}).then(()=>{a||n||r?t(a||n||r,null):t(null,e)})}static addUpdateLocalRestaurantById(e,t){return dbPromise.then(a=>{const n=a.transaction("restaurants","readwrite");let r=n.objectStore("restaurants");return r.get(e.id).then(t=>{let a={restaurant_id:e.id,name:e.name,neighborhood:e.neighborhood,photograph:e.photograph,address:e.address,lat:e.latlng.lat,lng:e.latlng.lng,cuisine_type:e.cuisine_type,is_favorite:e.is_favorite,createdAt:e.createdAt,updatedAt:e.updatedAt};t?r.put(a):r.add(a),n.complete}).then(()=>{t(null,!0)})}).catch(e=>{t("Error",null)})}static addUpdateLocalRestaurantOperationHoursById(e,t){return dbPromise.then(a=>{const n=a.transaction("operating_hours","readwrite");let r=n.objectStore("operating_hours");return r.get(1).then(()=>{let t=e.operating_hours;for(const a in t)r.add({restaurant_id:e.id,day:a,hours:t[a],createdAt:e.createdAt,updatedAt:e.updatedAt});n.complete}).then(()=>{t(null,!0)})}).catch(e=>{t(e+"dbhelper-addUpdateLocalRestaurantOperationHoursById()-catch",null)})}static addUpdateCacheRestaurantById(e,t){return caches.open(staticCacheName).then(function(t){return t.delete(new Request("/")).catch(e=>e),t.delete(new Request("/restaurant.html?id="+e)).catch(e=>e),t}).then(function(){return fetch(new Request("/")).then(function(){return fetch(new Request("/restaurant.html?id="+e))}).catch(e=>e)}).then(function(){t(null,!0)}).catch(e=>{e.message=`Request failed. Returned status of ${e.message}`,t(e,null)})}static addUpdateRemoteRestaurantById(e,t){let a=DBHelper.DATABASE_URL_RESTAURANTS+"/"+e.id;const n=JSON.stringify(e),r={"Content-Type":"application/json"};return fetch(a,{method:"PUT",body:n,headers:r}).catch(e=>{if(!navigator.onLine)return dbPromise.then(function(e){const t=e.transaction("pending","readwrite");let s=t.objectStore("pending");const l={id:Date.now(),url:a,method:"PUT",body:n,headers:r};return s.put(l),t.complete,!0}).then(e=>{t(null,e)});e.message=`Request failed. Returned status of ${e.message}`,t(e,null)})}static fetchReviewsByRestaurantId(e,t){const a=DBHelper.DATABASE_URL_REVIEWS+"?restaurant_id="+e;return fetch(a).then(e=>e.json()).then(e=>e.map(e=>new Promise((e,t)=>{e(!0)}).then(t=>new Promise((t,a)=>{DBHelper.addUpdateLocalAndCacheReviewById(e,(e,n)=>{e&&a(e),t(n)})})).then(e,()=>e).catch(t=>(t.message=`${t.message} - dbhelper-fetchReviewsByRestaurantId()-2-catch`,console.log(t.message),e)))).then(e=>{t(null,e)}).catch(e=>{e.message=`Request failed. Returned status of ${e.message} - dbhelper-fetchReviewsByRestaurantId()`,console.log(e.message),t(e,null)})}static getAllRestaurants(e,t){return this.restaurants&&this.restaurants.length>0&&t(null,this.restaurants),new Promise((e,t)=>{e(!0)}).then(e=>new Promise((e,t)=>{DBHelper.getAllIndexDbRestaurants((t,a)=>{!t&&a||e(!1),e(a)})}).then(e=>e).catch(e=>!1)).then(e=>this.restaurants&&this.restaurants.length>0?this.restaurants:new Promise((e,t)=>{DBHelper.fetchRestaurants((t,a)=>{!t&&a||e(!1),e(a)})}).catch(e=>e)).then(a=>a&&0!==a.length?e?new Promise((e,t)=>{a.map(e=>{return(e.id?e.id:e.restaurant_id?e.restaurant_id:0)?new Promise((t,a)=>{DBHelper.appendRestaurantProperties(e,(a,n)=>{!a&&n||t(e),t(n)})}).then(e=>e).catch(e=>e):e}),e(a)}).then(e=>e).catch(e=>e):(t(null,a),!1):this.restaurants).then(e=>{e&&"function"!=typeof e.then&&e.length>0?(this.restaurants=e,t(null,this.restaurants)):t("No restaurants",null)}).catch(e=>{e.message=`Request failed. Returned status of ${e.message} - dbhelper-getAllRestaurants - catch`,t(e.message,null)})}static getRestaurantById(e,t){let a;return this.restaurants&&(a=this.restaurants.filter(t=>t.id==e)),new Promise((e,t)=>{e(!0)}).then(()=>a||new Promise((t,a)=>{DBHelper.getIndexDbRestaurantById(e,(e,a)=>{!e&&a||t(!1),a&&(this.restaurant=a),t(a)})}).catch(e=>(e.message=`${e.message} - dbhelper-getRestaurantById()-2`,e))).then(t=>t||new Promise((t,a)=>{DBHelper.fetchRestaurantById(e,(e,n)=>{!e&&n||a(e),t(n)})}).then(e=>e?new Promise((t,a)=>{DBHelper.addUpdateCacheRestaurantById(e.id,(a,n)=>{!a&&n||t(e),t(e)})}):e).catch(e=>(e.message=`${e.message} - dbhelper-getRestaurantById()-4`,e))).then(t=>t&&(e=t.id?t.id:t.restaurant_id?t.restaurant_id:0)?new Promise((e,a)=>{DBHelper.appendRestaurantProperties(t,(a,n)=>{!a&&n||e(t),e(n)})}).then(e=>e).catch(e=>(e.message=`${e.message} - dbhelper-getRestaurantById()-5`,e)):t).then(e=>(e&&(this.restaurant=e),e)).then(e=>{t(null,e)}).catch(e=>{e.message=`Request failed. Returned status of ${e.message} - dbhelper-getRestaurantById()-catch`,t(e.message,null)})}static appendRestaurantProperties(e,t){const a=e.id?e.id:e.restaurant_id?e.restaurant_id:0;e&&e.operating_hours&&e.operating_hours.length&&e.operating_hours.length>0&&e.reviews&&e.reviews.length&&e.reviews.length>0?t(null,e):new Promise((e,t)=>{e(!0)}).then(t=>e&&e.operating_hours&&e.operating_hours.length&&e.operating_hours.length>0?e:new Promise((e,t)=>{DBHelper.getOperatingHoursByRestaurantId(a,(t,a)=>{!t&&a||e(!1),e(a)})}).then(t=>(t&&(e.operating_hours=t),e)).catch(t=>{const a=`Request failed. Returned status of ${t.message} - dbhelper-appendRestaurantProperties()-2-catch`;return console.log(a),e})).then(e=>e&&e.reviews&&e.reviews.length&&e.reviews.length>0?e:new Promise((e,t)=>{DBHelper.getReviewsByRestaurantId(a,(a,n)=>{!a&&n||t(!1),e(n)})}).then(t=>(t&&t.length&&t.length>0&&(e.reviews=t),e)).catch(t=>{const a=`Request failed. Returned status of ${t.message} - dbhelper-appendRestaurantProperties()-3-catch`;return console.log(a),e})).then(e=>(e&&(e.id||(e.id=e.restaurant_id),e.restaurant_id||(e.restaurant_id=e.id?e.id:""),e.latlng||(e.latlng={}),e.latlng.lat||(e.latlng.lat=e.lat?e.lat:""),e.latlng.lng||(e.latlng.lng=e.lng?e.lng:""),e.lat||(e.lat=e.latlng.lat),e.lng||(e.lng=e.latlng.lng),e.operating_hours||(e.operating_hours={}),e.reviews||(e.reviews={})),e)).then(e=>{e?t(null,e):t("No results in append restaurant properties",null)}).catch(e=>{const a=`Request failed. Returned status of ${e.message} - dbhelper-appendRestaurantProperties() - catch`;t(a,null)})}static getOperatingHoursByRestaurantId(e,t){new Promise((e,t)=>{e(!0)}).then(()=>new Promise((t,a)=>{DBHelper.getIndexDbOperatingHoursByRestaurantId(e,(e,a)=>{!e&&a||t(!1),t(a)})})).then(t=>t||new Promise((t,a)=>{DBHelper.fetchOperatingHoursByRestaurantId(e,(e,n)=>{!e&&n||a(!1),t(n)})})).then(e=>{e?t(null,e):t("No operating hours for this restaurant",null)}).catch(e=>{e.message=`Request failed. Returned status of ${e.message} - dbhelper-getOperatingHoursByRestaurantId()-catch`,t(e.message,null)})}static getIndexDbOperatingHoursByRestaurantId(e,t){e||t("Invalid restaurant_id",null),dbPromise.then(a=>{return a.transaction("operating_hours","readonly").objectStore("operating_hours").getAll().then(a=>{if(a&&a.length>0&&(a=a.filter(t=>t.restaurant_id==e)),a&&a.length>0){let e={};a.map(t=>{const a=t.day,n=t.hours;return DBHelper.isObjectEmpty(a)||DBHelper.isObjectEmpty(n)||(e[a]=n),t}),t(null,e)}else t("No operating hours for this restaurant",null)}).catch(e=>{e.message=`Request failed. Returned status of ${e.message} - dbhelper-getIndexDbOperatingHoursByRestaurantId()`,t(e.message,null)})})}static fetchOperatingHoursByRestaurantId(e,t){return new Promise((t,a)=>{DBHelper.fetchRestaurantById(e,(e,n)=>{!e&&n||a(e),t(n)})}).then(e=>{e?t(null,e.operating_hours):t("Could not fetch details of this restaurant",null)}).catch(e=>{t(e.message,null)})}static getReviewsByRestaurantId(e,t){new Promise((e,t)=>{e(!0)}).then(()=>new Promise((t,a)=>{DBHelper.getIndexDbReviewsByRestaurantId(e,(e,a)=>{!e&&a||t(!1),t(a)})})).then(t=>t&&t.length&&t.length>0?t:new Promise((t,a)=>{DBHelper.fetchReviewsByRestaurantId(e,(e,n)=>{!e&&n||a(!1),t(n)})})).then(e=>{e&&e.length&&e.length>0?t(null,e):t("No reviews for this restaurant",null)}).catch(e=>{e.message=`Request failed. Returned status of ${e.message} - dbhelper-getReviewsByRestaurantId()-catch`,t(e.message,null)})}static getIndexDbReviewsByRestaurantId(e,t){dbPromise.then(a=>{return a.transaction("reviews","readonly").objectStore("reviews").getAll().then(a=>{a&&a.length>0&&(a=a.filter(t=>t.restaurant_id==e)),a&&a.length>0?t(null,a):t("No reviews for this restaurant",null)}).catch(e=>{e.message=`Request failed. Returned status of ${e.message} - dbhelper-getIndexDbReviewsByRestaurantId()-catch`,t(e.message,null)})})}static addUpdateReviewById(e,t){new Promise((e,t)=>{e(!0)}).then(t=>new Promise((t,a)=>{DBHelper.addUpdateLocalAndCacheReviewById(e,(e,n)=>{e&&a(e),t(n)})})).then(t=>new Promise((t,a)=>{DBHelper.addUpdateRemoteReviewById(e,(e,n)=>{e&&a(e),t(n)})})).then(t=>new Promise((t,a)=>{DBHelper.fetchReviewsByRestaurantId(e.restaurant_id,(e,n)=>{e&&a(e),t(n)})})).then(e=>{e?t(null,!0):t("One or more process failed to update restaurant data",null)}).catch(e=>{e.message=`Request failed. Returned status of ${e.message} - dbhelper-addUpdateReviewById()-catch`,t(e.message,null)})}static addUpdateLocalAndCacheReviewById(e,t){new Promise((t,a)=>{DBHelper.addUpdateLocalReviewById(e,(e,n)=>{e&&a(e),t(n)})}).then(t=>!!t&&new Promise((t,a)=>{DBHelper.addUpdateCacheReviewById(e,(e,n)=>{e&&a(e),t(n)})})).then(e=>{t(null,!0)}).catch(e=>{e.message=`Request failed. Returned status of ${e.message} - dbhelper-addUpdateLocalAndCacheReviewById()-catch`,t(e.message,null)})}static addUpdateLocalReviewById(e,t){return dbPromise.then(function(a){const n=a.transaction("reviews","readwrite");let r=n.objectStore("reviews");return r.index("review_id").getAllKeys().then(e=>{let t=0;return e.forEach(e=>{t=e}),++t}).then(a=>{let s=a;return e.review_id&&(s=e.review_id),new Promise((e,t)=>{e(r.get(s))}).then(t=>({review_id:s,review:e,item:t})).then(e=>{let a=e.review_id,s=e.review,l=e.item;const u={review_id:parseInt(a),restaurant_id:parseInt(s.restaurant_id),name:s.name,rating:parseInt(s.rating),comments:s.comments,updatedAt:s.updatedAt,createdAt:s.createdAt};l?r.put(u):r.add(u),n.complete,t(null,!0)}).catch(e=>{e.message=`Request failed. Returned status of ${e.message} - addUpdateLocalReviewById()-catch`,t(e,null)})})})}static addUpdateCacheReviewById(e,t){caches.open(staticCacheName).then(function(t){return t.delete(new Request("/restaurant.html?id="+e.restaurant_id))}).then(e=>{t(null,e)}).catch(e=>{t(null,!1)})}static addUpdateRemoteReviewById(e,t){let a=DBHelper.DATABASE_URL_REVIEWS;const n=e.review_id;delete e.review_id,e.id=n,e.id.length>0&&(a+="/"+e.id);const r=JSON.stringify(e),s={"Content-Type":"application/json"};return fetch(a,{method:"POST",body:r,headers:s}).then(e=>navigator.onLine?e:dbPromise.then(function(e){const t=e.transaction("pending","readwrite");let n=t.objectStore("pending");return n.then(()=>{const e={id:Date.now(),url:a,method:"POST",body:r,headers:s};return n.put(e),t.complete,!0})})).then(e=>{t(null,e)}).catch(e=>{e.message=`Request failed. Returned status of ${e.message} - dbhelper-addUpdateRemoteReviewById()-catch`,t(e,null)})}static v1LoadData(e,t){return new Promise((e,t)=>{DBHelper.isIndexDbPopulated((t,a)=>{!t&&a||e(!1),e(a)})}).then(e=>e||new Promise((t,a)=>{t(e)}).then(e=>new Promise((e,t)=>{DBHelper.v1AddRestaurantsData((a,n)=>{!a&&n||t(!1),e(n)})}).then(e=>e?new Promise((e,t)=>{DBHelper.v1AddReviewsData((a,n)=>{!a&&n||t(!1),e(n)})}).then(e=>e):e)).then(t=>e||t)).then(a=>{if(a){if(e)return new Promise((e,t)=>{DBHelper.getAllIndexDbRestaurants((a,n)=>{!a&&n||t(!1),e(n)})}).then(e=>{t(null,e)}).catch(e=>{t(e.message,null)});t(null,!0)}else t("Unable to retrive restaurants data",null)}).catch(e=>{t(e.message,null)})}static v1AddRestaurantsData(e){return new Promise((e,t)=>{const a=DBHelper.DATABASE_URL_RESTAURANTS;return fetch(a).then(t=>e(t.json()))}).then(e=>!(!e||0===e.length)&&dbPromise.then(t=>e.map(e=>new Promise((t,a)=>{DBHelper.addUpdateLocalRestaurantById(e,(e,n)=>{!e&&n||a(e),t(n)}).then(t=>new Promise((t,a)=>{DBHelper.addUpdateLocalRestaurantOperationHoursById(e,(e,n)=>{!e&&n||a(e),t(n)})}))})))).then(t=>{t?e(null,!0):e(!1,null)}).catch(t=>{t.message=`Request failed. Returned status of ${t.message} - dbhelper-v1AddRestaurantsData`,console.log(t.message),e("Unable to load data",null)})}static v1AddReviewsData(e){return new Promise((e,t)=>{const a=DBHelper.DATABASE_URL_REVIEWS;return fetch(a).then(t=>e(t.json()))}).then(e=>!(!e||0===e.length)&&dbPromise.then(t=>e.map(e=>new Promise((t,a)=>{DBHelper.addUpdateLocalReviewById(e,(e,n)=>{!e&&n||a(e),t(n)})})))).then(t=>{t?e(null,!0):e(!1,null)}).catch(t=>{t.message=`Request failed. Returned status of ${t.message} - dbhelper-v1AddReviewsData`,console.log(t.message),e("Unable to load data",null)})}static isEmpty(e){return void 0===e||"undefined"===e||null===e||!1===e||e.length&&0===e.length}static isObjectEmpty(e){return"object"==typeof e&&("undefined"===e||null===e||!1===e)}static debugObject(e,t,a=0,n=[]){try{if(debug){const r=t+"=";let s=e;void 0===e||"undefined"===e||null===e||"function"==typeof e.toLowerCase&&e.toLowerCase().search("error");const l=" typeof="+typeof e;let u;if(a>5)return n;let d=DBHelper.isObjectEmpty(e);if("object"==typeof e)for(const r in e){const s=e[r];if(d=DBHelper.isObjectEmpty(s))u=" -- Is Empty="+d;else{const e=t+"-"+a+"-"+r;n=DBHelper.debugObject(s,e,a+1,n)}}else u=" -- Is Empty="+d;if(n.push(r+s+l+u),0!==a)return n;for(let e=0;e<n.length;e++)console.log(n[e])}}catch(e){console.log("Error="+e)}}}