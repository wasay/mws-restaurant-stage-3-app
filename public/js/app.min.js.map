{"version":3,"names":[],"mappings":"","sources":["app.min.js"],"sourcesContent":["// js/app.js\n\nlet debug = true;\nif (debug) console.log('start /js/app.js');\n\ndocument.addEventListener('DOMContentLoaded', event => {\n    if (debug) console.log('app-DOMContentLoaded()');\n    dbPromise.then(() => {\n        lazyLoadImages();\n    });\n});\n\nlazyLoadImages = () => {\n    if (debug) console.log('app-lazyLoadImages()');\n    let lazyImages = [].slice.call(document.querySelectorAll(\"img.lazy\"));\n\n    if (\"IntersectionObserver\" in window) {\n        let lazyImageObserver = new IntersectionObserver(function (entries, observer) {\n            entries.forEach(function (entry) {\n                if (entry.isIntersecting) {\n                    let lazyImage = entry.target;\n                    lazyImage.src = lazyImage.dataset.src;\n                    lazyImage.srcset = lazyImage.dataset.srcset;\n                    lazyImage.classList.remove(\"lazy\");\n                    lazyImageObserver.unobserve(lazyImage);\n                }\n            });\n        });\n\n        lazyImages.forEach(function (lazyImage) {\n            lazyImageObserver.observe(lazyImage);\n        });\n    } else {\n        // Possibly fall back to a more compatible method here\n    }\n};\n\n/**\r\n * Create restaurant HTML.\r\n */\ncreateFavoriteHTML = restaurant => {\n    if (!restaurant) {\n        return false;\n    }\n\n    if (debug) console.log('app-createFavoriteHTML-restaurant.id=' + restaurant.id);\n    if (debug) console.log('app-createFavoriteHTML-restaurant.is_favorite=' + restaurant.is_favorite);\n\n    let is_favorite = restaurant.is_favorite && restaurant.is_favorite.toString() === 'true' ? true : false;\n    if (debug) console.log('app-createFavoriteHTML-is_favorite=' + is_favorite);\n\n    const objFavorite = document.createElement('a');\n    objFavorite.className = 'favorite ' + (is_favorite ? 'is-favorite' : 'not-favorite');\n    objFavorite.title = is_favorite ? 'is favorite' : 'is not favorite';\n    objFavorite.onclick = event => {\n        setRestaurantFavorite(restaurant, objFavorite, is_favorite);\n    };\n    const icon = document.createElement('i');\n    icon.className = 'far fa-heart';\n    objFavorite.append(icon);\n\n    // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role\n    objFavorite.setAttribute(\"role\", \"button\");\n    objFavorite.setAttribute(\"tabindex\", \"0\");\n    objFavorite.setAttribute(\"aria-pressed\", \"false\");\n    objFavorite.setAttribute(\"aria-label\", 'Toggle favorite for ' + restaurant.name);\n\n    return objFavorite;\n};\n\n/**\r\n * set Restaurant favorite.\r\n */\nfunction setRestaurantFavorite(restaurant, objFavorite, is_favorite) {\n    if (debug) console.log('app-setRestaurantFavorite()');\n    if (debug) console.log('app-setRestaurantFavorite-is_favorite=' + is_favorite);\n    if (debug) console.log('app-setRestaurantFavorite-typeof objFavorite=' + typeof objFavorite);\n\n    // toggel favorite value\n    is_favorite = !is_favorite;\n    if (debug) console.log('app-setRestaurantFavorite-is_favorite.toggle()=' + is_favorite);\n\n    if (debug) console.log('app-setRestaurantFavorite-typeof restaurant=' + typeof restaurant);\n    if (debug) console.log('app-setRestaurantFavorite-restaurant.id=' + restaurant.id);\n\n    let dataObj = restaurant;\n    dataObj.is_favorite = is_favorite;\n\n    DBHelper.addUpdateRestaurantById(restaurant, (error, result) => {\n        if (error) {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message}`;\n            throw error;\n        }\n\n        if (debug) console.log('app-setRestaurantFavorite-result=' + result);\n\n        objFavorite.className = 'favorite ' + (is_favorite ? 'is-favorite' : 'not-favorite');\n        objFavorite.title = is_favorite ? 'is favorite' : 'is not favorite';\n        objFavorite.onclick = event => {\n            setRestaurantFavorite(restaurant, objFavorite, is_favorite);\n        };\n        const icon = document.createElement('i');\n        icon.className = 'far fa-heart';\n        // clear previous icon\n        objFavorite.innerHTML = '';\n        objFavorite.append(icon);\n        if (debug) console.log('app-setRestaurantFavorite-Updated icon');\n    });\n    if (debug) console.log('app-setRestaurantFavorite-fetch process done');\n}\n\nfunction debugObject(obj) {\n    let result = '';\n    result += 'obj=' + obj + '\\n';\n    for (const key of Object.keys(obj)) {\n        result += '' + key + '=' + obj[key] + '\\n';\n    }\n\n    return result;\n}\n\nif (debug) console.log('end /js/app.js');\n// js/sw-reg.js\n\nif (navigator.serviceWorker) {\n    //console.log('sw-reg');\n    navigator.serviceWorker.register('sw.js').then(function () {\n        //console.log('Registration worked!');\n    }).catch(function () {\n        //console.log('Registration failed!');\n    });\n}"],"file":"app.min.js"}