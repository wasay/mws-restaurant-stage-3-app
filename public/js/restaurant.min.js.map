{"version":3,"names":[],"mappings":"","sources":["restaurant.min.js"],"sourcesContent":["// js/restaurant.js\n\nif (debug) console.log('start /js/restaurant.js');\n\nlet restaurant;\nlet reviews;\nlet map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n    //console.log('restaurant_info-initMap()');\n    fetchRestaurantFromURL((error, restaurant) => {\n        if (error) {\n            // Got an error!\n            console.error(error);\n        } else {\n            self.map = new google.maps.Map(document.getElementById('map'), {\n                zoom: 16,\n                center: restaurant.latlng,\n                scrollwheel: false\n            });\n            fillBreadcrumb();\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n        }\n    });\n};\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = callback => {\n    if (debug) console.log('restaurant-fetchRestaurantFromURL()');\n    if (self.restaurant) {\n        // restaurant already fetched!\n        callback(null, self.restaurant);\n        return;\n    }\n    const id = getParameterByName('id');\n    if (debug) console.log('restaurant_id=' + id);\n    let error;\n    if (!id) {\n        // no id found in URL\n        error = 'No restaurant id in URL';\n        callback(error, null);\n    } else {\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n            self.restaurant = restaurant;\n            if (!restaurant) {\n                console.error(error);\n                return;\n            }\n            fillRestaurantHTML();\n            callback(null, restaurant);\n        });\n    }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n    if (debug) console.log('restaurant-fillRestaurantHTML()');\n    const elmFavorite = createFavoriteHTML(restaurant);\n\n    const name = document.getElementById('restaurant-name');\n    name.innerHTML = restaurant.name + '&nbsp;';\n    name.append(elmFavorite);\n\n    const address = document.getElementById('restaurant-address');\n    address.innerHTML = restaurant.address;\n\n    const img = DBHelper.imageUrlForRestaurant(restaurant);\n\n    const image = document.getElementById('restaurant-img');\n    if (img) {\n        img_parts = img.split('/');\n\n        image.className = 'restaurant-img lazy';\n        image.src = img_parts[0] + '/320/' + img_parts[1];\n        //https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/\n        //https://stackoverflow.com/questions/16449445/how-can-i-set-image-source-with-base64\n        image.setAttribute('data-sizes', 'auto');\n        image.setAttribute('data-src', img_parts[0] + '/320/' + img_parts[1]);\n        image.setAttribute('data-srcset', '' + img_parts[0] + '/320/' + img_parts[1] + ' 300w,' + img_parts[0] + '/640/' + img_parts[1] + ' 600w,' + img_parts[0] + '/1024/' + img_parts[1] + ' 1000w,' + img_parts[0] + '/1600/' + img_parts[1] + ' 1600w');\n        image.alt = restaurant.name;\n    } else {\n        image.src = 'img/placeholder.png';\n        image.alt = '';\n    }\n\n    const cuisine = document.getElementById('restaurant-cuisine');\n    cuisine.innerHTML = restaurant.cuisine_type;\n\n    // fill operating hours\n    if (restaurant.operating_hours) {\n        fillRestaurantHoursHTML();\n    }\n    // fill reviews\n    fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n    //console.log('restaurant_info-fillRestaurantHoursHTML()');\n    const hours = document.getElementById('restaurant-hours');\n    for (let key in operatingHours) {\n        const row = document.createElement('tr');\n\n        const day = document.createElement('td');\n        day.innerHTML = key;\n        row.appendChild(day);\n\n        const time = document.createElement('td');\n        time.innerHTML = operatingHours[key];\n        row.appendChild(time);\n\n        hours.appendChild(row);\n    }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n    if (debug) console.log('restaurant-fillReviewsHTML()');\n    if (debug) console.log('restaurant-fillReviewsHTML()-reviews=' + reviews);\n    const container = document.getElementById('reviews-container');\n    const title = document.createElement('h2');\n    title.innerHTML = 'Reviews';\n\n    const addReviewButton = document.createElement('a');\n    addReviewButton.id = 'addReview';\n    addReviewButton.className = 'add-review';\n    addReviewButton.onclick = event => {};\n    addReviewButton.innerHTML = 'Add Review';\n\n    // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role\n    addReviewButton.setAttribute(\"role\", \"button\");\n    addReviewButton.setAttribute(\"tabindex\", \"0\");\n    addReviewButton.setAttribute(\"aria-pressed\", \"false\");\n    addReviewButton.setAttribute(\"aria-label\", 'Add review');\n    title.appendChild(addReviewButton);\n\n    container.appendChild(title);\n\n    const lineBreak = document.createElement('br');\n    container.appendChild(lineBreak);\n\n    if (!reviews || reviews.length === 0) {\n        const noReviews = document.createElement('p');\n        noReviews.innerHTML = 'No reviews yet!';\n        container.appendChild(noReviews);\n        const br = document.createElement('br');\n        container.appendChild(br);\n        return;\n    }\n    const ul = document.getElementById('reviews-list');\n    // reviews.forEach(review => {\n    //     ul.appendChild(createReviewHTML(review));\n    // });\n    for (let i = 0; i <= reviews.length; i++) {\n        ul.appendChild(createReviewHTML(reviews[i]));\n    }\n    container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = review => {\n    if (debug) console.log('restaurant-createReviewHTML()');\n    const li = document.createElement('li');\n    const name = document.createElement('p');\n    name.innerHTML = review.name;\n    li.appendChild(name);\n\n    const createdAt = document.createElement('p');\n    createdAt.innerHTML = formattedUnixTime(review.createdAt);\n    createdAt.title = review.createdAt;\n    li.appendChild(createdAt);\n\n    const rating = document.createElement('p');\n    rating.innerHTML = `Rating: ${review.rating}`;\n    li.appendChild(rating);\n\n    const comments = document.createElement('p');\n    comments.innerHTML = review.comments;\n    li.appendChild(comments);\n\n    return li;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant = self.restaurant) => {\n    if (debug) console.log('restaurant-fillBreadcrumb()');\n    const breadcrumb = document.getElementById('breadcrumb');\n    const li = document.createElement('li');\n    li.innerHTML = restaurant.name;\n    li.setAttribute(\"aria-label\", restaurant.name);\n    li.setAttribute(\"aria-current\", 'page');\n    breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n    if (debug) console.log('restaurant-getParameterByName()');\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n          results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};\n\n/**\n * Create restaurant HTML.\n */\ncreateFavoriteHTML = restaurant => {\n    if (!restaurant) {\n        return false;\n    }\n\n    if (debug) console.log('app-createFavoriteHTML-restaurant.restaurant_id=' + restaurant.restaurant_id);\n    if (debug) console.log('app-createFavoriteHTML-restaurant.is_favorite=' + restaurant.is_favorite);\n\n    let is_favorite = restaurant.is_favorite && restaurant.is_favorite.toString() === 'true' ? true : false;\n    if (debug) console.log('app-createFavoriteHTML-is_favorite=' + is_favorite);\n\n    const objFavorite = document.createElement('a');\n    objFavorite.className = 'favorite ' + (is_favorite ? 'is-favorite' : 'not-favorite');\n    objFavorite.title = is_favorite ? 'is favorite' : 'is not favorite';\n    objFavorite.onclick = event => {\n        setRestaurantFavorite(restaurant, objFavorite, is_favorite);\n    };\n    const icon = document.createElement('i');\n    icon.className = 'far fa-heart';\n    objFavorite.append(icon);\n\n    // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role\n    objFavorite.setAttribute(\"role\", \"button\");\n    objFavorite.setAttribute(\"tabindex\", \"0\");\n    objFavorite.setAttribute(\"aria-pressed\", \"false\");\n    objFavorite.setAttribute(\"aria-label\", 'Toggle favorite for ' + restaurant.name);\n\n    return objFavorite;\n};\n\n/**\n * set Restaurant favorite.\n */\nfunction setRestaurantFavorite(restaurant, objFavorite, is_favorite) {\n    if (debug) console.log('app-setRestaurantFavorite()');\n    if (debug) console.log('app-setRestaurantFavorite-is_favorite=' + is_favorite);\n    if (debug) console.log('app-setRestaurantFavorite-typeof objFavorite=' + typeof objFavorite);\n\n    // toggel favorite value\n    is_favorite = !is_favorite;\n    if (debug) console.log('app-setRestaurantFavorite-is_favorite.toggle()=' + is_favorite);\n\n    if (debug) console.log('app-setRestaurantFavorite-typeof restaurant=' + typeof restaurant);\n    if (debug) console.log('app-setRestaurantFavorite-restaurant.restaurant_id=' + restaurant.restaurant_id);\n\n    let dataObj = restaurant;\n    dataObj.is_favorite = is_favorite;\n\n    DBHelper.addUpdateRestaurantById(restaurant, (error, result) => {\n        if (error) {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message}`;\n            throw error;\n        }\n\n        if (debug) console.log('app-setRestaurantFavorite-result=' + result);\n\n        objFavorite.className = 'favorite ' + (is_favorite ? 'is-favorite' : 'not-favorite');\n        objFavorite.title = is_favorite ? 'is favorite' : 'is not favorite';\n        objFavorite.onclick = event => {\n            setRestaurantFavorite(restaurant, objFavorite, is_favorite);\n        };\n        const icon = document.createElement('i');\n        icon.className = 'far fa-heart';\n        // clear previous icon\n        objFavorite.innerHTML = '';\n        objFavorite.append(icon);\n        if (debug) console.log('app-setRestaurantFavorite-Updated icon');\n    });\n    if (debug) console.log('app-setRestaurantFavorite-fetch process done');\n}\n\nfunction saveNewReview(callback) {\n    const restaurant_id = getParameterByName('id', document.location.href);\n    if (debug) console.log('restaurant_id=' + restaurant_id);\n    const name = document.getElementById('d_name').value;\n    const ratingObj = document.getElementById(\"d_rating\");\n    const rating = ratingObj.options[ratingObj.selectedIndex].value;\n    const comment = document.getElementById('d_comment').value;\n\n    const review = {\n        id: '',\n        restaurant_id: restaurant_id,\n        name: name,\n        rating: rating,\n        comment: comment,\n        updatedAt: Date.now(),\n        createdAt: Date.now()\n    };\n    DBHelper.addUpdateReviewById(review, (error, result) => {\n        if (error) return callback(error, null);\n        return callback(null, result);\n    });\n}\n\n// example copied from\n// https://stackoverflow.com/questions/847185/convert-a-unix-timestamp-to-time-in-javascript\nfunction formattedUnixTime(unix_timestamp) {\n    const date_now = new Date();\n    // Create a new JavaScript Date object based on the timestamp\n    // multiplied by 1000 so that the argument is in milliseconds, not seconds.\n    const date = new Date(unix_timestamp * 1000);\n    let year = date.getFullYear();\n    const month = date.getMonth();\n    const day = date.getDate();\n\n    if (year > date_now.getFullYear()) {\n        year = date_now.getFullYear();\n    }\n\n    // Hours part from the timestamp\n    const hours = date.getHours();\n    // Minutes part from the timestamp\n    const minutes = \"0\" + date.getMinutes();\n    // Seconds part from the timestamp\n    const seconds = \"0\" + date.getSeconds();\n\n    const part = date.getDate();\n\n    // Will display time in 10:30:23 format\n    return month + '/' + day + '/' + year + ' ' + (hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2)).toString();\n    //return (hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2));\n}\n\nif (debug) console.log('end /js/restaurant.js');"],"file":"restaurant.min.js"}