{"version":3,"names":[],"mappings":"","sources":["restaurant.min.js"],"sourcesContent":["// js/restaurant.js\n\nlet restaurant;\nlet reviews;\nlet map;\n\n// console.log('typeof debug=' + (typeof debug));\nif (debug) console.log('start /js/restaurant.js');\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n    if (debug) console.log('restaurant-initMap()');\n    dbPromise.then(() => {\n        return fetchRestaurantFromURL((error, restaurant) => {\n            if (error) {\n                // Got an error!\n                console.error(error + ' - restaurant-window.initMap()-fetchRestaurantFromURL()-result');\n                return false;\n            }\n            if (restaurant) return restaurant;\n        }).then(restaurant => {\n            if (debug) console.log('restaurant-window.initMap()-restaurant=' + restaurant);\n            self.map = new google.maps.Map(document.getElementById('map'), {\n                zoom: 16,\n                center: restaurant.latlng,\n                scrollwheel: false\n            });\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n            fillBreadcrumb();\n            return restaurant;\n        }).catch(error => {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message} - restaurant-window.initMap()`;\n            return console.log(error.message);\n        });\n    }).catch(error => {\n        // Oops!. Got an error from server.\n        error.message = `Request failed. Returned status of ${error.message} - restaurant-window.initMap()`;\n        return console.log(error.message);\n    });\n};\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = callback => {\n    if (debug) console.log('restaurant-fetchRestaurantFromURL()');\n    if (self.restaurant) {\n        // restaurant already fetched!\n        return callback(null, self.restaurant);\n    }\n    const id = getParameterByName('id');\n    if (debug) console.log('restaurant_id=' + id);\n    let error;\n    if (!id) {\n        // no id found in URL\n        error = 'No restaurant id in URL';\n        console.error(error);\n        return callback(error, null);\n    } else {\n        return DBHelper.getRestaurantById(id, (error, restaurant) => {\n            self.restaurant = restaurant;\n            if (!restaurant) {\n                error = 'No restaurant match found by id';\n                console.error(error);\n                return callback(error, null);\n            }\n            return restaurant;\n        }).then(restaurant => {\n            fillRestaurantHTML();\n            return restaurant;\n        }).then(restaurant => {\n            // fill reviews\n            fetchReviewsFromURL(restaurant, (error, restaurant) => {\n                return restaurant;\n            }).then(restaurant => {\n                return callback(null, restaurant);\n            });\n        });\n    }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n    if (debug) console.log('restaurant-fillRestaurantHTML()');\n\n    const elmFavorite = createFavoriteHTML(restaurant);\n\n    const name = document.getElementById('restaurant-name');\n    name.innerHTML = restaurant.name + '&nbsp;';\n    name.append(elmFavorite);\n\n    const address = document.getElementById('restaurant-address');\n    address.innerHTML = restaurant.address;\n\n    const img = DBHelper.imageUrlForRestaurant(restaurant);\n\n    const image = document.getElementById('restaurant-img');\n    if (img) {\n        img_parts = img.split('/');\n\n        image.className = 'restaurant-img lazy';\n        image.src = img_parts[0] + '/320/' + img_parts[1];\n        //https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/\n        //https://stackoverflow.com/questions/16449445/how-can-i-set-image-source-with-base64\n        image.setAttribute('data-sizes', 'auto');\n        image.setAttribute('data-src', img_parts[0] + '/320/' + img_parts[1]);\n        image.setAttribute('data-srcset', '' + img_parts[0] + '/320/' + img_parts[1] + ' 300w,' + img_parts[0] + '/640/' + img_parts[1] + ' 600w,' + img_parts[0] + '/1024/' + img_parts[1] + ' 1000w,' + img_parts[0] + '/1600/' + img_parts[1] + ' 1600w');\n        image.alt = restaurant.name;\n    } else {\n        image.src = 'img/placeholder.png';\n        image.alt = '';\n    }\n\n    const cuisine = document.getElementById('restaurant-cuisine');\n    cuisine.innerHTML = restaurant.cuisine_type;\n\n    // fill operating hours\n    if (restaurant.operating_hours) {\n        fillRestaurantHoursHTML();\n    }\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n    //console.log('restaurant-fillRestaurantHoursHTML()');\n    const hours = document.getElementById('restaurant-hours');\n    for (let key in operatingHours) {\n        const row = document.createElement('tr');\n\n        const day = document.createElement('td');\n        day.innerHTML = key;\n        row.appendChild(day);\n\n        const time = document.createElement('td');\n        time.innerHTML = operatingHours[key];\n        row.appendChild(time);\n\n        hours.appendChild(row);\n    }\n};\n\n/**\n * Get current reviews from page URL.\n */\nfetchReviewsFromURL = (restaurant, callback) => {\n    if (debug) console.log('restaurant-fetchReviewsFromURL()');\n    if (debug) console.log('self.reviews=' + self.reviews);\n    if (self.reviews) {\n        // reviews already fetched!\n        console.log('self.reviews=' + self.reviews);\n        return callback(null, self.reviews);\n    }\n\n    if (debug) console.log('fetchReviewsByRestaurantId()');\n    DBHelper.getReviewsByRestaurantId(restaurant.id, (error, reviews) => {\n        self.reviews = reviews;\n        console.log('self.reviews=' + self.reviews);\n        if (error) {\n            console.error(error);\n            return callback(error, null);\n        }\n        fillReviewsHTML();\n        return callback(null, reviews);\n    });\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.reviews) => {\n    if (debug) console.log('restaurant-fillReviewsHTML()');\n\n    const container = document.getElementById('reviews-container');\n    const title = document.createElement('h2');\n    title.innerHTML = 'Reviews';\n\n    const addReviewButton = document.createElement('a');\n    addReviewButton.id = 'addReview';\n    addReviewButton.className = 'add-review';\n    addReviewButton.onclick = event => {};\n    addReviewButton.innerHTML = 'Add Review';\n\n    // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role\n    addReviewButton.setAttribute(\"role\", \"button\");\n    addReviewButton.setAttribute(\"tabindex\", \"0\");\n    addReviewButton.setAttribute(\"aria-pressed\", \"false\");\n    addReviewButton.setAttribute(\"aria-label\", 'Add review');\n    title.appendChild(addReviewButton);\n\n    container.appendChild(title);\n\n    const lineBreak = document.createElement('br');\n    container.appendChild(lineBreak);\n\n    if (!reviews) {\n        const noReviews = document.createElement('p');\n        noReviews.innerHTML = 'No reviews yet!';\n        container.appendChild(noReviews);\n        const br = document.createElement('br');\n        container.appendChild(br);\n        return;\n    }\n    const ul = document.getElementById('reviews-list');\n    reviews.forEach(review => {\n        ul.appendChild(createReviewHTML(review));\n    });\n    container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = review => {\n    if (debug) console.log('restaurant-createReviewHTML()');\n    const li = document.createElement('li');\n    const name = document.createElement('p');\n    name.innerHTML = review.name;\n    li.appendChild(name);\n\n    const createdAt = document.createElement('p');\n    createdAt.innerHTML = DBHelper.formattedUnixTime(review.createdAt);\n    createdAt.title = review.createdAt;\n    li.appendChild(createdAt);\n\n    const rating = document.createElement('p');\n    rating.innerHTML = `Rating: ${review.rating}`;\n    li.appendChild(rating);\n\n    const comments = document.createElement('p');\n    comments.innerHTML = review.comments;\n    li.appendChild(comments);\n\n    return li;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant = self.restaurant) => {\n    if (debug) console.log('restaurant-fillBreadcrumb()');\n    const breadcrumb = document.getElementById('breadcrumb');\n    const li = document.createElement('li');\n    li.innerHTML = restaurant.name;\n    li.setAttribute(\"aria-label\", restaurant.name);\n    li.setAttribute(\"aria-current\", 'page');\n    breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n    if (debug) console.log('restaurant-getParameterByName()');\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n          results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};\n\nfunction onBodyLoadListener() {\n    if (debug) console.log('restaurant-onBodyLoadListener()');\n    // Get the modal\n    const modal = document.getElementById('myModal');\n\n    // Get the button that opens the modal\n    const btn = document.getElementById(\"addReview\");\n\n    if (btn) {\n        // When the user clicks on the button, open the modal\n        btn.onclick = function () {\n            modal.style.display = \"block\";\n        };\n    }\n\n    // Get the <span> element that closes the modal\n    const modalCloseSpan = document.getElementsByClassName(\"close\")[0];\n\n    if (modalCloseSpan) {\n        // When the user clicks on <span> (x), close the modal\n        modalCloseSpan.onclick = function () {\n            modal.style.display = \"none\";\n        };\n    }\n\n    // Get the <button> element that closes the modal\n    const modalReviewClose = document.getElementsByClassName(\"review-modal-close\")[0];\n\n    if (modalReviewClose) {\n        // When the user clicks on <button>, close the modal\n        modalReviewClose.onclick = function () {\n            modal.style.display = \"none\";\n        };\n    }\n\n    // Get the <button> element that closes the modal\n    const modalReviewSubmit = document.getElementsByClassName(\"review-modal-submit\")[0];\n\n    if (modalReviewSubmit) {\n        // When the user clicks on <button>, close the modal\n        modalReviewSubmit.onclick = function () {\n            modalReviewSubmit.onclick = null;\n            modalReviewSubmit.innerHTML = 'Wait...';\n            saveNewReview((error, result) => {\n                //if (result) alert('result=' + (result));\n            });\n            //alert('Review saved!');\n            window.location = window.location;\n        };\n    }\n\n    // When the user clicks anywhere outside of the modal, close it\n    window.onclick = function (event) {\n        if (event.target == modal) {\n            modal.style.display = \"none\";\n        }\n    };\n}\n\nfunction saveNewReview(callback) {\n    const restaurant_id = getParameterByName('id', document.location.href);\n    if (debug) console.log('restaurant_id=' + restaurant_id);\n    const name = document.getElementById('d_name').value;\n    const ratingObj = document.getElementById(\"d_rating\");\n    const rating = ratingObj.options[ratingObj.selectedIndex].value;\n    const comment = document.getElementById('d_comment').value;\n\n    const review = {\n        id: '',\n        restaurant_id: restaurant_id,\n        name: name,\n        rating: rating,\n        comment: comment,\n        updatedAt: Date.now(),\n        createdAt: Date.now()\n    };\n    DBHelper.addUpdateReviewById(review, (error, result) => {\n        if (error) return callback(error, null);\n        return callback(null, result);\n    });\n}\n\nif (debug) console.log('end /js/restaurant.js');"],"file":"restaurant.min.js"}