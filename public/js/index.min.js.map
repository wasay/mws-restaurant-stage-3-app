{"version":3,"names":[],"mappings":"","sources":["index.min.js"],"sourcesContent":["// js/index.js\n\n//DBHelper.debugRestaurantInfo('', 'start /js/index.js');\n\nlet neighborhoods, cuisines;\nlet map;\nlet markers = [];\n\n/**\r\n * document content load\r\n */\ndocument.addEventListener('DOMContentLoaded', event => {\n    //DBHelper.debugRestaurantInfo('', 'index-DOMContentLoaded()');\n\n    new Promise((resolve, reject) => {\n        //DBHelper.debugRestaurantInfo('', 'index-DOMContentLoaded()-1-v1LoadData()-call');\n        DBHelper.v1LoadData((error, result) => {\n            //DBHelper.debugRestaurantInfo(error, 'index-DOMContentLoaded()-v1LoadData-error');\n            //DBHelper.debugRestaurantInfo(result, 'index-DOMContentLoaded()-v1LoadData-result');\n            resolve(result);\n        });\n    }).then(result => {\n        //DBHelper.debugRestaurantInfo(result, 'index-DOMContentLoaded()-2-1-result');\n\n        return new Promise((resolve2, reject2) => {\n            //DBHelper.debugRestaurantInfo('', 'index-DOMContentLoaded()-2-2-fetchNeighborhoods()-call');\n            fetchNeighborhoods((error, result) => {\n                //DBHelper.debugRestaurantInfo(result, 'index-DOMContentLoaded()-2-3-fetchNeighborhoods()-result');\n                resolve2(true);\n            });\n        });\n    }).then(result => {\n        //DBHelper.debugRestaurantInfo(result, 'index-DOMContentLoaded()-3-1-result');\n\n        return new Promise((resolve3, reject3) => {\n            //DBHelper.debugRestaurantInfo('', 'index-DOMContentLoaded()-3-2-fetchCuisines()-call');\n            fetchCuisines((error, result) => {\n                //DBHelper.debugRestaurantInfo(result, 'index-DOMContentLoaded()-3-3-fetchCuisines()-result');\n                resolve3(true);\n            });\n        });\n    }).then(result => {\n        //DBHelper.debugRestaurantInfo(result, 'index-DOMContentLoaded()-4-1-result');\n\n        //DBHelper.debugRestaurantInfo('', 'index-DOMContentLoaded()-4-1-updateRestaurants()-call');\n        updateRestaurants();\n        return true;\n    }).then(result => {\n        //DBHelper.debugRestaurantInfo(result, 'index-DOMContentLoaded()-5-1-result');\n\n        //DBHelper.debugRestaurantInfo('', 'index-DOMContentLoaded()-5-1-lazyLoadImages()-call');\n        lazyLoadImages();\n    }).catch(error => {\n        console.log('Error: ' + error);\n    });\n});\n\nlazyLoadImages = () => {\n    //DBHelper.debugRestaurantInfo('', 'index-lazyLoadImages()');\n\n    let lazyImages = [].slice.call(document.querySelectorAll(\"img.lazy\"));\n\n    if (\"IntersectionObserver\" in window) {\n        let lazyImageObserver = new IntersectionObserver(function (entries, observer) {\n            entries.forEach(function (entry) {\n                if (entry.isIntersecting) {\n                    let lazyImage = entry.target;\n                    lazyImage.src = lazyImage.dataset.src;\n                    lazyImage.srcset = lazyImage.dataset.srcset;\n                    lazyImage.classList.remove(\"lazy\");\n                    lazyImageObserver.unobserve(lazyImage);\n                }\n            });\n        });\n\n        lazyImages.forEach(function (lazyImage) {\n            lazyImageObserver.observe(lazyImage);\n        });\n    } else {\n        // Possibly fall back to a more compatible method here\n    }\n};\n\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\nfetchNeighborhoods = callback => {\n    //DBHelper.debugRestaurantInfo('', 'index-fetchNeighborhoods()');\n\n    return new Promise((resolve, reject) => {\n        //DBHelper.debugRestaurantInfo('', 'index-fetchNeighborhoods()-1-fetchNeighborhoods()-call');\n        DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n            //DBHelper.debugRestaurantInfo(error, 'index-fetchNeighborhoods()-1-fetchNeighborhoods-error');\n            //DBHelper.debugRestaurantInfo(neighborhoods, 'index-fetchNeighborhoods()-1-fetchNeighborhoods-neighborhoods');\n\n            if (error) reject(false);\n            resolve(neighborhoods);\n        });\n    }).then(neighborhoods => {\n        //DBHelper.debugRestaurantInfo(neighborhoods, 'index-fetchNeighborhoods()-2-neighborhoods');\n        if (neighborhoods) {\n            self.neighborhoods = neighborhoods;\n            fillNeighborhoodsHTML();\n        } else {\n            console.log('Error: data missing -index-fetchNeighborhoods()');\n        }\n        callback(null, neighborhoods);\n    }).catch(error => {\n        // Oops!. Got an error from server.\n        console.log(error + '-index-fetchNeighborhoods()-catch');\n        callback(error.message, null);\n    });\n};\n\n/**\r\n * Set neighborhoods HTML.\r\n */\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n    //DBHelper.debugRestaurantInfo('', 'index-fillNeighborhoodsHTML()');\n    //DBHelper.debugRestaurantInfo(neighborhoods, 'index-fillNeighborhoodsHTML()-neighborhoods');\n\n    const select = document.getElementById('neighborhoods-select');\n    neighborhoods.forEach(neighborhood => {\n        const option = document.createElement('option');\n        option.innerHTML = neighborhood;\n        option.value = neighborhood;\n        select.append(option);\n    });\n};\n\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\nfetchCuisines = callback => {\n    //DBHelper.debugRestaurantInfo('', 'index-fetchCuisines()');\n\n    return new Promise((resolve, reject) => {\n        //DBHelper.debugRestaurantInfo('', 'index-fetchCuisines()-1-fetchCuisines()-call');\n        DBHelper.fetchCuisines((error, cuisines) => {\n            //DBHelper.debugRestaurantInfo(error, 'index-fetchCuisines()-1-2-fetchCuisines()-error');\n            //DBHelper.debugRestaurantInfo(cuisines, 'index-fetchCuisines()-1-2-fetchCuisines()-cuisines');\n\n            if (error) reject(false);\n            resolve(cuisines);\n        });\n    }).then(cuisines => {\n        //DBHelper.debugRestaurantInfo(cuisines, 'index-fetchCuisines()-2-cuisines');\n        if (cuisines) {\n            self.cuisines = cuisines;\n            fillCuisinesHTML();\n        }\n        callback(null, cuisines);\n    }).catch(error => {\n        // Oops!. Got an error from server.\n        console.log(error + '-index-fetchCuisines()-catch');\n        callback(error.message, null);\n    });\n};\n\n/**\r\n * Set cuisines HTML.\r\n */\nfillCuisinesHTML = (cuisines = self.cuisines) => {\n    //DBHelper.debugRestaurantInfo('', 'index-fillCuisinesHTML()');\n    //DBHelper.debugRestaurantInfo(cuisines, 'index-fillCuisinesHTML()-cuisines');\n\n    const select = document.getElementById('cuisines-select');\n\n    cuisines.forEach(cuisine => {\n        const option = document.createElement('option');\n        option.innerHTML = cuisine;\n        option.value = cuisine;\n        select.append(option);\n    });\n};\n\n/**\r\n * Initialize Google map, called from HTML.\r\n */\nwindow.initMap = () => {\n    //DBHelper.debugRestaurantInfo('', 'index-initMap()');\n\n    let loc = {\n        lat: 40.722216,\n        lng: -73.987501\n    };\n    self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 12,\n        center: loc,\n        scrollwheel: false\n    });\n    //updateRestaurants();\n};\n\n/**\r\n * Update page and map for current restaurants.\r\n */\nupdateRestaurants = () => {\n    //DBHelper.debugRestaurantInfo('', 'index-updateRestaurants()');\n\n    const cSelect = document.getElementById('cuisines-select');\n    const nSelect = document.getElementById('neighborhoods-select');\n\n    const cIndex = cSelect.selectedIndex;\n    const nIndex = nSelect.selectedIndex;\n\n    const cuisine = cSelect[cIndex].value;\n    const neighborhood = nSelect[nIndex].value;\n\n    //DBHelper.debugRestaurantInfo(cuisine, 'index-updateRestaurants()-1-1-cuisine');\n    //DBHelper.debugRestaurantInfo(neighborhood, 'index-updateRestaurants()-1-1-neighborhood');\n\n    new Promise((resolve, reject) => {\n        DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, result) => {\n            //DBHelper.debugRestaurantInfo(error, 'index-updateRestaurants()-1-2-fetchRestaurantByCuisineAndNeighborhood()-error');\n            //DBHelper.debugRestaurantInfo(result, 'index-updateRestaurants()-1-2-fetchRestaurantByCuisineAndNeighborhood()-result');\n            if (error) reject(error);\n            resolve(result);\n        });\n    }).then(restaurants => {\n        //DBHelper.debugRestaurantInfo(restaurants, 'index-updateRestaurants()-2-restaurants');\n        if (restaurants) {\n            resetRestaurants(restaurants);\n            fillRestaurantsHTML();\n        }\n    }).catch(error => {\n        // Oops!. Got an error from server.\n        console.log(error + '-index-updateRestaurants()-catch');\n    });\n};\n\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\nresetRestaurants = restaurants => {\n    //DBHelper.debugRestaurantInfo('', 'index-resetRestaurants()');\n    //DBHelper.debugRestaurantInfo(restaurants, 'index-fillRestaurantsHTML()-restaurants');\n\n    // Remove all restaurants\n    self.restaurants = [];\n    const ul = document.getElementById('restaurants-list');\n    ul.innerHTML = '';\n\n    // Remove all map markers\n    if (typeof self.markers != 'undefined' && self.markers != 'undefined') {\n        self.markers.forEach(m => m.setMap(null));\n    }\n    self.markers = [];\n    self.restaurants = restaurants;\n};\n\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\n    //DBHelper.debugRestaurantInfo('', 'index-fillRestaurantsHTML()');\n    //DBHelper.debugRestaurantInfo(restaurant, 'index-fillRestaurantsHTML()-restaurant');\n\n    if (!restaurants) return;\n\n    const ul = document.getElementById('restaurants-list');\n    restaurants.forEach(restaurant => {\n        ul.append(createRestaurantHTML(restaurant));\n    });\n    addMarkersToMap();\n};\n\n/**\r\n * Create restaurant HTML.\r\n */\ncreateRestaurantHTML = restaurant => {\n    //DBHelper.debugRestaurantInfo('', 'index-createRestaurantHTML()');\n    //DBHelper.debugRestaurantInfo(restaurant, 'index-createRestaurantHTML()-restaurant');\n\n    if (!restaurant) {\n        return false;\n    }\n    const li = document.createElement('li');\n\n    const img = DBHelper.imageUrlForRestaurant(restaurant);\n\n    const image = document.createElement('img');\n    if (img) {\n        img_parts = img.split('/');\n\n        image.className = 'restaurant-img lazy';\n        image.src = img_parts[0] + '/320/' + img_parts[1];\n        //https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/\n        //https://stackoverflow.com/questions/16449445/how-can-i-set-image-source-with-base64\n        image.setAttribute('data-sizes', 'auto');\n        image.setAttribute('data-src', img_parts[0] + '/320/' + img_parts[1]);\n        image.setAttribute('data-srcset', '' + img_parts[0] + '/320/' + img_parts[1] + ' 300w,' + img_parts[0] + '/640/' + img_parts[1] + ' 600w,' + img_parts[0] + '/1024/' + img_parts[1] + ' 1000w,' + img_parts[0] + '/1600/' + img_parts[1] + ' 1600w');\n        image.alt = restaurant.name;\n    } else {\n        image.src = 'img/placeholder.png';\n        image.alt = '';\n    }\n    li.append(image);\n\n    const elmFavorite = createFavoriteHTML(restaurant);\n\n    const name = document.createElement('h1');\n    name.innerHTML = restaurant.name + '&nbsp;';\n    name.append(elmFavorite);\n    li.append(name);\n\n    const neighborhood = document.createElement('p');\n    neighborhood.innerHTML = restaurant.neighborhood;\n    li.append(neighborhood);\n\n    const address = document.createElement('p');\n    address.innerHTML = restaurant.address;\n    li.append(address);\n\n    const more = document.createElement('a');\n    more.innerHTML = 'View Details';\n    more.href = DBHelper.urlForRestaurant(restaurant);\n\n    // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role\n    more.setAttribute(\"role\", \"button\");\n    more.setAttribute(\"tabindex\", \"0\");\n    more.setAttribute(\"aria-pressed\", \"false\");\n    more.setAttribute(\"aria-label\", restaurant.name);\n\n    li.append(more);\n\n    return li;\n};\n\n/**\r\n * Add markers for current restaurants to the map.\r\n */\naddMarkersToMap = (restaurants = self.restaurants) => {\n    //DBHelper.debugRestaurantInfo('', 'index-addMarkersToMap()');\n    //DBHelper.debugRestaurantInfo(restaurants, 'index-addMarkersToMap()-restaurants');\n\n    if (restaurants) {\n        restaurants.forEach(restaurant => {\n            // Add marker to the map\n            if (restaurant) {\n                const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\n                google.maps.event.addListener(marker, 'click', () => {\n                    window.location.href = marker.url;\n                });\n                self.markers.push(marker);\n            }\n        });\n    }\n};\n\n/**\r\n * Create restaurant HTML.\r\n */\ncreateFavoriteHTML = restaurant => {\n    //DBHelper.debugRestaurantInfo('', 'index-createFavoriteHTML()');\n    //DBHelper.debugRestaurantInfo(restaurant, 'index-createFavoriteHTML()-restaurant');\n    if (!restaurant) {\n        return false;\n    }\n\n    let is_favorite = restaurant && restaurant.is_favorite && restaurant.is_favorite.toString() === 'true' ? true : false;\n    //DBHelper.debugRestaurantInfo(is_favorite, 'index-createFavoriteHTML()-is_favorite');\n\n    const objFavorite = document.createElement('a');\n    objFavorite.className = 'favorite ' + (is_favorite ? 'is-favorite' : 'not-favorite');\n    objFavorite.title = is_favorite ? 'is favorite' : 'is not favorite';\n    objFavorite.onclick = event => {\n        setRestaurantFavorite(restaurant, objFavorite, is_favorite);\n    };\n    const icon = document.createElement('i');\n    icon.className = 'far fa-heart';\n    objFavorite.append(icon);\n\n    // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role\n    objFavorite.setAttribute(\"role\", \"button\");\n    objFavorite.setAttribute(\"tabindex\", \"0\");\n    objFavorite.setAttribute(\"aria-pressed\", \"false\");\n    objFavorite.setAttribute(\"aria-label\", 'Toggle favorite for ' + restaurant.name);\n\n    return objFavorite;\n};\n\n/**\r\n * set Restaurant favorite.\r\n */\nfunction setRestaurantFavorite(restaurant, objFavorite, is_favorite) {\n    //DBHelper.debugRestaurantInfo('', 'index-setRestaurantFavorite()');\n    //DBHelper.debugRestaurantInfo(restaurant, 'index-setRestaurantFavorite()-restaurant');\n    //DBHelper.debugRestaurantInfo(objFavorite, 'index-setRestaurantFavorite()-objFavorite');\n    //DBHelper.debugRestaurantInfo(is_favorite, 'index-setRestaurantFavorite()-is_favorite');\n\n    // toggel favorite value\n    is_favorite = !is_favorite;\n    //DBHelper.debugRestaurantInfo(is_favorite, 'index-setRestaurantFavorite()-is_favorite');\n\n    let dataObj = restaurant;\n    dataObj.is_favorite = is_favorite;\n\n    DBHelper.addUpdateRestaurantById(restaurant, (error, result) => {\n        if (error) {\n            // Oops!. Got an error from server.\n            error.message = `Request failed. Returned status of ${error.message}`;\n            throw error;\n        }\n        //DBHelper.debugRestaurantInfo(result, 'index-setRestaurantFavorite()-result');\n\n        objFavorite.className = 'favorite ' + (is_favorite ? 'is-favorite' : 'not-favorite');\n        objFavorite.title = is_favorite ? 'is favorite' : 'is not favorite';\n        objFavorite.onclick = event => {\n            setRestaurantFavorite(restaurant, objFavorite, is_favorite);\n        };\n        const icon = document.createElement('i');\n        icon.className = 'far fa-heart';\n        // clear previous icon\n        objFavorite.innerHTML = '';\n        objFavorite.append(icon);\n        //DBHelper.debugRestaurantInfo('', 'index-setRestaurantFavorite()-icon-updated');\n    });\n    //DBHelper.debugRestaurantInfo('', 'index-setRestaurantFavorite()-done');\n}\n\n//DBHelper.debugRestaurantInfo('', 'index-end');"],"file":"index.min.js"}