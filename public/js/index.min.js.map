{"version":3,"names":[],"mappings":"","sources":["index.min.js"],"sourcesContent":["// js/index.js\n\nlet neighborhoods, cuisines;\nlet map;\nlet markers = [];\n\n// console.log('typeof debug=' + (typeof debug));\nif (debug) console.log('start /js/index.js');\n\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\ndocument.addEventListener('DOMContentLoaded', event => {\n    if (debug) console.log('index-DOMContentLoaded()');\n    dbPromise.then(() => {\n        fetchNeighborhoods();\n        return true;\n    }).then(() => {\n        fetchCuisines();\n        return true;\n    });\n});\n\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\nfetchNeighborhoods = () => {\n    if (debug) console.log('index-fetchNeighborhoods()');\n    DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n        if (debug) console.log('index-fetchNeighborhoods-neighborhoods()');\n        if (error) {\n            // Got an error\n            console.error(error);\n        } else if (neighborhoods) {\n            self.neighborhoods = neighborhoods;\n            fillNeighborhoodsHTML();\n        }\n    });\n};\n\n/**\r\n * Set neighborhoods HTML.\r\n */\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n    if (debug) console.log('index-fillNeighborhoodsHTML()');\n    const select = document.getElementById('neighborhoods-select');\n    neighborhoods.forEach(neighborhood => {\n        const option = document.createElement('option');\n        option.innerHTML = neighborhood;\n        option.value = neighborhood;\n        select.append(option);\n    });\n};\n\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\nfetchCuisines = () => {\n    if (debug) console.log('index-fetchCuisines()');\n    DBHelper.fetchCuisines((error, cuisines) => {\n        if (error) {\n            // Got an error!\n            console.error(error);\n        } else {\n            self.cuisines = cuisines;\n            fillCuisinesHTML();\n        }\n    });\n};\n\n/**\r\n * Set cuisines HTML.\r\n */\nfillCuisinesHTML = (cuisines = self.cuisines) => {\n    if (debug) console.log('index-fillCuisinesHTML()');\n    const select = document.getElementById('cuisines-select');\n\n    cuisines.forEach(cuisine => {\n        const option = document.createElement('option');\n        option.innerHTML = cuisine;\n        option.value = cuisine;\n        select.append(option);\n    });\n};\n\n/**\r\n * Initialize Google map, called from HTML.\r\n */\nwindow.initMap = () => {\n    if (debug) console.log('index-initMap()');\n    let loc = {\n        lat: 40.722216,\n        lng: -73.987501\n    };\n    try {\n        self.map = new google.maps.Map(document.getElementById('map'), {\n            zoom: 12,\n            center: loc,\n            scrollwheel: false\n        });\n    } catch (ex) {\n        console.log('Unable to initialize google maps');\n    }\n    dbPromise.then(() => {\n        updateRestaurants();\n    });\n};\n\n/**\r\n * Update page and map for current restaurants.\r\n */\nupdateRestaurants = () => {\n    if (debug) console.log('index-updateRestaurants()');\n    const cSelect = document.getElementById('cuisines-select');\n    const nSelect = document.getElementById('neighborhoods-select');\n\n    const cIndex = cSelect.selectedIndex;\n    const nIndex = nSelect.selectedIndex;\n\n    const cuisine = cSelect[cIndex].value;\n    const neighborhood = nSelect[nIndex].value;\n\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\n        if (error || !restaurants) {\n            // Got an error!\n            console.error(error);\n        }\n        return restaurants;\n    }).then(restaurants => {\n        if (debug) console.log('index-updateRestaurants()-fetchRestaurantByCuisineAndNeighborhood()-restaurants' + restaurants);\n        resetRestaurants(restaurants);\n    }).then(() => {\n        fillRestaurantsHTML();\n    });\n};\n\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\nresetRestaurants = restaurants => {\n    if (debug) console.log('index-resetRestaurants()');\n    if (debug) console.log('index-resetRestaurants()-restaurants' + restaurants);\n    // Remove all restaurants\n    self.restaurants = [];\n    const ul = document.getElementById('restaurants-list');\n    ul.innerHTML = '';\n\n    // Remove all map markers\n    if (typeof self.markers != 'undefined' && self.markers != 'undefined') {\n        self.markers.forEach(m => m.setMap(null));\n    }\n    self.markers = [];\n    self.restaurants = restaurants;\n};\n\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\n    if (debug) console.log('index-fillRestaurantsHTML()');\n\n    if (!restaurants) return;\n\n    const ul = document.getElementById('restaurants-list');\n    restaurants.forEach(restaurant => {\n        ul.append(createRestaurantHTML(restaurant));\n    });\n    addMarkersToMap();\n};\n\n/**\r\n * Create restaurant HTML.\r\n */\ncreateRestaurantHTML = restaurant => {\n    if (debug) console.log('index-createRestaurantHTML()');\n    if (!restaurant) {\n        return false;\n    }\n    const li = document.createElement('li');\n\n    const img = DBHelper.imageUrlForRestaurant(restaurant);\n\n    const image = document.createElement('img');\n    if (img) {\n        img_parts = img.split('/');\n\n        image.className = 'restaurant-img lazy';\n        image.src = img_parts[0] + '/320/' + img_parts[1];\n        //https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/\n        //https://stackoverflow.com/questions/16449445/how-can-i-set-image-source-with-base64\n        image.setAttribute('data-sizes', 'auto');\n        image.setAttribute('data-src', img_parts[0] + '/320/' + img_parts[1]);\n        image.setAttribute('data-srcset', '' + img_parts[0] + '/320/' + img_parts[1] + ' 300w,' + img_parts[0] + '/640/' + img_parts[1] + ' 600w,' + img_parts[0] + '/1024/' + img_parts[1] + ' 1000w,' + img_parts[0] + '/1600/' + img_parts[1] + ' 1600w');\n        image.alt = restaurant.name;\n    } else {\n        image.src = 'img/placeholder.png';\n        image.alt = '';\n    }\n    li.append(image);\n\n    const elmFavorite = createFavoriteHTML(restaurant);\n\n    const name = document.createElement('h1');\n    name.innerHTML = restaurant.name + '&nbsp;';\n    name.append(elmFavorite);\n    li.append(name);\n\n    const neighborhood = document.createElement('p');\n    neighborhood.innerHTML = restaurant.neighborhood;\n    li.append(neighborhood);\n\n    const address = document.createElement('p');\n    address.innerHTML = restaurant.address;\n    li.append(address);\n\n    const more = document.createElement('a');\n    more.innerHTML = 'View Details';\n    more.href = DBHelper.urlForRestaurant(restaurant);\n\n    // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role\n    more.setAttribute(\"role\", \"button\");\n    more.setAttribute(\"tabindex\", \"0\");\n    more.setAttribute(\"aria-pressed\", \"false\");\n    more.setAttribute(\"aria-label\", restaurant.name);\n\n    li.append(more);\n\n    return li;\n};\n\n/**\r\n * Add markers for current restaurants to the map.\r\n */\naddMarkersToMap = (restaurants = self.restaurants) => {\n    if (debug) console.log('index-addMarkersToMap()');\n    restaurants.forEach(restaurant => {\n        // Add marker to the map\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\n        google.maps.event.addListener(marker, 'click', () => {\n            window.location.href = marker.url;\n        });\n        self.markers.push(marker);\n    });\n};\n\nif (debug) console.log('end /js/index.js');"],"file":"index.min.js"}