{"version":3,"names":[],"mappings":"","sources":["sw.js"],"sourcesContent":["// sw.js\n\n// https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts\nself.importScripts('js/idb.js');\n\nself.importScripts('js/dbhelper.min.js');\n\ndebug = false;\n\nif (debug) console.log('start /sw.js');\n\nself.addEventListener('install', function (event) {\n    if (debug) console.log('sw-install()');\n\n    // The promise that skipWaiting() returns can be safely ignored.\n    self.skipWaiting();\n\n    // DBHelper.v1LoadData((error, result) => {\n    //     DBHelper.debugRestaurantInfo(error, 'dbhelper-v1LoadData-error');\n    //     DBHelper.debugRestaurantInfo(result, 'dbhelper-v1LoadData-result');\n    // });\n\n    event.waitUntil(caches.open(DBHelper.staticCacheName).then(function (cache) {\n        return cache.addAll(['/css/main.min.css', '/js/regular.js', '/js/fontawesome.js', '/js/main.min.js', '/js/dbhelper.min.js', '/js/idb.js', '/js/index.min.js', '/js/restaurant.min.js', '/404.html', '/', '/index.html', '/manifest.json', '/robots.txt', '/sw.js', 'https://fonts.googleapis.com/css?family=Roboto', 'https://fonts.googleapis.com/css?family=Roboto:300,400,500,700', 'https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxK.woff2', 'https://fonts.gstatic.com/s/roboto/v18/KFOlCnqEu92Fr1MmEU9fBBc4.woff2']);\n    }).then(() => {\n        caches.open(DBHelper.contentImgsCache).then(function (cache) {\n            return cache.addAll(['/img/icons/icon.png', '/img/icons/icon192.png', '/img/icons/icon512.png', '/img/320/1.jpg', '/img/320/2.jpg', '/img/320/3.jpg', '/img/320/4.jpg', '/img/320/5.jpg', '/img/320/6.jpg', '/img/320/7.jpg', '/img/320/8.jpg', '/img/320/9.jpg', '/img/320/10.jpg']);\n        });\n    }).catch(error => {\n        // Oops!. Got an error from server.\n        error.message = `Request failed. Returned status of ${error.message} - sw-install()`;\n        throw error;\n    }));\n});\n\nself.addEventListener('activate', function (event) {\n    if (debug) console.log('sw-activate()');\n    event.waitUntil(cleanCache().catch(error => {\n        // Oops!. Got an error from server.\n        error.message = `Request failed. Returned status of ${error.message} - sw-activate()`;\n        return false;\n    }));\n});\n\nself.addEventListener('fetch', function (event) {\n    if (debug) console.log('sw-listener-fetch()');\n\n    const requestUrl = new URL(event.request.url);\n    if (debug) console.log('sw-listener-fetch-requestUrl=' + requestUrl);\n\n    if (debug) console.log('sw-listener-fetch-requestUrl.port=' + requestUrl.port);\n    if (debug) console.log('sw-listener-fetch-requestUrl.origin=' + requestUrl.origin);\n    if (debug) console.log('sw-listener-fetch-location.origin=' + location.origin);\n\n    if (requestUrl.port === '1337') {\n        if (debug) console.log('sw-listener-fetch-return-serveJSON');\n        const jsonResult = serveJSON(requestUrl);\n        if (jsonResult) {\n            return jsonResult;\n        }\n    } else if (requestUrl.origin === location.origin) {\n        if (debug) console.log('sw-requestUrl.pathname=' + requestUrl.pathname);\n        if (requestUrl.pathname === '' || requestUrl.pathname === '/') {\n            if (debug) console.log('sw-listener-fetch-respondWith-caches.match');\n            event.respondWith(caches.match('/index.html'));\n            return;\n        }\n        if (requestUrl.pathname.startsWith('img/') || requestUrl.pathname.startsWith('/img/')) {\n            if (debug) console.log('sw-listener-fetch-servePhoto');\n            event.respondWith(servePhoto(event.request));\n            return;\n        }\n    }\n\n    if (debug) console.log('sw-listener-fetch-respondWith-serveRequest()');\n    event.respondWith(serveRequest(event.request));\n});\n\nfunction servePhoto(request) {\n    if (debug) console.log('sw-servePhoto()');\n\n    let storageUrl = request.url.replace(/^(\\d+-?)+\\d+$\\.jpg$/, '');\n\n    return caches.open(DBHelper.contentImgsCache).then(function (cache) {\n        return cache.match(storageUrl).then(function (response) {\n            if (debug) console.log('sw-cache check if a match');\n            if (response) return response;\n\n            if (debug) console.log('sw-fetch request.url=' + request.url);\n            return fetch(request).then(function (networkResponse) {\n                if (debug) console.log('sw-response cache');\n                cache.put(storageUrl, networkResponse.clone());\n                return networkResponse;\n            }).catch(error => {\n                // Oops!. Got an error from server.\n                error.message = `Request failed serve request. Returned status of ${error.message}`;\n                if (debug) console.log('404 return placeholder.png');\n                return caches.match('/img/static/placeholder.png');\n            });\n        });\n    }).catch(error => {\n        // Oops!. Got an error from server.\n        error.message = `Request failed serve photo. Returned status of ${error.message}`;\n        throw error;\n    });\n}\n\nfunction serveRequest(request) {\n    if (debug) console.log('sw-serveRequest()');\n\n    let storageUrl = request.url;\n\n    return caches.open(staticCacheName).then(function (cache) {\n\n        return cache.match(storageUrl).then(function (response) {\n            if (debug) console.log('sw-cache match check');\n            if (response) return response;\n\n            if (debug) console.log('sw-fetch request.url=' + request.url);\n            return fetch(request).then(function (networkResponse) {\n                if (debug) console.log('response cache');\n                cache.put(storageUrl, networkResponse.clone());\n                return networkResponse;\n            }).catch(error => {\n                // Oops!. Got an error from server.\n                error.message = `Request failed serve request. Returned status of ${error.message}`;\n                if (debug) console.log('sw-404 return index.html');\n                return caches.match('/404.html');\n            });\n        });\n    }).catch(error => {\n        // Oops!. Got an error from server.\n        error.message = `Request failed serve request. Returned status of ${error.message}`;\n        throw error;\n    });\n}\n\nfunction cleanCache() {\n    if (debug) console.log('sw-cleanCache()');\n    return caches.keys().then(function (cacheNames) {\n        return Promise.all(cacheNames.filter(function (cacheName) {\n            return cacheName.startsWith(appPrefix) && !allCaches.includes(cacheName);\n        }).map(function (cacheName) {\n            return caches.delete(cacheName);\n        }));\n    }).catch(error => {\n        // Oops!. Got an error from server.\n        error.message = `Request failed clean cache. Returned status of ${error.message} -sw-cleanCache()`;\n        throw error;\n    });\n}\n\nfunction serveJSON(requestUrl) {\n    if (debug) console.log('sw-serveJSON()');\n\n    if (debug) console.log('sw-serveJSON-requestUrl=' + requestUrl);\n    return fetch(requestUrl, { headers: { 'Content-Type': 'application/json' } }).then(function (networkResponse) {\n        if (debug) console.log('sw-serveJSON-networkResponse');\n        return networkResponse;\n    }).then(response => response.json()).catch(error => {\n        // Oops!. Got an error from server.\n        error.message = `Request failed. Returned status of ${error.message} - sw-serveJSON`;\n        throw error;\n    });\n}"],"file":"sw.js"}