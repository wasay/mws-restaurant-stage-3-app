{"version":3,"names":[],"mappings":"","sources":["sw.js"],"sourcesContent":["// sw.js\n\n// https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts\nself.importScripts('js/idb.js');\n\nconst appPrefix = 'mws-restaurant-stage-2';\nconst staticCacheName = appPrefix + '-v18';\nconst contentImgsCache = appPrefix + '-content-imgs';\nconst allCaches = [staticCacheName, contentImgsCache];\nconst dbName = 'topRestaurants';\nlet debug = false;\n\n// https://github.com/jakearchibald/idb\n// https://developers.google.com/web/ilt/pwa/lab-indexeddb\n// https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore\nconst dbPromise = idb.open(dbName, 1, function (upgradeDb) {\n    if (debug) console.log('sw.createDB()-upgradeDb.oldVersion=' + upgradeDb.oldVersion);\n    switch (upgradeDb.oldVersion) {\n        case 0:\n            const restaurantsObjectStore = upgradeDb.createObjectStore('restaurants', { keyPath: 'restaurant_id' });\n            restaurantsObjectStore.createIndex('restaurant_id', 'restaurant_id', { unique: true });\n            restaurantsObjectStore.createIndex('name', 'name', { unique: false });\n            restaurantsObjectStore.createIndex('neighborhood', 'neighborhood', { unique: false });\n            restaurantsObjectStore.createIndex('photograph', 'photograph', { unique: false });\n            restaurantsObjectStore.createIndex('address', 'address', { unique: false });\n            restaurantsObjectStore.createIndex('lat', 'lat', { unique: false });\n            restaurantsObjectStore.createIndex('lng', 'lng', { unique: false });\n            restaurantsObjectStore.createIndex('cuisine_type', 'cuisine_type', { unique: false });\n\n            // autoIncrement example - https://developers.google.com/web/ilt/pwa/working-with-indexeddb\n            const operatingHoursObjectStore = upgradeDb.createObjectStore('operating_hours', {\n                keyPath: 'operating_hour_id',\n                autoIncrement: true\n            });\n            operatingHoursObjectStore.createIndex('operating_hour_id', 'operating_hour_id', { unique: true });\n            operatingHoursObjectStore.createIndex('restaurant_id', 'restaurant_id', { unique: false });\n            operatingHoursObjectStore.createIndex('day', 'day', { unique: false });\n            operatingHoursObjectStore.createIndex('hours', 'hours', { unique: false });\n\n            const reviewsObjectStore = upgradeDb.createObjectStore('reviews', {\n                keyPath: 'review_id',\n                autoIncrement: true\n            });\n            reviewsObjectStore.createIndex('review_id', 'review_id', { unique: true });\n            reviewsObjectStore.createIndex('restaurant_id', 'restaurant_id', { unique: false });\n            reviewsObjectStore.createIndex('name', 'name', { unique: false });\n            reviewsObjectStore.createIndex('date', 'date', { unique: false });\n            reviewsObjectStore.createIndex('rating', 'rating', { unique: false });\n            reviewsObjectStore.createIndex('comments', 'comments', { unique: false });\n\n    }\n}).catch(error => {\n    // Oops!. Got an error from server.\n    error.message = `Request failed createDB. Returned status of ${error.message}`;\n    throw error;\n});\n\ndbPromise.then(db => {\n    const dbVersion = db.version;\n    if (debug) console.log('dbVersion=' + dbVersion);\n    version0AddRestaurantsData(db);\n}).catch(error => {\n    // Oops!. Got an error from server.\n    error.message = `Request failed load data. Returned status of ${error.message}`;\n    throw error;\n});\n\nself.importScripts('js/dbhelper.min.js');\n\nself.addEventListener('install', function (event) {\n    if (debug) console.log('sw-install()');\n\n    // The promise that skipWaiting() returns can be safely ignored.\n    self.skipWaiting();\n\n    event.waitUntil(caches.open(staticCacheName).then(function (cache) {\n        return cache.addAll(['/img/320/1.jpg', '/img/320/2.jpg', '/img/320/3.jpg', '/img/320/4.jpg', '/img/320/5.jpg', '/img/320/6.jpg', '/img/320/7.jpg', '/img/320/8.jpg', '/img/320/9.jpg', '/img/320/10.jpg', '/manifest.json', '/img/icons/icon.png', '/img/icons/icon192.png', '/img/icons/icon512.png', '/css/main.min.css', '/js/idb.js', '/sw.js', '/js/dbhelper.min.js', '/js/index.min.js', '/js/restaurant.min.js', '/', '/index.html', '/404.html', 'https://fonts.googleapis.com/css?family=Roboto', 'https://fonts.googleapis.com/css?family=Roboto:300,400,500,700', 'https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxK.woff2', 'https://fonts.gstatic.com/s/roboto/v18/KFOlCnqEu92Fr1MmEU9fBBc4.woff2']);\n    }).catch(error => {\n        // Oops!. Got an error from server.\n        error.message = `Request failed install. Returned status of ${error.message}`;\n        throw error;\n    }));\n});\n\nself.addEventListener('activate', function (event) {\n    if (debug) console.log('sw-activate()');\n    event.waitUntil(cleanCache().catch(error => {\n        // Oops!. Got an error from server.\n        error.message = `Request failed activate. Returned status of ${error.message}`;\n        return false;\n    }));\n});\n\nself.addEventListener('fetch', function (event) {\n    if (debug) console.log('sw-fetch()');\n\n    const requestUrl = new URL(event.request.url);\n    if (debug) console.log('fetch requestUrl=' + requestUrl);\n\n    if (debug) console.log('requestUrl.port=' + requestUrl.port);\n    if (debug) console.log('requestUrl.origin=' + requestUrl.origin);\n    if (debug) console.log('location.origin=' + location.origin);\n\n    if (requestUrl.port === '1337') {\n        if (dbPromise && dbPromise.db && dbPromise.db.transaction.objectStore('restaurants')) {\n            const jsonResult = serveJSON(requestUrl);\n            if (jsonResult) {\n                return jsonResult;\n            }\n        }\n    } else if (requestUrl.origin === location.origin) {\n        if (debug) console.log('requestUrl.pathname=' + requestUrl.pathname);\n        if (requestUrl.pathname === '' || requestUrl.pathname === '/') {\n            event.respondWith(caches.match('/index.html'));\n            return;\n        }\n        if (requestUrl.pathname.startsWith('img/') || requestUrl.pathname.startsWith('/img/')) {\n            event.respondWith(servePhoto(event.request));\n            return;\n        }\n    }\n    if (debug) console.log('other');\n\n    event.respondWith(serveRequest(event.request));\n});\n\n// self.addEventListener('message', function(event) {\n//   if (event.data.action === 'skipWaiting') {\n//     self.skipWaiting();\n//   }\n// });\n\nfunction servePhoto(request) {\n    if (debug) console.log('sw-servePhoto()');\n\n    let storageUrl = request.url.replace(/^(\\d+-?)+\\d+$\\.jpg$/, '');\n\n    return caches.open(contentImgsCache).then(function (cache) {\n        return cache.match(storageUrl).then(function (response) {\n            if (debug) console.log('cache match check');\n            if (response) return response;\n\n            if (debug) console.log('fetch request.url=' + request.url);\n            return fetch(request).then(function (networkResponse) {\n                if (debug) console.log('response cache');\n                cache.put(storageUrl, networkResponse.clone());\n                return networkResponse;\n            }).catch(error => {\n                // Oops!. Got an error from server.\n                error.message = `Request failed serve request. Returned status of ${error.message}`;\n                if (debug) console.log('404 return placeholder.png');\n                return caches.match('/img/static/placeholder.png');\n            });\n        });\n    }).catch(error => {\n        // Oops!. Got an error from server.\n        error.message = `Request failed serve photo. Returned status of ${error.message}`;\n        throw error;\n    });\n}\n\nfunction serveRequest(request) {\n    if (debug) console.log('sw-serveRequest()');\n\n    let storageUrl = request.url;\n\n    return caches.open(staticCacheName).then(function (cache) {\n\n        return cache.match(storageUrl).then(function (response) {\n            if (debug) console.log('cache match check');\n            if (response) return response;\n\n            if (debug) console.log('fetch request.url=' + request.url);\n            return fetch(request).then(function (networkResponse) {\n                if (debug) console.log('response cache');\n                cache.put(storageUrl, networkResponse.clone());\n                return networkResponse;\n            }).catch(error => {\n                // Oops!. Got an error from server.\n                error.message = `Request failed serve request. Returned status of ${error.message}`;\n                if (debug) console.log('404 return index.html');\n                return caches.match('/404.html');\n            });\n        });\n    }).catch(error => {\n        // Oops!. Got an error from server.\n        error.message = `Request failed serve request. Returned status of ${error.message}`;\n        throw error;\n    });\n}\n\nfunction cleanCache() {\n    if (debug) console.log('sw-cleanCache()');\n    return caches.keys().then(function (cacheNames) {\n        return Promise.all(cacheNames.filter(function (cacheName) {\n            return cacheName.startsWith(appPrefix) && !allCaches.includes(cacheName);\n        }).map(function (cacheName) {\n            return caches.delete(cacheName);\n        }));\n    }).catch(error => {\n        // Oops!. Got an error from server.\n        error.message = `Request failed clean cache. Returned status of ${error.message}`;\n        throw error;\n    });\n}\n\n//https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\nfunction getParameterByName(name, url) {\n    if (!url) return false;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    const regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n          results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\nfunction serveJSON(requestUrl) {\n    if (debug) console.log('sw-serveJSON()');\n    // get indexed db\n    const id = getParameterByName('id', requestUrl.url);\n    if (debug) console.log('id=' + id);\n    if (id) {\n        const restaurant = getRestaurantById(id);\n        if (restaurant.length > 0) {\n            return restaurant;\n        }\n    } else {\n        const restaurants = getAllRestaurants();\n        if (restaurants.length > 0) {\n            return restaurants;\n        }\n    }\n\n    return [];\n}\n\nfunction version0AddRestaurantsData(db) {\n\n    if (debug) console.log('version0AddRestaurantsData()');\n\n    return fetch(DBHelper.DATABASE_URL).then(response => response.json()).then(function (neighborhoods) {\n\n        if (debug) console.log('version0AddRestaurantsData()-neighborhoods');\n        if (debug) console.log('neighborhoods=' + neighborhoods);\n\n        neighborhoods.forEach(restaurant => {\n            if (debug) console.log('neighborhoods-restaurant()');\n\n            // add to database\n\n            if (debug) console.log('restaurant-restaurant-start');\n            const txRestaurants = db.transaction('restaurants', 'readwrite');\n            let restaurantsStore = txRestaurants.objectStore('restaurants');\n\n            restaurantsStore.get(restaurant.id).then(function (item) {\n\n                if (item) return true;\n\n                //https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore\n                const rtNewItem = [{\n                    restaurant_id: restaurant.id,\n                    name: restaurant.name,\n                    neighborhood: restaurant.neighborhood,\n                    photograph: restaurant.photograph,\n                    address: restaurant.address,\n                    lat: restaurant.latlng.lat,\n                    lng: restaurant.latlng.lng,\n                    cuisine_type: restaurant.cuisine_type\n                }];\n                restaurantsStore.add(rtNewItem[0]);\n                txRestaurants.complete;\n\n                if (debug) console.log('restaurant-restaurant-complete');\n\n                if (debug) console.log('restaurant-operating_hours-start');\n                let operating_hours = restaurant.operating_hours;\n\n                const txOperatingHours = db.transaction('operating_hours', 'readwrite');\n                let operatingHoursStore = txOperatingHours.objectStore('operating_hours');\n                for (const indx in operating_hours) {\n                    if (debug) console.log('indx=' + indx);\n                    if (debug) console.log('operating_hours[indx]=' + operating_hours[indx]);\n                    operatingHoursStore.add({\n                        restaurant_id: restaurant.id,\n                        day: indx,\n                        hours: operating_hours[indx]\n                    });\n                }\n                txOperatingHours.complete;\n                if (debug) console.log('restaurant-operating_hours-complete');\n\n                if (debug) console.log('restaurant-reviews-start');\n                const txReviews = db.transaction('reviews', 'readwrite');\n                let reviewsStore = txReviews.objectStore('reviews');\n                const reviews = restaurant.reviews;\n                if (debug) console.log('reviews=' + reviews);\n\n                for (const rkey in reviews) {\n                    if (debug) console.log('rkey=' + rkey);\n                    if (debug) console.log('reviews[rkey]=' + reviews[rkey]);\n                    if (debug) console.log('restaurant.id=' + restaurant.id);\n                    if (debug) console.log('reviews[rkey].name=' + reviews[rkey].name);\n                    if (debug) console.log('reviews[rkey].date=' + reviews[rkey].date);\n                    if (debug) console.log('reviews[rkey].rating=' + reviews[rkey].rating);\n                    if (debug) console.log('reviews[rkey].comments=' + reviews[rkey].comments);\n                    reviewsStore.add({\n                        restaurant_id: restaurant.id,\n                        name: reviews[rkey].name,\n                        date: reviews[rkey].date,\n                        rating: reviews[rkey].rating,\n                        comments: reviews[rkey].comments\n                    });\n                }\n                txReviews.complete;\n                if (debug) console.log('restaurant-reviews-complete');\n            });\n        });\n\n        return true;\n    }).catch(error => {\n        // Oops!. Got an error from server.\n        error.message = `Request failed 01 Add Data. Returned status of ${error.message}`;\n\n        throw error;\n    });\n}\n\nfunction getAllRestaurants() {\n    if (debug) console.log('getAllRestaurants()');\n\n    //if (!dbPromise) return JSON.stringify([]);\n\n    return idb.open(dbName).then(function (db) {\n        const txRestaurants = db.transaction('restaurants', 'readonly');\n        let restaurantsStore = txRestaurants.objectStore('restaurants');\n        return restaurantsStore.getAll();\n    }).then(function (db, items) {\n        if (!items) {\n            return JSON.stringify([]);\n        }\n\n        let restaurants = [];\n        for (let i = 0; i < items.length; i++) {\n            const restaurant = items[i];\n            let item = {\n                \"id\": restaurant.id,\n                \"name\": restaurant.name,\n                \"neighborhood\": restaurant.neighborhood,\n                \"photograph\": restaurant.photograph,\n                \"address\": restaurant.address,\n                \"latlng\": {\n                    \"lat\": restaurant.latlng.lat,\n                    \"lng\": restaurant.latlng.lat\n                },\n                \"cuisine_type\": restaurant.cuisine_type\n            };\n\n            const txOperatingHours = db.transaction('operating_hours', 'readonly');\n            let operatingHoursStore = txOperatingHours.objectStore('operating_hours');\n            const operating_hours_list = operatingHoursStore.getAll(['restaurant_id', restaurant.id]);\n            let operating_hours = [];\n            for (const indx in operating_hours_list) {\n                operating_hours[indx] = [operating_hours_list[indx]];\n            }\n            item[\"operating_hours\"] = operating_hours;\n\n            const txReviews = db.transaction('reviews', 'readonly');\n            let reviewsStore = txReviews.objectStore('reviews');\n            const review_list = reviewsStore.getAll('restaurant_id', restaurant.id);\n            let reviews = [];\n            for (const review in review_list) {\n                const rItem = {\n                    \"name\": review.name,\n                    \"date\": review.date,\n                    \"rating\": review.rating,\n                    \"comments\": review.comments\n                };\n                reviews.push(rItem);\n            }\n            item[\"reviews\"] = reviews;\n            restaurants.push(item);\n        }\n        return JSON.stringify(restaurants);\n    });\n}\n\nfunction getRestaurantById(id) {\n    if (debug) console.log('getRestaurantById()');\n\n    return idb.open(dbName).then(function (db) {\n        const txRestaurants = db.transaction('restaurants', 'readonly');\n        let restaurantsStore = txRestaurants.objectStore('restaurants');\n        return restaurantsStore.get(id);\n    }).then(function (restaurant) {\n        if (!restaurant) {\n            return JSON.stringify([]);\n        }\n\n        let item = {\n            \"id\": restaurant.id,\n            \"name\": restaurant.name,\n            \"neighborhood\": restaurant.neighborhood,\n            \"photograph\": restaurant.photograph,\n            \"address\": restaurant.address,\n            \"latlng\": {\n                \"lat\": restaurant.latlng.lat,\n                \"lng\": restaurant.latlng.lat\n            },\n            \"cuisine_type\": restaurant.cuisine_type\n        };\n\n        const txOperatingHours = db.transaction('operating_hours', 'readonly');\n        let operatingHoursStore = txOperatingHours.objectStore('operating_hours');\n        const operating_hours_list = operatingHoursStore.getAll(['restaurant_id', restaurant.id]);\n        let operating_hours = [];\n        for (const indx in operating_hours_list) {\n            operating_hours[indx] = [operating_hours_list[indx]];\n        }\n        item[\"operating_hours\"] = operating_hours;\n\n        const txReviews = db.transaction('reviews', 'readonly');\n        let reviewsStore = txReviews.objectStore('reviews');\n        const review_list = reviewsStore.getAll('restaurant_id', restaurant.id);\n        let reviews = [];\n        for (const review in review_list) {\n            const rItem = {\n                \"name\": review.name,\n                \"date\": review.date,\n                \"rating\": review.rating,\n                \"comments\": review.comments\n            };\n            reviews.push(rItem);\n        }\n        item[\"reviews\"] = reviews;\n\n        return JSON.stringify(item);\n    });\n}"],"file":"sw.js"}